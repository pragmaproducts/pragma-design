import {BaseElement} from "./../../baremetal/lib/base-element.js";
import {DialogNavigation} from "./../lib/dialog-navigation.js";
import {findParentLi, toggleClass} from "./../../lib/dom-helper.js";
import {BaseNavigation} from "./../lib/base-navigation.js";
import {isMobile} from "./../../lib/device-helper.js";
import {createInflatorFunction} from "./../../baremetal/lib/virtualization/inflation-utils.js";

export class PragmaNotificationDetail extends BaseElement {
    constructor() {
        super();
        
        this.changeState(false);
        
        this._loadNotificationItemsHandler = this.loadNotificationItems.bind(this);
        window.eventEmitter.on("load-notification-items", this._loadNotificationItemsHandler);
        
        this._closeNotificationItems = this.close.bind(this);
        window.eventEmitter.on("close-notification-items", this._closeNotificationItems);
    }
    
    async connectedCallback() {
        super.connectedCallback();
        
        await this.initTemplate();

        this._panelBody = this.querySelector(".pnd-body");
        this._items = this.querySelector("#pnd-items");
        
        this.setAttribute("role", "complementary");
        this.setAttribute("aria-live", "assertive ");
        
        const btnClose = this.querySelector("#btnClose");
        this._btnToggle = this.querySelector("#btnToggle");
        
        this.registerEvent(btnClose, "click", this.close.bind(this));
        this.registerEvent(this._btnToggle, "click", this._toggleExpand.bind(this));
        this.registerEvent(this._items, "click", this._click.bind(this));
        this.registerEvent(this, "keydown", this._keyDown.bind(this));

        this._hashchangeHandler = this._hashchange.bind(this);
        window.addEventListener("hashchange", this._hashchangeHandler);

        this._baseNavigation = new BaseNavigation(this);
        this._dialogNavigation = new DialogNavigation(this, this.close.bind(this));
    }
    
    disconnectedCallback() {
        window.eventEmitter.remove("load-notification-items", this._loadNotificationItemsHandler);
        this._loadNotificationItemsHandler = null;
        
        window.eventEmitter.remove("close-notification-items", this._closeNotificationItems);
        this._closeNotificationItems = null;

        window.removeEventListener("hashchange", this._urlChangedHandler);
        this._hashchangeHandler = null;

        this._baseNavigation.dispose();
        this._baseNavigation = null;
        
        this._dialogNavigation.dispose();
        this._dialogNavigation = null;
        this._panelBody = null;
        this._items = null;
        this._targetContext = null;
        this._selectedElement = null;
        this._btnToggle = null;
        this._detailItemTemplate = null;
        this._inflate = null;
    }

    /**
     * Will return a boolean value representing if the current web page context differs from the target context
     * @returns {*}
     */
    get hasContextChanged() {
        if (this._targetContext == null) return null;
        const locationHashParts = window.location.hash.split("/");
        return (locationHashParts[0] !== `#${this._targetContext.type}` || locationHashParts[1] !== this._targetContext.remote);
    }

    /**
     * Returns target visualisation based on target context
     * @returns {*}
     */
    get targetVisualisation() {
        if (this._targetVisualisation == null) {
            this._targetVisualisation = document.querySelector(`#${this._targetContext["visualisation-id"]}`);
        } 
        
        return this._targetVisualisation;
    }

    set targetVisualisation(newValue) {
        this._targetVisualisation = newValue;
    }
    
    /**
     * Click event handler
     * @param event
     * @private
     */
    _click(event) {
        const listItem = findParentLi(event.target);
        if (listItem == null) return;
        this._referenceRecord(listItem);
    }

    /**
     * Close component when context changes
     * @private
     */
    _hashchange() {
        if (this.isOpen === true && this.hasContextChanged === true) {
            this.close();
        }
    }

    /**
     * Key up event handler for component
     * @param event
     * @private
     */
    _keyDown(event) {
        if (event.target.tagName !== "LI") return;

        let toBeFocused;
        
        switch (event.key) {
            case this._baseNavigation.keyCodes.upArrow:
                toBeFocused = event.target.previousElementSibling;
                break;
            case this._baseNavigation.keyCodes.downArrow:
                toBeFocused = event.target.nextElementSibling;
                break;
            case this._baseNavigation.keyCodes.space:
                event.preventDefault();
                break;
            case this._baseNavigation.keyCodes.home:
                toBeFocused = this._items.children[0];
                break;
            case this._baseNavigation.keyCodes.end:
                toBeFocused = this._items.children[this.ul.children.length - 1];
                break;
            case this._baseNavigation.keyCodes.tab:
                toBeFocused = event.shiftKey === true ? event.target.previousElementSibling : event.target.nextElementSibling;
                break;
            default:
                break;
        }

        if (toBeFocused != null) {
            toBeFocused.focus();
            this._referenceRecord(toBeFocused);
        }
    }

    /**
     * Redirect to the target context
     * @private
     */
    _redirectToTarget() {
        window.eventEmitter.postMessage("pragma-navigator", {
            remote: this._targetContext.remote,
            view: this._targetContext.type,
            id: this._targetContext.recordId,
            context: this._targetContext.context
        });
    }

    /**
     * Set relevant style rules to visually show reference for notification item to target record element
     * @param listItem
     * @private
     */
    _referenceRecord(listItem) {
        this._removeStateOnTarget();

        //TODO JN: Use data source to display item and set state (expand if groups)
        this._selectedElement = this.targetVisualisation.querySelector(`[data-id="${listItem.dataset.recordId}"]`);
        this._selectedElement.classList.add(`${listItem.dataset.severity}-state`);
        this._selectedElement.scrollIntoView();
        
        if (isMobile() === true) {
            this._toggleExpand();
        } 
    }
    
    /**
     * Remove the state for currently selected target element
     * @private
     */
    _removeStateOnTarget() {
        if (this._selectedElement != null) {
            for (let className of Array.from(this._selectedElement.classList)) {
                if (className.includes("-state")) {
                    this._selectedElement.classList.remove(className);
                }
            }
        }
    }

    /**
     * Inflate list item with detail
     * @param li
     * @param notificationItem
     * @private
     */
    _renderItem(li, notificationItem) {
        notificationItem.icon = `#${notificationItem.severity}`;
        const inflateItem = { item: notificationItem };
        li.firstElementChild.dataset.recordId = notificationItem.objectId;
        li.firstElementChild.dataset.severity = notificationItem.severity;
        
        this._inflate.inflateFn(li, inflateItem);
    }

    /**
     * Adds or removes minimise class on component, sets relevant label
     * @private
     */
    _toggleExpand() {
        toggleClass(this._panelBody, "collapsed");
        toggleClass(this._btnToggle, "expandIcon");
        const label = (this._btnToggle.classList.contains("expandIcon") === true) ? window.translations.pragmaNotificationDetail.buttons.collapse : window.translations.pragmaNotificationDetail.buttons.expand;
        this._btnToggle.setAttribute("aria-label", label);
    }

    /**
     * Change state of component, add/remove relevant attributes
     * @param open: boolean defining state
     */
    changeState(open) {
        if (open === true) {
            this.isOpen = open;
            
            this.classList.remove("close");
            this.removeAttribute("aria-hidden");
            this._dialogNavigation.focusOpeningElement();
        }
        else {
            this.isOpen = false;
            
            this.classList.add("close");
            this.setAttribute("aria-hidden", "true");
        }
    }

    /**
     * Empty detail items list element
     */
    clear() {
        while (this._items.firstChild) {
            this._items.removeChild(this._items.firstChild);
        }
        
        this.targetVisualisation = null;
        this._targetContext = null;
    }

    /**
     * Close component
     */
    close() {
        this.changeState(false);
        this._removeStateOnTarget();
    }

    /**
     * Initialise component template
     * @returns {Promise<void>}
     */
    async initTemplate() {
        const instance = document.importNode(window.templates.get("pragma-notification-detail-template"), true);
        this.appendChild(instance);
        this._detailItemTemplate = document.importNode(window.templates.get("pragma-notification-detail-item-template"), true);
        this._inflate = createInflatorFunction(this._detailItemTemplate);
    }

    /**
     * Load notification items into component
     * @param params
     */
    loadNotificationItems(params) {
        if ((params.items || []).length === 0) return;
        
        this.clear();
        
        this._targetContext = params.detailContext;
        
        const fragment = document.createDocumentFragment();
        
        for (const item of params.items) {
            const li = document.importNode(this._detailItemTemplate, true);
            this._renderItem(li, item);
            fragment.appendChild(li);
        }

        this._items.appendChild(fragment);
        
        if (this.hasContextChanged === true) {
            this._redirectToTarget();
        }
        
        this.changeState(true);
    }
}

customElements.define("pragma-notification-detail", PragmaNotificationDetail);