import {BaseElement} from "./../../baremetal/lib/base-element.js";
import {isMobile} from "./../../lib/device-helper.js";
import {createElement, findParentOfType} from "./../../lib/dom-helper.js";

export class OverflowToolbar extends BaseElement {
    get currentSelectedItem() {
        return this._currentSelectedItem;
    }

    set currentSelectedItem(newValue) {
        if (this._currentSelectedItem != null) {
            this._currentSelectedItem.removeAttribute("aria-selected");
        }

        this._currentSelectedItem = newValue;

        if (newValue != null) {
            this._currentSelectedItem.setAttribute("aria-selected", true);
        }
    }
    
    get buttonCount() {
        if (this._buttonCount != null) return this._buttonCount;
        
        const attr = this.getAttribute("button-count");
        if (attr != null) {
            return Number(attr);
        }

        return isMobile() == true ? 3 : 5;
    }
    
    set buttonCount(newValue) {
        this._buttonCount = newValue;
    }

    connectedCallback() {
        super.connectedCallback();
        this.expectedAttributes = ["id", "icon-name", "title",  "action"];
        
        this.initTemplate();

        this.registerEvent(this.btnOptions, "click", this.showDropdownItems.bind(this));
    }

    disconnectedCallback() {
        super.disconnectedCallback();
        this.btnOptions = null;
        this.dropdownContainer = null;
        this.backPanel = null;
    }

    initTemplate() {
        const instance = document.importNode(window.templates.get("pragma-overflow-toolbar-template"), true);
        this.appendChild(instance);

        this.btnOptions = this.querySelector("#btnOptions");
        this.dropdownContainer = this.querySelector("#dropdownList");
        this.backPanel = this.querySelector("#back-panel");

        this.registerEvent(this.dropdownContainer, "click", this.buttonClicked.bind(this));
        this.registerEvent(this.backPanel, "click", () => this.hideDropdownItems());

        const template = this.querySelector("template");
        if (template == null) return;

        const itemsInstance = document.importNode(template.content, true);
        const items = itemsInstance.querySelectorAll("item");

        this.processItems(items);
    }

    processItems(items) {
        const buttonsContainer = this.querySelector("#buttons");

        // 1. prevent dom thrashing, first read then write
        const buttonsFragment = document.createDocumentFragment();
        const itemsFragment = document.createDocumentFragment();

        // 2. create buttons
        let index = 0;
        for (let i = 0; i < this.buttonCount; i++) {
            if (i > items.length -1) {
                this.btnOptions.classList.add("hidden");
                break;
            }

            index = i;
            buttonsFragment.appendChild(this.createButton(items[i]));
        }

        // 3. create list items
        if (index < items.length - 1) {
            for (let i = index + 1; i < items.length; i++) {
                itemsFragment.appendChild(this.createListItem(items[i]));
            }
        }
        else {
            this.btnOptions.classList.add("hidden");
        }

        // 4. add items to dom
        buttonsContainer.appendChild(buttonsFragment);
        this.dropdownContainer.appendChild(itemsFragment);
    }

    /**
     * Create a button for the toolbar given a particular item
     * @param item
     */
    createButton(item) {
        const result = createElement("pragma-icon-button", null, [
            {
                name: "icon-name",
                value: item.getAttribute("icon-name")
            },
            {
                name: "aria-label",
                value: item.getAttribute("title")
            },
            {
                name: "data-id",
                value: item.getAttribute("id")
            }
        ]);

        const action = item.getAttribute("action");
        if (action != null && action != -1) {
            result.setAttribute("data-action", action);
        }
        
        this.setUnexpectedAttributes(result, item);

        this.registerEvent(result, "click", this.buttonClicked.bind(this))
        return result;
    }

    /**
     * Create a list item element that must go into the ul given a particular item
     * @param item
     */
    createListItem(item) {
        const result =  createElement("li", null, [
            {
                name: "role",
                "value": "option"
            },
            {
                name: "data-id",
                value: item.getAttribute("id")
            }
         ], item.getAttribute("title"));

        const action = item.getAttribute("action");
        if (action != null && action != -1) {
            result.setAttribute("data-action", action);
        }

        return result;
    }
    
    setUnexpectedAttributes(element, item) {
        const attributes = Array.from(item.attributes);
        
        for (let attr of attributes) {
            if (this.expectedAttributes.indexOf(attr.name) == -1) {
                element.setAttribute(attr.name, attr.value);
            }
        }
    }

    /**
     * Make the dropdown items visible and active
     */
    showDropdownItems() {
        if (this.backPanel.classList.contains("hidden")) {
            this.backPanel.classList.remove("hidden");
            this.btnOptions.setAttribute("aria-expanded", true);

            this.registerEvent(this.dropdownContainer, "keydown", this.dropdownKeyUp.bind(this));
            this.registerEvent(this.dropdownContainer, "mousedown", (event) => this.currentSelectedItem = event.target);

            this.dropdownContainer.classList.remove("hidden");
            this.dropdownContainer.focus();

            this.currentSelectedItem = this.dropdownContainer.children[0];
        }
        else {
            this.hideDropdownItems();
        }
    }

    /**
     * Make the dropdown items invisible
     */
    hideDropdownItems() {
        this.backPanel.classList.add("hidden");
        this.btnOptions.setAttribute("aria-expanded", false);
        this.dropdownContainer.classList.add("hidden");

        this.unregisterEvent(this.dropdownContainer, "keydown");
        this.unregisterEvent(this.dropdownContainer, "mousedown");

        this.btnOptions.focus();

        this.currentSelectedItem = null;
    }

    /**
     * Handel keyboard events for the dropdown menu
     * @param event
     */
    dropdownKeyUp(event) {
        const fnName = `perform${event.code}`;
        if (this[fnName] != null) {
            this[fnName](event);
        }
    }

    /**
     * What happens if you press the key up button on the drop down menu
     */
    performArrowUp() {
        const previousSibling = this.currentSelectedItem.previousSibling;
        if (previousSibling != null) {
            this.currentSelectedItem = previousSibling;
        }
    }

    /**
     * What happens if you press the key up button on the drop down menu
     */
    performArrowDown() {
        const nextSibling = this.currentSelectedItem.nextSibling;
        if (nextSibling != null) {
            this.currentSelectedItem = nextSibling;
        }
    }

    /**
     * What happens if you press the escape button on the drop down menu
     */
    performEscape() {
        this.hideDropdownItems();
    }

    /**
     * Notify that the given item was selected
     */
    performSpace() {
        this.itemSelected(this.currentSelectedItem.dataset.id, this.currentSelectedItem.dataset.action);
        this.hideDropdownItems();
    }

    /**
     * Notify that the given item was selected
     */
    performEnter() {
        this.itemSelected(this.currentSelectedItem.dataset.id, this.currentSelectedItem.dataset.action);
        this.hideDropdownItems();
    }

    /**
     * Handle button click event
     * @param event
     */
    buttonClicked(event) {
        this.itemSelected(event.target.dataset.id, event.target.dataset.action);
        this.hideDropdownItems();
    }

    /**
     * Raise selection changed event
     * @param id
     */
    itemSelected(id, action) {
        if (id == null) return;

        if (action == null) {
            this.dispatchEvent(new CustomEvent("selected", {detail: id}));
        }
        else {
            this.performAction(Number(action));
        }
    }

    /**
     * Call into the default pragma form features to execute actions as defined on the schema.
     * @param action
     */
    performAction(action) {
        const form = findParentOfType(this, "pragma-form");
        if (form == null) return;

        form.performAction(action, true, null);
    }
}

customElements.define('pr-overflow-toolbar', OverflowToolbar);