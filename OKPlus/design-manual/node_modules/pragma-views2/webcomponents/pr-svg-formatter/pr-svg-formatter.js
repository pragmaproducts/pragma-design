import {BaseElement} from "./../../baremetal/lib/base-element.js";
import {getCssVariableValue} from "../../lib/color-helpers.js";

export class SvgFormatter extends BaseElement {

    /**
     * Return svg in the parent element
     */
    get targetSvg() {
        return this.parentElement.svg;
    }

    /**
     * Get the fill attribute from the svg
     * @returns {*|string|string}
     */
    get fill() {
        return this._fill || this.getAttribute("fill") || "";
    }

    /**
     * Set and update the svg fill color
     * @param newValue
     */
    set fill(newValue) {
        this._fill = newValue;
        this._updateSvgStyle();
    }

    /**
     * Get the formatter target class attribute
     * @returns {*|string}
     */
    get targetClass() {
        return this._targetClass || this.getAttribute("target-class");
    }

    set targetClass(newValue) {
        this._targetClass = newValue;
    }

    /**
     * Get the svg border color and attribute
     * @returns {*|string|string}
     */
    get border() {
        return this._border || this.getAttribute("border") || "none";
    }

    /**
     * Get set and update the border color. Call _updateSvgStyle()
     * @param newValue
     */
    set border(newValue) {
        this._border = newValue;
        this._updateSvgStyle();
    }

    connectedCallback() {
        super.connectedCallback();
        if (this.targetClass.indexOf("--") !== -1){
            this.fill = getCssVariableValue(this.targetClass).trim();
        }
        this._updateSvgStyleHandler = this._updateSvgStyle.bind(this);
        this.targetSvg == null ? this._registerCallback() : this._updateSvgStyle();
    }

    disconnectedCallback() {
        super.disconnectedCallback();
        this.parentElement.unregisterReadyCallback(this._updateSvgStyleHandler);
        this._updateSvgStyleHandler = null;
    }

    /**
     * Get all formatters with the target class and then loop through and update each
     * @private
     */
    _updateSvgStyle() {
        if(this.targetSvg == null) return;

        const parts = Array.from(this.targetSvg.querySelectorAll(`#${this.targetClass}`));
        for (const part of parts) {
            part.style.fill = this.fill;
        }
        this.targetSvg.style.fill = this.fill;
        this.targetSvg.style.border = this.border;
    }

    /**
     * Passes through _updateSVGStyleHandler
     * @private
     */
    _registerCallback() {
        this.parentElement.registerReadyCallback(this._updateSvgStyleHandler);
    }
}

customElements.define('pr-svg-formatter', SvgFormatter);