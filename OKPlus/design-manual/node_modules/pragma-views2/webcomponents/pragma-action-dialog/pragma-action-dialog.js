import {BindableElement} from './../lib/bindable-element.js';
import {createActionButton, createButton} from "../../lib/button-helpers.js";

class PragmaActionDialog extends BindableElement {

    get title() {
        return this._title;
    }
    
    set title(value) {
        this._title = value;
        this._setDialogTitle();
    }

    get contentElement() {
        return this._contentElement;
    }

    set contentElement(value) {
        this._contentElement = value;
    }

    get buttons() {
        return this._buttons;
    }

    set buttons(value) {
        this._buttons = value;
    }

    get visible() {
        return this._visible;
    }

    get id() {
        return this._id;
    }

    set id(value) {
        this._id = value;
    }

    set visible(newValue) {
        this._visible = newValue;
        if (newValue === true) {
            this.setAttribute("aria-hidden", false);
        }
        else{
            this.setAttribute("aria-hidden", true);
        }
    }
    
    connectedCallback() {
        this.initTemplate();
        super.connectedCallback();
        this._setDialogTitle();
        this._setFooter();
    }

    disconnectedCallback() {
        super.disconnectedCallback();
        this.container = null;
        this.footer = null;
    }

    initTemplate() {
        const instance = document.importNode(window.templates.get("pragma-action-dialog"), true);
        this.appendChild(instance);
        this.container = this.querySelector("#container");
        this.container.appendChild(this.contentElement);
        this.footer = this.querySelector(".dialog-footer");
    }

    _setDialogTitle() {
        const header = this.querySelector("#action-dialog-title");
        
        if(header != null) {
            header.innerHTML = this._title;
        }
    }

    _setFooter() {
        if(this.buttons == null) return;

        const fragment = document.createDocumentFragment();

        for (let i = 0; i < this.buttons.length; i++) {
            const button = this.buttons[i];
            const element = button.remote === true ? createActionButton(button.title, `${this.id}_${i}`, button.styles) : createButton(button.title,  button.styles);
            element.id = button.id;
            fragment.appendChild(element);
        }
        this.footer.appendChild(fragment);

    }

    footerClicked() {
       console.log("Footer clicked");
    }

    closeClicked() {
        console.log("Close clicked");
    }


}

customElements.define('pragma-action-dialog', PragmaActionDialog);