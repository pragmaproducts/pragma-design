import {PragmaConditionalFormatter} from "./../pragma-conditional-formatter/pragma-conditional-formatter.js";
import {createElement} from "../../lib/dom-helper.js";

class PragmaGridColumn extends HTMLElement {
    get field() {
        return this.getAttribute("field");
    }

    get title() {
        return this.getAttribute("title");
    }
    
    get alignment() {
        return this.getAttribute("alignment")
    }
    
    get isVisible() {
        const attrValue = this.getAttribute("is-visible");
        return this._isVisible || (attrValue == null ? true : attrValue == "true");
    }
    
    get type() {
        return this.getAttribute("type") || "normal";
    }
    
    set isVisible(newValue) {
        this._isVisible = newValue == true || newValue == "true";
        
        if (this.parentElement != null && this.parentElement.columnVisibilityChanged != null) {
            this.parentElement.columnVisibilityChanged(this);
        }
    }
    
    static get observedAttributes() {
        return ['is-visible'];
    }

    attributeChangedCallback(name, oldValue, newValue) {
        if (name == "is-visible") {
            this.isVisible = newValue;
        }
    }
    
    connectedCallback() {
        this.formatters = this.querySelectorAll("pragma-conditional-formatter");
    }
    
    disconnectedCallback() {
        this.formatters = null;
    }

    createHeaderElement() {
        const column = document.createElement("div");
        column.setAttribute("role", "columnheader")
        column.innerHTML = this.title;
        column.style.width = `${this.dataset.width}px`;

        const textAlignment = this.alignment || "left";
        column.style.textAlign = textAlignment;

        return column;
    }

    /**
     * 
     * 
     * @param {string} templateType: if this is a tempalted column, what template should be used for the content.
     * @returns {HTMLElement}
     */
    createRowElement(templateType) {
        const result = createElement("div", null, [{name: "tabindex", value: "-1"}], `#${this.field}`, "cell", [{name: "width", value: `${this.dataset.width}px`}]);
        
        if (templateType != null) {
            result.innerHTML = this.getContent(templateType);
        }
        return result;
    }

    getCode() {
        if (this.code != null) {
            return this.code;
        }
        
        let result = "";
        
        for (let formatter of this.formatters) {
            result += formatter.getCode(`children[${this.index + 1}]`);
        }
        
        this.code = result;
        return result;
    }

    getContent(templateType) {
        const result = [];
        const template = this.querySelector(`[type="${templateType}"]`);
        
        if (template == null) {
            return "";
        }
        
        for (let el of template.content.children) {
            result.push(el.outerHTML);
        }
        return result.join("");
    }
}

customElements.define("pragma-grid-column", PragmaGridColumn);