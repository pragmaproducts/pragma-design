import {BaseElement} from "../../baremetal/lib/base-element.js";

class PragamActionButton extends BaseElement {
    get title() {
        return this.getAttribute("title") || this._title;
    }
    
    set title(newValue) {
        this._title = newValue;
    }
    
    get activityId() {
        return this.getAttribute("activity-id") || this._activityId;
    }
    
    set activityId(newValue) {
        window.eventEmitter.remove(`activity_${this.activityId}`);
        this._activityId = newValue;
        
        if (newValue != null) {
            window.eventEmitter.on(`activity_${newValue}`, (value) => this.setState(value));
        }
    }
    
    get state() {
        return this.getAttribute("state") || this._state;
    }
    
    set state(newValue) {
        if (this._state === newValue) {
            return;   
        }
        
        this._state = newValue;
        this.setAttribute("state", newValue);
        
        if (this.actionIcon != null) {
            this.actionIcon.setAttribute("state", newValue);
        }
        
        if (this[newValue] != null) {
            this[newValue]();
        }
    }
    
    static get observedAttributes() {
        return ['state'];
    }

    constructor() {
        super();
    }
    
    async connectedCallback() {
        super.connectedCallback();

        const fragment = document.createDocumentFragment();
        this.text = document.createElement("div");
        this.text.innerText = this.title;
        fragment.appendChild(this.text);

        this.actionIcon = document.createElement("pragma-action-icon");
        this.actionIcon.setAttribute("state", "none");
        this.actionIcon.classList.add("invisible");
        fragment.appendChild(this.actionIcon);

        this.appendChild(fragment);
        
        this.classList.add("button");
        this.setAttribute("role", "button");
        this.setAttribute("aria-label", this.title);
        this.setAttribute("tabindex", "0");
        this.activityId = this.getAttribute("activity-id");
        this.registerEvent(this, "keyup", this.keyup.bind(this));
    }
    
    disconnectedCallback() {
        window.eventEmitter.remove(`activity_${this.activity}`);
        this.text = null;
        this.actionIcon = null;
    }
    
    setState(value) {
        if (typeof value === "string") {
            this.state = value;
        } 
        else{
            this.callback = value.callback;
            this.state = value.state;
        }
    }

    attributeChangedCallback(name, oldValue, newValue) {
        this[name] = newValue;
    }
    
    keyup(event) {
        switch (event.key) {
            case " ":
            case "Enter":
                this.click();
                break;
            default: 
                break;
        }
    }

    busy() {
        if (this.text == null) {
            return;    
        }
        
        this.text.classList.add("invisible");
        this.actionIcon.classList.remove("invisible");
    }
    
    done() {
        if (this.text == null) {
            return;    
        }
        
        setTimeout(() => {
            if(this.actionIcon == null) return;
            this.text.classList.remove("invisible");
            this.actionIcon.classList.add("invisible");
            this.isBusy = false;
            if (this.callback != null) {
                this.callback();
            }
        }, 2000);
    }
    
    error() {
        if (this.text == null) {
            return;    
        }
        
        setTimeout(() => {
            if(this.actionIcon == null) return;
            this.text.classList.remove("invisible");
            this.actionIcon.classList.add("invisible");
            this.isBusy = false;
            if (this.callback != null) {
                this.callback();
            } 
        }, 2000);
    }
}

customElements.define("pragma-action-button", PragamActionButton);