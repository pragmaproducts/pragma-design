import {createElement, createSvg} from "../../lib/dom-helper.js";
import {createCheckbox, createExpandedArrow} from "../lib/virtualization-utils.js";

export function createItemTemplate(template, expandRef, checkboxAriaLabel) {
    const clonedTemplate = document.importNode(template, true);
    const content = clonedTemplate.content;

    const row = createElement("div", ["tree-item"], [{name: "tabindex", value: "-1"}],
        null, null, [
        { name: "position", value: "absolute" },
        { name: "left", value: 0},
        { name: "top", value: 0 },
        { name: "right", value: 0 },
        { name: "align-items", value: "center"}
    ]);

    const container = createElement("div", ["tree-item-container"]);
    const actionsContainer = createElement("div", ["tree-item-actions"]);
   
    actionsContainer.appendChild(createCheckbox(true, checkboxAriaLabel));
    actionsContainer.appendChild(createCheckbox(false,checkboxAriaLabel));
    actionsContainer.appendChild(createLoadingIndicator());
    const treeExpandContainer = createElement("div", ["tree-expand-arrow-container"]);
    treeExpandContainer.appendChild(createExpandedArrow(expandRef));
    actionsContainer.appendChild(treeExpandContainer);
    row.appendChild(actionsContainer);

    while(content.children.length > 0) {
        container.appendChild(content.children[0]);
    }
    row.setAttribute("role", `#hasChildren === true || item.model.${expandRef} === true ? "group" : "treeitem"`);
    row.setAttribute("aria-selected", "#__isSelected || false");

    content.innerHTML = "";
    row.appendChild(container);
    content.appendChild(row);
    return clonedTemplate;
}

export function createLoadingIndicator() {
    const svg = createSvg("loading");
    svg.classList.add("spinner");
    svg.setAttributeNS(null,"viewBox", "0 0 20 20");
    svg.setAttributeNS(null,"aria-hidden", "#__isBusy != true || false");
    return svg;
}
