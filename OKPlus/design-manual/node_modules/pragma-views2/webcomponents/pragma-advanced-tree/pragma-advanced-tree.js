import { CustomTemplateRenderer } from "../lib/render-custom-template.js";
import { DataStore } from "./../lib/data-store.js";
import { AdvancedVisualizationBase } from "../lib/advanced-visualization-base.js";
import { createItemTemplate } from "./pragma-advanced-tree-utils.js";
import { SelectionMediator } from "./../lib/selection-mediator.js";
import { TypeSelectionMediator } from "./../lib/type-selection-mediator.js";
import { findParentWithClass } from "./../../lib/dom-helper.js";
import { KeyboardHelper } from "./keyboard-helper.js";
import { Navigation } from "./navigation.js";

export class PragmaAdvancedTree extends AdvancedVisualizationBase {
    connectedCallback() {
        super.connectedCallback();
        this.initializeTemplates();
        const dataStoreOptions = {
            selectionChangedCallback: this.selectionChanged.bind(this),
            itemsAddedCallback: this.itemsAdded.bind(this),
            itemsUpdatedCallback: this.itemsUpdated.bind(this),
            itemsDeletedCallback: this.itemsDeleted.bind(this),
            perspective: this.perspective
        };
        this.expandRef = this.getAttribute('expand-ref') || 'expandable';
        this.dataStore = new DataStore(dataStoreOptions);
        this.dataStore.datasource = this.datasource;
        this.initTemplate();
        this.registerEvent(this, "dblclick", this.dblClick.bind(this));
        this.allowMultipleSelect = this.getAttribute("selection") !== "single";
        this.typeExpression = this.getAttribute("type-ref");
        this.setAttribute("tabIndex", "0");
        this.keyboardHelper;
    }

    disconnectedCallback() {
        super.disconnectedCallback();
        this.body = null;
        this.scroller = null;
        this.renderer.dispose();
        this.renderer = null;
        this.keyboardHelper = null;
        this.navigation = null;
    }

    get datasource() {
        return this.getProperty("datasource", () => {
            return super.datasource;
        })
    }

    set datasource(newValue) {
        this.performDatasourceValidation(newValue, () => {

            let treeTemplates = [];
            for (const template of this.templates) {
                treeTemplates.push(createItemTemplate(template, this.expandRef, window.translations.selection.selectRecord));
            }

            if (this.defaultTemplate != null) {
                treeTemplates.push(createItemTemplate(this.defaultTemplate, this.expandRef, window.translations.selection.selectRecord));
            }

            this.renderer = new CustomTemplateRenderer(this.container, this.scroller, this.dataStore, this.formatters, this.selection, treeTemplates, true);
            this.dataStore.selectionMediator = this.typeExpression != null
                ? new TypeSelectionMediator(this.datasource, this.selectionReference, this.allowMultipleSelect, this.typeExpression)
                : new SelectionMediator(this.datasource, this.selectionReference, this.allowMultipleSelect, this.expandRef);
        });
    }

    get perspective() {
        return this._perspective || this.getAttribute("perspective");
    }

    set perspective(newValue) {
        this._perspective = newValue;
    }

    get selection() {
        return this._selection || this.getAttribute("selection");
    }

    set selection(newValue) {
        this._selection = newValue;
    }

    /**
     * @returns {KeyboardHelper}
     */
    get keyboardHelper() {
        return this.getProperty("keyboardHelper", () => {
            return new KeyboardHelper(this);
        });
    }

    set keyboardHelper(value) {
        this.setProperty("keyboardHelper", value);
    }

    /**
     * @returns {Navigation}
     */
    get navigation() {
        return this.getProperty("navigation", () => {
            return new Navigation(this);
        });
    }

    set navigation(value) {
        this.setProperty("navigation", value);
    }

    getItemDimensions(index) {
        const dataItem = this.dataStore.data[index];
        const template = this.renderer.getItemTemplate(dataItem);
        return template.value.dimensions;
    }

    calculateRunway(numberOfItems) {
        if (this.renderer.dimentions == null) return;

        const top = numberOfItems * this.renderer.dimentions.height;
        this.scrollMarker.style.transform = `translate(${this.renderer.dimentions.width}px, ${top}px)`;
    }

    clear() {
        if ((this.renderer || {}).container != null) {
            this.renderer.container.innerHTML = "";
        }
    }

    async click(event) {
        const elements = super.click(event);
        const arrowClicked = elements[0].getAttribute("aria-expanded") != null;
        const checkboxClicked = elements[0].dataset.checkbox != null;
        const row = findParentWithClass(elements[0], "tree-item");

        if (row == null) return;

        if (arrowClicked === true) {
            await this.toggleExpand(row);
        } else {
            this.dataStore.toggleSelection(row.__dataIndex, !checkboxClicked);
            this.focus.focus(row);
        }
    }

    async dblClick(event) {
        const elements = document.elementsFromPoint(event.pageX, event.pageY);
        const rowgroups = elements.filter(item => item.getAttribute("role") === "group")

        if (rowgroups.length > 0) {
            const target = rowgroups[0];
            this.focus.index = target.__dataIndex;
            await this.toggleExpand(target);
        }
    }

    async toggleExpand(target) {
        const index = target.__dataIndex;
        const item = this.dataStore.data[index];
        if (item.isBusy === true) return;
        this.dataStore.toggleBusy(index);
        this.renderer.redrawItem(target, item);
        await this.dataStore.toggleExpand(index);
        this.dataStore.toggleBusy(index);
        this.renderer.setItemSizes();
        this.renderer.redrawCurrentPage();
        this.renderer.setScrollMarker();
        this.focus.index = index;
        this.focus.focus();
    }

    async refresh(index) {
        const item = this.dataStore.data[index];
        if (item.isBusy === true) return;

        this.dataStore.toggleBusy(index);
        this.renderer.redrawCurrentPage();
        if (item.__isExpanded === true) {
            await this.dataStore.toggleExpand(index);
        }
        item.items = [];

        await this.dataStore.toggleExpand(index);

        this.dataStore.toggleBusy(index);
        this.renderer.setItemSizes();
        this.renderer.redrawCurrentPage();
        this.renderer.setScrollMarker();
    }

    initTemplate() {
        const instance = document.importNode(window.templates.get("pragma-advanced-tree"), true);

        this.defaultTemplate = instance.querySelector("#pragma-advanced-tree-default");

        this.appendChild(instance);

        this.registerEvent(this.scroller, "scroll", this.scrolled.bind(this));
    }

    itemsAdded() {
        this.renderer.redrawCurrentPage();
        this.renderer.setScrollMarker();
    }

    itemsDeleted() {
        this.renderer.redrawCurrentPage();
        this.renderer.setScrollMarker();
    }

    itemsUpdated() {
        this.renderer.redrawCurrentPage();
        this.renderer.setScrollMarker();
    }

    readyCallback(isReady) {
        if (isReady === true && this.isLoaded === true) {
            this.datasource.data({ perspective: this.perspective }).then((items) => {
                this.calculateRunway(items.length);
                this.renderer.renderInitial(items);
            });
        }
    }

    async render() {
        this.performRender((items) => {
            this.renderInitial(items);
        })
    }

    async renderInitial(items) {
        this.calculateRunway(items.length);
        await this.renderer.renderInitial(items);
        this.focusedItem = document.querySelector("[role='group']");
    }

    scrollTo(y) {
        this.scroller.scrollTo(0, y);
        this.renderer.scrollItems(this.scroller.scrollTop, this.scroller.scrollLeft);
    }

    scrolled() {
        //this.header.style.transform = `translateX(${-this.scroller.scrollLeft}px)`;
        this.renderer.scrollItems(this.scroller.scrollTop, this.scroller.scrollLeft);
    }

    /**
     * Expand to specific id
     * @param path - Array of ids to expand
     */
    async expandTo(path, expandLast) {
        return await this.dataStore.expandTo(path, this.typeExpression, expandLast);
    }

    async measureItem() {
        return this.renderer.measureItem();
    }

    initializeTemplates() {
        this.templates = Array.from(this.querySelectorAll("template"));
    }
}

customElements.define("pragma-advanced-tree", PragmaAdvancedTree);