import {createElement, createSvg} from "./../../lib/dom-helper.js";
import {selectionMode} from "./../lib/selection-mode.js";
import {createCheckbox, createExpandedArrow} from "./../lib/virtualization-utils.js";
import {createLoadingIndicator} from "../pragma-advanced-tree/pragma-advanced-tree-utils.js";

export function createRunwayMarker() {
    const div = document.createElement("div");
    div.textContent = ' ';
    div.style.height = '1px';
    div.style.width = '1px';
    div.style.background = "red";
    return div;
}

export function createRowTemplate(container, columns, allowMultipleSelect) {
    const template = document.createElement("template");
    
    const row = createElement("div", ["grid-row"],
        [{name: "tabindex", value: "-1"}], null, "row", [
        {name: "position", value: "absolute"},
        {name: "left", value: 0},
        {name: "top", value: 0},
        {name: "height", value: "2rem"}
    ]);

    row.setAttribute("aria-selected", "#__isSelected || false");

    template.appendChild(row);

    if (allowMultipleSelect === true) {
        const checkboxHeaderColumn = createCheckboxColumn("cell", window.translations.selection.selectRecord, allowMultipleSelect);
        row.appendChild(checkboxHeaderColumn);    
    }

    for (let column of columns) {
        const t = column.getAttribute("type") == "templated" ? "default" : null;
        row.appendChild(column.createRowElement(t));
    }

    return template;
}

export function createGroupTemplate(allowMultipleSelect) {
    //Todo TG - Investigate Aria-selected attribute on group
    const template = document.createElement("template");

    const row = createElement("div", ["grid-row"],
        [{name: "tabindex", value: "-1"}], null, "rowgroup", [
        {name: "position", value: "absolute"},
        {name: "left", value: 0},
        {name: "top", value: 0},
        {name: "right", value: 0},
        {name: "height", value: "2rem"},
        {name: "align-items", value: "center"}
    ]);
    row.setAttribute("aria-expanded", "#__isExpanded || false");
    row.setAttribute("aria-selected", "#__isSelected || false");

    template.appendChild(row);

    const checkboxHeaderColumn = createCheckboxColumn("cell", window.translations.selection.selectGroup, allowMultipleSelect);
    row.appendChild(checkboxHeaderColumn);

    const container = createElement("div", ["aggregate-container"]);
    const title = createElement("div", null, null, "#model.title", null, [{name: "flex", value: 1}]);
    const aggregate = createElement("div", ["default-margin-right"], null, "#model.aggregate.aggregate");
    const aggregateValue = createElement("div", null, null, "#model.aggregate.value");

    row.appendChild(title);
    container.appendChild(aggregate);
    container.appendChild(aggregateValue);
    row.appendChild(container);

    return template
}

export function createCheckboxColumn(columnRole, checkboxAriaLabel, allowMultipleSelect) {
    const checkboxColumn = document.createElement("div");
    checkboxColumn.setAttribute("role", columnRole);
    checkboxColumn.setAttribute("tabindex","-1");

    if (allowMultipleSelect === true) {
        const checkedSvg = createCheckbox(true, checkboxAriaLabel);
        const uncheckedSvg = createCheckbox(false, checkboxAriaLabel);
        checkboxColumn.appendChild(checkedSvg);
        checkboxColumn.appendChild(uncheckedSvg);
    }
    checkboxColumn.appendChild(createExpandedArrow());
    checkboxColumn.appendChild(createLoadingIndicator());
    return checkboxColumn;
}


export function createHeaderCheckboxColumn(columnRole, checkboxAriaLabel) {
    const checkboxColumn = document.createElement("div");
    checkboxColumn.setAttribute("role", columnRole);
    checkboxColumn.setAttribute("tabindex","-1");

    const checkbox = document.createElement("pragma-checkbox");
    checkbox.setAttribute("aria-label", checkboxAriaLabel);
    checkbox.setAttribute("checked", "#__isSelected || false");
    checkboxColumn.appendChild(checkbox);
    return checkboxColumn;
}

