import {ScrollBase} from "../lib/scroll-base.js";

export class Scroll extends ScrollBase {

    async scroll(verticalDirection, horizontalDirection, index, rowIndex) {
        await this[`${verticalDirection + horizontalDirection}`](index, rowIndex);
    }

    horizontalScrollRequired(index, rowIndex) {
        return this.navigation.isIndexInHorizontalView(index, rowIndex) === false;
    }

    // noinspection JSUnusedGlobalSymbols
    async TopLeft(index, rowIndex) {
        await this._scrollFn(index, rowIndex, (index) => {
            return this.navigation.getIndexVerticalPosition(index);
        }, (index, rowIndex) => {
            return this.navigation.getIndexHorizontalPosition(index, rowIndex);
        });
    }

    // noinspection JSUnusedGlobalSymbols
    async TopRight(index, rowIndex) {
        await this._scrollFn(index, rowIndex, (index) => {
            return this.navigation.getIndexVerticalPosition(index);
        }, (index, rowIndex) => {
            return this.navigation.getIndexHorizontalPosition(index, rowIndex) -
                (this.scrollerWidth - this.navigation.getIndexWidth(index, rowIndex));
        });
    }

    // noinspection JSUnusedGlobalSymbols
    async BottomLeft(index, rowIndex) {
        await this._scrollFn(index, rowIndex, (index, scrollerHeight) => {
            const result = (this.navigation.getIndexVerticalPosition(index)) - (scrollerHeight - this.navigation.getIndexHeight(index));
            return result < 0 ? 0 : result;
        }, (index, rowIndex) => {
            return this.navigation.getIndexHorizontalPosition(index, rowIndex);
        });
    }

    // noinspection JSUnusedGlobalSymbols
    async BottomRight(index, rowIndex) {
        await this._scrollFn(index, rowIndex, (index, scrollerHeight) => {
            const result = (this.navigation.getIndexVerticalPosition(index)) - (scrollerHeight - this.navigation.getIndexHeight(index));
            return result < 0 ? 0 : result;
        }, (index, rowIndex) => {
            return this.navigation.getIndexHorizontalPosition(index, rowIndex) -
                (this.scrollerWidth - this.navigation.getIndexWidth(index, rowIndex));
        });
    }

    async _scrollFn(index, rowIndex, scrollTopFn, scrollLeftFn) {
        const renderer = this._instance.renderer;
        if (this.verticalScrollRequired(index)) {
            const scrollTop = scrollTopFn.call(this, index, this.scrollerHeight);
            await renderer.scrollItems(scrollTop, this.scroller.scrollLeft);
            this.updateVirtualScrollBars(scrollTop, this.scroller.scrollLeft);
        }
        if (this.horizontalScrollRequired(index, rowIndex)) {
            const scrollLeft = scrollLeftFn.call(this, index, rowIndex);
            await renderer.scrollItems(this.scroller.scrollTop, scrollLeft);
            this.updateVirtualScrollBars(this.scroller.scrollTop, scrollLeft);
        }
    }
}