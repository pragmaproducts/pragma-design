import {NavigationBase} from "../lib/navigation-base.js";

export class Navigation extends NavigationBase {

    /***
     * Returns the  horizontal row index position in px for the given index and rowindex.
     * Warning the item must be present in the dom for this method to work, ie. not removed and back in the store.
     * @param {number} index
     * @param {number} rowIndex
     * @returns {number}
     */
    getIndexHorizontalPosition(index, rowIndex) {
        const row = this.getRowByIndex(index);
        if (row != null && row.children.length > 0) {
            return Array.from(row.children).slice(0, rowIndex).reduce((a, c) => {
                return a + c.offsetWidth
            }, 0);
        }
        return 0;
    }

    /***
     * Returns the vertical row index position in px for the given index and rowindex.
     * Warning the item must be present in the dom for this method to work, ie. not removed and back in the store.
     * @param {number} index
     * @returns {number}
     */
    getIndexVerticalPosition(index) {
        return index * this.getIndexHeight(index);
    }

    /***
     * @param {number} index
     * @param {number} rowIndex
     * @returns {number}
     */
    getIndexWidth(index, rowIndex) {
        const row = this.getRowByIndex(index);
        if (row != null && row.children.length > 0) {
            return row.children[rowIndex].offsetWidth;
        }
        return 0;
    }

    /***
     * Returns a boolean value indicating whether the index falls within the visible horizontal scroll area.
     * @param {number} index
     * @param {number} rowIndex
     * @returns {boolean}
     */
    isIndexInHorizontalView(index, rowIndex) {
        const rowIndexPosition = this.getIndexHorizontalPosition(index, rowIndex);
        return rowIndexPosition >= this.scroller.scrollLeft &&
            rowIndexPosition < this.scroller.scrollLeft + this.scrollerWidth;
    }

    /***
     * Returns a boolean value indicating whether the index falls within the visible vertical scroll area.
     * @param {number} index
     * @returns {boolean}
     */
    isIndexInVerticalView(index) {
        const indexPosition = this.getIndexVerticalPosition(index);
        return indexPosition >= this.scroller.scrollTop &&
            indexPosition <= this.scroller.scrollTop + (this.scrollerHeight - this.getIndexHeight(index));
    }
}