import {BaseElement} from "../../baremetal/lib/base-element.js";
import {DialogNavigation} from "../lib/dialog-navigation.js";
import {buttonTypes, dialogTypes} from "./pragma-dialogs-constants.js";

export class PragmaDialogs extends BaseElement {

    constructor() {
        super();
        
        this.classList.add("dialog");
        this.classList.add("closed");
        this.setAttribute("aria-hidden", "true");
    }

    connectedCallback() {
        super.connectedCallback();
        const instance = document.importNode(window.templates.get("pragma-dialogs-template"), true);
        this.appendChild(instance);
        this.falseButton = this.querySelector("#btnMessage_false");
        this.trueButton = this.querySelector("#btnMessage_true");
        this.titleHeader = this.querySelector("#dialog-title");
        this.titleIcon = this.querySelector("#dh-icon");
        
        this._dialogNavigation = new DialogNavigation(this, this.dismiss.bind(this), true);
        
        this.registerEvent(this.falseButton, "click", this.reject.bind(this));
        this.registerEvent(this.trueButton, "click", this.accept.bind(this));

        this.showMessageHandler = this.showMessage.bind(this);
        window.eventEmitter.on("show-message", this.showMessageHandler);

        this.buttonLabelMap = new Map([
            [buttonTypes.ok, [window.translations.pragmaDialogs.buttons.ok, null]],
            [buttonTypes.ok_cancel, [window.translations.pragmaDialogs.buttons.ok, window.translations.pragmaDialogs.buttons.cancel]],
            [buttonTypes.accept, [window.translations.pragmaDialogs.buttons.accept, null]],
            [buttonTypes.accept_reject, [window.translations.pragmaDialogs.buttons.accept, window.translations.pragmaDialogs.buttons.reject]],
            [buttonTypes.yes_no, [window.translations.pragmaDialogs.buttons.yes, window.translations.pragmaDialogs.buttons.no]]
        ]);
        
        this.titleMap = new Map([
            [dialogTypes.information, window.translations.dialog.titles.information],
            [dialogTypes.warning, window.translations.dialog.titles.warning],
            [dialogTypes.error, window.translations.dialog.titles.error]
        ]);
        
        this.iconMap = new Map([
            [dialogTypes.information, "information"],
            [dialogTypes.warning, "warning"],
            [dialogTypes.error, "error"]
        ]);
    }

    disconnectedCallback() {
        window.eventEmitter.remove("show-message", this.showMessageHandler);
        
        this.showMessageHandler = null;
        this.falseButton = null;
        this.trueButton = null;
        this.titleHeader = null;
        this.titleIcon = null;
        this.buttonLabelMap = null;
        this.titleMap = null;
        this.iconMap = null;
        this.buttonOptions = null;
        this.callback = null;
        this._dialogNavigation = null;
    }

    accept() {
        this.dismiss(true);
    }

    dismiss(action) {
        this.classList.add("closed");
        this.setAttribute("aria-hidden", "true");
        this._dialogNavigation.focusOpeningElement();
        
        if (this.callback != null) {
            this.callback(action);
        }

        this.buttonOptions = null;
        this.callback = null;
    }

    reject() {
        this.dismiss(false)
    }

    showMessage(options) {
        this.buttonOptions = options.buttons || buttonTypes.ok;
        this.callback = options.callback || null;
        
        const type = options.type || dialogTypes.information;
        this.titleHeader.innerText = this.titleMap.get(type);
        const useElement = this.titleIcon.querySelector("use");
        const iconName = this.iconMap.get(type);
        useElement.setAttribute("xlink:href", `#${iconName}`);
        
        this.updateDisplay(options.message);
        this.classList.remove("closed");
        this.removeAttribute("aria-hidden");
        
        this._dialogNavigation.applyFocus();
    }

    updateDisplay(message) {
        const options = this.buttonLabelMap.get(this.buttonOptions);
        const body = this.querySelector(".message-body");

        body.innerHTML = message;
        this.trueButton.innerHTML = options[0];

        if (options[1] != null) {
            this.falseButton.innerHTML = options[1];
            this.falseButton.setAttribute("aria-hidden", "false");
        }
        else {
            this.falseButton.setAttribute("aria-hidden", "true");
        }
    }
}

customElements.define('pragma-dialogs', PragmaDialogs);