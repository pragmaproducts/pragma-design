import {BaseNavigation} from "./../lib/base-navigation.js";
import {RemoteDatasource} from "./../../lib/remote-datasource.js";
import {BaseElement} from "./../../baremetal/lib/base-element.js";
import {ComponentUiStates} from "./../../lib/component-ui-states.js";
import {findParentOfType} from "../../lib/dom-helper.js";

class Menu extends BaseElement {

    connectedCallback() {
        super.connectedCallback();
        this._initTemplate();
        // noinspection JSIgnoredPromiseFromCall
        this._initList();
        this._navigation = null;
        this._search = this.querySelector("#menu-search");
        this._form = this.querySelector("form");
        this._initializeNavigation();

        this._toggleMenuHandler = this.toggle.bind(this);
        window.eventEmitter.on("toggle-menu", this._toggleMenuHandler);

        // Registering component events
        this.registerEvent(this._form, "keydown", this._keydown.bind(this));
        this.registerEvent(this._search, "change", this._datalistItemChange.bind(this));
        this.registerEvent(this._list, "selectionChanged", this._listSelectionChange.bind(this));
        this.registerEvent(this._list, "connected", this._renderList.bind(this));
        this.registerEvent(this, "click", this._click.bind(this));
    }

    disconnectedCallback() {
        super.disconnectedCallback();

        window.eventEmitter.remove("toggle-menu", this._toggleMenuHandler);
        this._toggleMenuHandler = null;

        this._datalist = null;
        this._items = null;
        this._list = null;
        this._flatList = null;

        if (this.datasource != null) {
            this.datasource.dispose();
        }
        this.datasource = null;
        this._search = null;

        if (this._navigation != null) {
            this._navigation.dispose();
            this._navigation = null;
        }
    }


    /**
     * Returns whether the menu is open or closed.
     * @returns {boolean}
     */
    get isMenuOpen() {
        return this.hidden;
    }

    /**
     * Render the menu after the list has notified us that it is ready.
     * @returns {Promise<void>}
     * @private
     */
    _initList() {
        this._renderListHandler = this._renderList.bind(this);
        if (this._list.ready == null) {
            this._list.readyCallback = this._renderListHandler;
        } else {
            this._renderListHandler();
        }
    }

    /**
     * Callback function for rendering the list when its ready. See _initList fuction.
     * @returns {Promise<void>}
     * @private
     */
    async _renderList() {
        await this._getItems();
        this._buildDataSource();
        this._list.uiState = ComponentUiStates.active;
        this._list.datasource = this.datasource;
        await this.datasource.load();
        this._createDatalist();
    }

    /**
     * Call to initialize the template for the component
     * @private
     */
    _initTemplate() {
        const nav = document.importNode(window.templates.get("pragma-menu-nav-template"), true);
        this.appendChild(nav);
        this._list = this.querySelector("pragma-advanced-list");
    }

    /**
     * Builds the data-source for the tree component based on the menu items
     * @private
     */
    _buildDataSource() {
        this._getDetailsHandler = this._getDetails.bind(this);
        this.dsDefinition = {
            id: 0,
            remote: "menu",
            action: "getMenuCollection",
            hierarchical: true
        };

        this.datasource = new RemoteDatasource({
            definition: this.dsDefinition,
            remoteCallback: this._getDetailsHandler
        });
    }

    /**
     * Creates an empty datalist that will be used with the search input
     * @private
     */
    _createDatalist() {
        this._datalist = document.createElement("datalist");
        this._datalist.id = "menu-datalist";

        if (this._search != null) {
            this._search.setAttribute("list", this._datalist.id);
            this._search.parentElement.appendChild(this._datalist);
        }

        this._addDataListChildren();
    }

    /**
     * Moves focus to the menu button
     * @private
     */
    _focusMenuButton() {
        const menuButton = document.querySelector("#app-bar-button");

        if (menuButton != null) {
            menuButton.focus();
        }
    }

    /**
     * Details callback handler
     * @param definition
     * @param model
     * @param parent
     * @returns {*}
     * @private
     */
    _getDetails(definition, model, parent) {
        return this._items;
    }

    /**
     * Fetches the menu items from the source location
     * @returns {Promise<void>}
     * @private
     */
    async _getItems() {
        const routePath = this.getAttribute("src");
        const result = await fetch(routePath).then(result => result.text());
        this._items = JSON.parse(result);
        this._flatList = [];
        this._createIdsAndCreateFlatStructure(this._items);
    }

    _createIdsAndCreateFlatStructure(items) {
        for (const item of items) {
            const id = this._flatList.length + 1;
            item.id = id;

            if (item.items == null) {
                this._flatList.push({
                    id,
                    name: item.description,
                    screen: item.screen
                });
            } else {
                this._createIdsAndCreateFlatStructure(item.items);
            }
        }
    }

    /**
     * Initializes the keyboard navigation for the component
     * @private
     */
    _initializeNavigation() {
        if (this._navigation == null) {
            this._navigation = new BaseNavigation(this);
        }
    }

    /**
     * Prevent the form from submitting when enter is pressed
     * Finds the first menu item with the menu filter text and
     * finds the matching anchor element and performs a click
     * @param event
     * @private
     */
    _keydown(event) {
        if (event.key === this._navigation.keyCodes.enter) {
            event.preventDefault();

            this._openSearchScreen(this._search.value);
        }
    }

    /**
     * Handles the click event which closes the menu when clicking off the menu.
     * @param event
     * @private
     */
    _click(event) {
        if (findParentOfType(event.target, "nav") == null) {
            this.toggle();
        }
    }

    /**
     * Navigate to the page that was selected on the menu.
     * @param e
     * @private
     */
    _listSelectionChange(e) {
        if (this.hidden === true) return;

        if (e.detail.selectedItems.length > 0) {
            const selectedItem = e.detail.selectedItems[0];

            if (selectedItem != null && selectedItem.screen != null) {
                window.location.href = selectedItem.screen;
                this.toggle();
            }
        }
    }

    /**
     * Selects the appropriate menu item when the datalist value changes.
     * Updates the browser location hash to the selected menu item
     * @private
     */
    _datalistItemChange() {
        this._openSearchScreen(this._search.value);
    }

    /**
     * Updates the datalist with non-expandable items when a menu item is expanded
     * @private
     */
    _addDataListChildren() {
        const fragment = document.createDocumentFragment();

        for (let item of this._flatList) {
                const option = document.createElement("option");
                option.value = item.name;
                option.dataset.screen = item.screen;
                fragment.appendChild(option);
        }
        this._datalist.appendChild(fragment);
    }

    /**
     * Show and hide the menu
     */
    toggle() {
        if (this.hidden === false) {
            if (this._search != null) {
                this._search.value = "";
            }
            this._focusMenuButton();
        }

        window.eventEmitter.postMessage("pr-appbar", {intent: "active", target: "menu", value: this.isMenuOpen});
        
        this.hidden = !this.hidden;
        if (this.hidden === false) this._search.focus();
    }

    /**
     * Sets the selected id on the datasource that came back from the advanced list selection.
     * @param value
     * @private
     */
    _openSearchScreen(value) {
        if (value != null) {
            const dataListArray = Array.from(this._datalist.children);
            const dataListItem = dataListArray.find(o => o.value === value);

            if (dataListItem != null && dataListItem.dataset.screen != null) {
                window.location.href = dataListItem.dataset.screen;
                this.toggle();
            }

            //TODO: Address advanced list drill down and selection issues, to enable below.
            //this.datasource.selectedId = [selectedItem.id];
            //this.datasource.selectionChanged();
        }
    }
}

customElements.define('pr-menu', Menu);