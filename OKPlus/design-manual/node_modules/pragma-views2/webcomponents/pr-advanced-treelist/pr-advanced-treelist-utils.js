import {createElement} from "../../lib/dom-helper.js";
import {createCheckbox, createExpandedArrow} from "../lib/virtualization-utils.js";
import {createLoadingIndicator} from "../pragma-advanced-tree/pragma-advanced-tree-utils.js";


export function createRowTemplates(columns, allowMultiples, expandRef) {
    const result = [];
    
    const templatedColumn = columns.find(item => item.getAttribute("type") === "templated");
    const templates = Array.from(templatedColumn.querySelectorAll("template"));

    for (const template of templates) {
        const type = template.getAttribute("type");
        const condition = template.getAttribute("condition");
        result.push(createRowTemplate(type, columns, condition, allowMultiples, expandRef));
    }
    
    return result;
}

function createRowTemplate(type, columns, condition, allowMultiples, expandRef) {
    const row = createRowElement();

    if (allowMultiples === true) {
        const selectCell = createSelectCell("cell");
        selectCell.appendChild(createCheckbox(false, window.translations.selection.selectRecord));
        selectCell.appendChild(createCheckbox(true, window.translations.selection.selectRecord));
        row.appendChild(selectCell);
    }
    
    for (const column of columns) {
        const t = column.getAttribute("type") == "templated" ? type : null;
        row.appendChild(column.createRowElement(t));
    }

    const treeCell = row.children[1];
    treeCell.insertBefore(createLoadingIndicator(), treeCell.firstChild);

    const treeExpandContainer = createElement("div", ["tree-expand-arrow-container"]);
    treeExpandContainer.appendChild(createExpandedArrow(expandRef));
    treeCell.insertBefore(treeExpandContainer, treeCell.firstChild);

    const template = document.createElement("template");
    template.innerHTML = row.outerHTML;
    
    if (type != null) {
        template.setAttribute("type", type);        
    }
    
    if (condition != null) {
        template.setAttribute("condition", condition)    
    }
    
    return template;
}

function createRowElement() {
    return createElement(
        "div",
        ["grid-row"],
        [
            {
                name: "aria-selected",
                value: "#__isSelected || false"
            },
            {
                name: "tabindex",
                value: "-1"
            }
        ],
        null,
        "row",
        [
            {name: "position", value: "absolute"},
            {name: "left", value: 0},
            {name: "top", value: 0},
            {name: "height", value: "2rem"},
            {name: "tab-index", value: "-1"}
        ]
    );
}

export function createSelectCell(role) {
    const result = createElement("div", null, null, null, role, [{name: "width", value: "48px"}]);
    
    if (role == "cell") {
        result.style.paddingLeft = "0.25rem";
    }
    
    return result;
}