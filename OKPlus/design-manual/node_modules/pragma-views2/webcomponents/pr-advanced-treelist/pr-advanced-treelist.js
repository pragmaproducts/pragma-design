import { AdvancedVisualizationBase } from "./../lib/advanced-visualization-base.js";
import { DataStore } from "./../lib/data-store.js";
import { createElement, findParentWithClass } from "./../../lib/dom-helper.js";
import { SelectionMediator } from "../lib/selection-mediator.js";
import { createRowTemplates, createSelectCell } from "./pr-advanced-treelist-utils.js";
import { CustomTemplateRenderer } from "../lib/render-custom-template.js";
import { addGroups, resizeGroups } from "./../lib/column-group-helper.js";
import { KeyboardHelper } from "./keyboard-helper.js";
import { Navigation } from "./navigation.js";

/**
 * This is the advanced tree list view component
 */
export class AdvancedTreelist extends AdvancedVisualizationBase {
    get templates() {
        return this.getProperty("templates", () => createRowTemplates(this.columns, this.allowMultipleSelect, this.expandRef))
    }

    set templates(newValue) {
        this.setProperty("templates", newValue);
    }

    /**
     * Datastore getter
     * @returns DataStore instance
     */
    get dataStore() {
        return this.getProperty("datastore", () => {
            const dataStoreOptions = {
                selectionChangedCallback: this.selectionChanged.bind(this),
                itemsAddedCallback: this.itemsAdded.bind(this),
                itemsUpdatedCallback: this.itemsUpdated.bind(this),
                itemsDeletedCallback: this.itemsDeleted.bind(this),
                perspective: this.perspective
            };

            return new DataStore(dataStoreOptions);
        });
    }

    /**
     * Datastore setter
     * @param {DataStore} newValue: DataStore instance or null
     */
    set dataStore(newValue) {
        this.setProperty("datastore", newValue);
    }

    /**
     * Datasource getter
     * @returns {DataStore}
     */
    get datasource() {
        return this.getProperty("datasource", () => {
            return super.datasource;
        });
    }

    /**
     * Datasource setter
     * @param newValue: datasource instance or null
     */
    set datasource(newValue) {
        this.performDatasourceValidation(newValue, () => {
            this.setProperty("datasource", newValue, () => {

                const store = this.dataStore;
                store.datasource = newValue;
                store.selectionMediator = this.selectionMediator;
            });
        });
    }

    /**
     * Renderer instance using CustomTemplateRenderer
     * @returns {CustomTemplateRenderer}
     */
    get renderer() {
        return this.getProperty("renderer", () => {
            const formatters = [...this.formatters, ...this.columns];
            super.renderer = new CustomTemplateRenderer(this.container, this.scroller, this.dataStore, formatters, this.selection,
                this.templates, null, this.customFormattingHandler);
            return super.renderer;
        })
    }

    /**
     * Renderer setter
     * @param {CustomTemplateRenderer} newValue: instance of Renderer or null
     */
    set renderer(newValue) {
        super.render = newValue;
        this.setProperty("renderer", newValue);
    }

    /**
     * Columns getter
     * @returns: Array of column elements (pragma-grid-column)
     */
    get columns() {
        return this.getProperty("columns", () => {
            const result = Array.from(this.querySelectorAll("pragma-grid-column"));
            let index = -1;
            for (const column of result) {
                index += 1;
                column.index = index;
            }
            return result;
        }
        )
    }

    /**
     * Columns setter
     * @param newValue: array of column elements (pragma-grid-column) or null
     */
    set columns(newValue) {
        this.setProperty("columns", newValue);
    }

    /**
     * Header getter
     * @returns header element
     */
    get header() {
        return this.getProperty("header", () => this.querySelector("#header"));
    }

    /**
     * Header setter
     * @param newValue: element or null
     */
    set header(newValue) {
        this.setProperty("header", newValue);
    }

    /**
     * Selection mediator setter
     * @returns instance of SelectionMediator
     */
    get selectionMediator() {
        return this.getProperty("selectionMediator", () => new SelectionMediator(this.datasource, this.selectionReference, this.allowMultipleSelect))
    }

    /**
     * Selection mediator setter
     * @param newValue: Instance of SelectionMediator or null
     */
    set selectionMediator(newValue) {
        this.setProperty("selectionMediator", newValue);
    }

    /**
     * Selection reference readonly property
     */
    get selectionReference() {
        return this.getProperty("selectionReference", () => this.getAttribute("selectionRef"));
    }

    /**
     * Allow multiple select readonly property
     */
    get allowMultipleSelect() {
        return this.getProperty("allowMultipleSelect", () => this.getAttribute("selection") !== "single");
    }

    get expandRef() {
        return this.getProperty("expandRef", () => this.getAttribute('expand-ref') || 'expandable');
    }

    set expandRef(newValue) {
        this.setProperty("expandRef", newValue);
    }

    /**
     * @returns {KeyboardHelper}
     */
    get keyboardHelper() {
        return this.getProperty("keyboardHelper", () => {
            return new KeyboardHelper(this);
        });
    }

    set keyboardHelper(value) {
        this.setProperty("keyboardHelper", value);
    }

    /**
     * @returns {Navigation}
     */
    get navigation() {
        return this.getProperty("navigation", () => {
            return new Navigation(this);
        });
    }

    set navigation(value) {
        this.setProperty("navigation", value);
    }


    get formatters() {
        return this.getProperty("formatters", () => Array.from(this.querySelectorAll(":scope > pragma-conditional-formatter")));
    }

    set formatters(newValue) {
        this.setProperty("formatters", newValue);
    }

    /**
     * Connected callback
     */
    connectedCallback() {
        super.connectedCallback();
        this.initTemplate();
        this.registerEvent(this.scroller, "scroll", this.scrolled.bind(this));
        this.registerEvent(this, "dblclick", this.dblClick.bind(this));
        this.registerEvent(this, "focus", this._onFocus.bind(this));
        this.keyboardHelper;

        this.customFormattingHandler = this.customFormatting.bind(this);
    }

    /**
     * DisconnectedCallback
     */
    disconnectedCallback() {
        super.disconnectedCallback();
        this.columns = null;
        this.datasource = null;
        this.datastore = null;
        this.header = null;
        this.scroller = null;
        this.container = null;
        this.formatters = null;
        this.renderer = null;
        this.selectionMediator = null;
        this.customFormattingHandler = null;
        this.keyboardHelper = null;
        this.navigation = null;
    }

    /**
     * Standard component UI initialization
     */
    initTemplate() {
        const instance = document.importNode(window.templates.get("pr-advanced-treelist-template"), true);
        this.appendChild(instance);
    }

    /**
     * Create and add column elements to the header element
     */
    addColumns() {
        const parent = document.createElement("div");

        if (this.allowMultipleSelect == true) {
            const cell = createSelectCell("columnheader");
            cell.appendChild(createElement("pragma-checkbox"));
            parent.appendChild(cell);
        }

        for (const column of this.columns) {
            parent.appendChild(column.createHeaderElement());
        }

        this.header.appendChild(parent);
    }

    /**
     * Clear the visualization from all elements
     */
    clear() {
        if (this.header != null && (this.renderer || {}).container != null) {
            this.header.innerHTML = "";
            this.renderer.container.innerHTML = "";
        }
    }

    getItemDimensions(index) {
        const dataItem = this.dataStore.data[index];
        const template = this.renderer.getItemTemplate(dataItem);
        return template.value.dimensions;
    }

    /**
     * Measure the item templates
     * @returns {Promise<void>}
     */
    async measureItem() {
        await this.renderer.measureItem();
    }

    /**
     * Render the content of the visualization
     * @returns {Promise<void>}
     */
    async render() {
        this.performRender(async (items) => {
            this.calculateRunway(items.length);
            addGroups(this);
            this.addColumns();
            resizeGroups(this);
            await this.renderer.renderInitial(items);
        })
    }

    scrolled() {
        this.header.style.transform = `translateX(${-this.scroller.scrollLeft}px)`;
        this.renderer.scrollItems(this.scroller.scrollTop, this.scroller.scrollLeft);
    }

    selectionChanged(selectedItems) {
        super.selectionChanged(selectedItems, () => {
            this.dispatchEvent(new CustomEvent("selectionChanged", {
                detail: {
                    selectedId: this.selectedId,
                    selectedItems: this.datasource.selectedItems
                }
            }));
        });
    }

    async click(event) {
        const elements = super.click(event);

        const arrowClicked = elements[0].getAttribute("aria-expanded") != null;
        const checkboxClicked = elements[0].dataset.checkbox != null;
        const row = findParentWithClass(elements[0], "grid-row");

        if (row == null) return;

        if (arrowClicked === true) {
            await this.toggleExpand(row);
        } else {
            this.dataStore.toggleSelection(row.__dataIndex, !checkboxClicked);
            this.focus.focus(row);
        }
    }

    async dblClick() {
        const elements = super.click(event);
        const row = findParentWithClass(elements[0], "grid-row");
        if (row == null) return;
        await this.toggleExpand(row);
    }

    async toggleExpand(target) {
        const index = target.__dataIndex;
        const item = this.dataStore.data[index];
        if (item.isBusy === true) return;

        this.dataStore.toggleBusy(index);
        this.renderer.redrawItem(target, item);
        await this.dataStore.toggleExpand(index);

        this.dataStore.toggleBusy(index);
        this.renderer.setItemSizes();
        this.renderer.redrawCurrentPage();
        this.renderer.setScrollMarker();
        this.focus.index = index;
        this.focus.focus();
    }

    async refresh(index) {
        const item = this.dataStore.data[index];
        if (item.isBusy === true) return;
        this.dataStore.toggleBusy(index);
        this.renderer.redrawCurrentPage();
        if (item.__isExpanded === true) {
            await this.dataStore.toggleExpand(index);
        }
        item.items = [];
        await this.dataStore.toggleExpand(index);
        this.dataStore.toggleBusy(index);
        this.renderer.setItemSizes();
        this.renderer.redrawCurrentPage();
        this.renderer.setScrollMarker();
    }

    customFormatting(element, item) {
        element.children[1].style.paddingLeft = `${item.depth}rem`;
    }
}

customElements.define('pr-advanced-treelist', AdvancedTreelist);