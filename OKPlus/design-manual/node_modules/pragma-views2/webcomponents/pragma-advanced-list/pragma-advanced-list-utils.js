import {createElement, createSvg} from "../../lib/dom-helper.js";
import {createCheckbox} from "../lib/virtualization-utils.js";

export function createItemTemplate(template, expandRef, allowMultipleSelect, checkboxAriaLabel) {
    const clonedTemplate = document.importNode(template, true);
    const content = clonedTemplate.content;
   
    const row = createElement("div", null, [{name: "tabindex", value: "-1"}],
        null, null, [
        { name: "position", value: "absolute" },
        { name: "left", value: 0},
        { name: "top", value: 0 },
        { name: "right", value: 0 },
        { name: "align-items", value: "center"}
    ]);

    const container = createElement("div", ["list-item-container"]);

    if(allowMultipleSelect === true) {
        const actionsContainer = createElement("div", ["list-item-actions"]);
        actionsContainer.appendChild(createCheckbox(true, checkboxAriaLabel));
        actionsContainer.appendChild(createCheckbox(false,checkboxAriaLabel));
        row.appendChild(actionsContainer);
    }


    while(content.children.length > 0) {
        container.appendChild(content.children[0]);
    }
    row.setAttribute("role", `#hasChildren === true || item.model != null && item.model.${expandRef} === true ? "group" : "listitem"`);
    row.setAttribute("aria-selected", "#__isSelected || false");
    row.classList.add("listitem");

    content.innerHTML = "";
    row.appendChild(container);
    content.appendChild(row);
    const actionsContainer = createElement("div", ["list-item-actions"]);
    actionsContainer.appendChild(createExpandedChevron(expandRef));
    actionsContainer.appendChild(createLoadingIndicator());
    row.appendChild(actionsContainer);
return clonedTemplate;
}

export function createExpandedChevron(expandRef) {
    const svg = createSvg("rightchevron");
    svg.setAttribute("aria-label", "Expand");
    svg.setAttribute("aria-expanded", "#__isExpanded || false");
    svg.setAttribute("aria-hidden", `#__isBusy == true || (item.constructor.name !== "HierarchicalItem" || item.hasChildren != true) && (item.model == null || item.model.${expandRef} != true)`);
    return svg;
}

export function createLoadingIndicator() {
    const svg = createSvg("loading");
    svg.classList.add("spinner");
    svg.setAttributeNS(null,"viewBox", "0 0 20 20");
    svg.setAttributeNS(null,"aria-hidden", "#__isBusy != true || false");
    return svg;
}
