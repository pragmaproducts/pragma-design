import { CustomTemplateRenderer } from "../lib/render-custom-template.js";
import { AdvancedVisualizationBase } from "../lib/advanced-visualization-base.js";
import { createItemTemplate } from "./pragma-advanced-list-utils.js";
import { SelectionMediator } from "./../lib/selection-mediator.js";
import { TypeSelectionMediator } from "./../lib/type-selection-mediator.js";
import { getValueOnPath } from "../../baremetal/lib/objectpath-helper.js";
import { findParentWithClass } from "./../../lib/dom-helper.js";
import { GroupClickBehaviour } from "./group-click-behaviour.js";
import { KeyboardHelper } from "./keyboard-helper.js";
import { Navigation } from "./navigation.js";
import { ScrollDirection } from "../lib/scroll-direction.js";

export class PragmaAdvancedList extends AdvancedVisualizationBase {
    connectedCallback() {
        super.connectedCallback();

        this.initTemplate();

        this.registerEvent(this, "dblclick", this.dblClick.bind(this));

        this.dataStoreHistory = [];
        this.headerElement = this.querySelector("#pal-header");
        this.headerTitleElement = this.querySelector("#title");
        this.bodyElement = this.querySelector("#pal-body");

        this.allowMultipleSelect = this.getAttribute("selection") !== "single";
        this.typeExpression = this.getAttribute("type-ref");
        this.expandRef = this.getAttribute('expand-ref') || 'expandable';
        this.titleRef = this.getAttribute("title-ref") || "model.title";

        this.setHeader();
        this.setAttribute("tabIndex", "0");

        if (this._groupClickBehaviour == null) {
            this._groupClickBehaviour = this.getAttribute("group-click-behaviour") || GroupClickBehaviour.select;
        }

        this.ready = true;
    }

    disconnectedCallback() {
        this.body = null;
        this.scroller = null;
        this.renderer.scrollCompletedCallback = null;
        this.renderer.dispose();
        this.renderer = null;
        this.dataStoreHistory = null;
        this.headerElement = null;
        this.headerTitleElement = null;
        this.templates = null;
        this.formatters = null;
        this.expandRef = null;
        this.keyboardHelper = null;
        this.navigation = null;
        this.scroll = null;
        this.focus = null;

        super.disconnectedCallback();
    }

    get datasource() {
        return this.getProperty("datasource", () => {
            return super.datasource;
        });
    }

    set datasource(newValue) {
        this.performDatasourceValidation(newValue, () => {
            let listTemplates = [];
            for (const template of this.templates) {
                listTemplates.push(createItemTemplate(template, this.expandRef, this.allowMultipleSelect, window.translations.selection.selectRecord));
            }

            listTemplates.push(createItemTemplate(this.defaultTemplate, this.expandRef, this.allowMultipleSelect, window.translations.selection.selectRecord));
            listTemplates.push(createItemTemplate(this.defaultGroupTemplate, this.expandRef, this.allowMultipleSelect, window.translations.selection.selectRecord));

            this.renderer = new CustomTemplateRenderer(this.container, this.scroller, this.dataStore, this.formatters, this.selection, listTemplates);
            this.dataStore.selectionMediator = this.typeExpression != null
                ? new TypeSelectionMediator(this.datasource, this.selectionReference, this.allowMultipleSelect, this.typeExpression)
                : new SelectionMediator(this.datasource, this.selectionReference, this.allowMultipleSelect, this.expandRef);
        });
    }

    get perspective() {
        return this._perspective || this.getAttribute("perspective");
    }

    set perspective(newValue) {
        this._perspective = newValue;
    }

    /**
     * @returns {KeyboardHelper}
     */
    get keyboardHelper() {
        return this.getProperty("keyboardHelper", () => {
            return new KeyboardHelper(this);
        });
    }

    set keyboardHelper(value) {
        this.setProperty("keyboardHelper", value);
    }

    /**
     * @returns {Navigation}
     */
    get navigation() {
        return this.getProperty("navigation", () => {
            return new Navigation(this);
        });
    }

    set navigation(value) {
        this.setProperty("navigation", value);
    }

    calculateRunway(numberOfItems) {
        if (this.renderer.dimentions == null) return;

        const top = numberOfItems * this.renderer.dimentions.height;
        this.scrollMarker.style.transform = `translate(${this.renderer.dimentions.width}px, ${top}px)`;
    }

    clear() {
        this.dataStoreHistory = [];
        this.parentItem = null;
        this.setHeader();
        this.emptyList();
    }

    emptyList() {
        if ((this.renderer || {}).container != null) {
            this.renderer.container.innerHTML = "";
        }
    }

    async click(event) {
        if (event.target.id === "back") {
            return this.drillUp();
        }
        const elements = super.click(event);
        const item = findParentWithClass(elements[0], "listitem");

        if (item == null) {
            return;
        }
        let isGroup = item.getAttribute("role") === "group";
        const arrowClicked = elements[0].hasAttribute("aria-expanded");
        const checkbox = elements.find(item => item.getAttribute("role") === "checkbox");
        const checkboxClicked = checkbox != null;

        let target;
        if (isGroup === false) {
            target = item;
        } else {
            const rowgroups = elements.filter(item => item.getAttribute("role") === "group");
            target = rowgroups[0];
        }
        if (target != null) {

            if (arrowClicked === true || (isGroup === true && this._groupClickBehaviour === GroupClickBehaviour.expand)) {
                await this.drillDown(this.dataStore.data[target.__dataIndex]);
                this.focus.index = 0;
                this.focus.focus();
            }
            else {
                this.handleSelection(target.__dataIndex, checkboxClicked, this.dataStore.data[target.__dataIndex]);
                this.focus.focus(item);
            }
        }
    }

    handleSelection(dataIndex, checkboxClicked) {
        this.dataStore.toggleSelection(dataIndex, !checkboxClicked);
    }

    async dblClick(event) {
        this.renderer.scroller.style.pointerEvents = "none";
        const elements = document.elementsFromPoint(event.pageX, event.pageY);
        const item = findParentWithClass(elements[0], "listitem");

        if (item == null) {
            this.renderer.scroller.style.pointerEvents = "auto";
            return;
        }
        let isGroup = item.getAttribute("role") === "group";

        if (isGroup === true) {
            await this.drillDown(this.dataStore.data[item.__dataIndex]);
            this.renderer.redrawCurrentPage();
            this.focus.index = 0;
            this.focus.focus();
        }
        this.renderer.scroller.style.pointerEvents = "auto";
    }

    initTemplate() {
        const instance = document.importNode(window.templates.get("pragma-advanced-list"), true);

        this.defaultTemplate = instance.querySelector("#pragma-advanced-list-default");
        this.defaultGroupTemplate = instance.querySelector("#pragma-advanced-list-group-default");

        this.appendChild(instance);

        this.registerEvent(this.scroller, "scroll", this.scrolled.bind(this));
    }

    itemsAdded({ items, perspectives }) {
        this.renderer.setItemSizes();
        super.itemsAdded({ items, perspectives })
    }

    itemsDeleted({ items, perspectives }) {
        this.renderer.setItemSizes();
        super.itemsDeleted({ items, perspectives })
    }

    async measureItem() {
        return this.renderer.measureItem();
    }

    async drillDown(parentItem) {
        this.emptyList();
        this.dataStoreHistory.push({
            parent: this.parentItem,
            data: this.dataStore.data
        });
        this.parentItem = parentItem;
        await this.dataStore.loadChildren(parentItem);
        this.dataStore.data = parentItem.items;
        this.navigate(parentItem.items);
        this.scrollAndFocus(ScrollDirection.Top, ScrollDirection.Left, 0);
    }

    drillUp() {
        if (this.dataStoreHistory.length === 0) return;
        const previousParent = this.parentItem;
        this.emptyList();
        const historyItem = this.dataStoreHistory.pop();
        this.dataStore.data = historyItem.data;
        this.parentItem = historyItem.parent;
        this.navigate(historyItem.data);
        this.focus.index = this.dataStore.data.indexOf(previousParent);
        this.scrollAndFocus(ScrollDirection.Top, ScrollDirection.Left);
    }

    setHeader() {
        if (this.parentItem == null) {
            this.headerElement.setAttribute("aria-hidden", true);
            this.bodyElement.classList.add("full");
        }
        else {
            this.headerElement.setAttribute("aria-hidden", false);
            this.bodyElement.classList.remove("full");
            this.headerTitleElement.innerHTML = getValueOnPath(this.parentItem, this.titleRef);
        }
    }

    navigate(items) {
        this.setHeader();
        this.dataStore.selectionMediator.visibleSelectionChanged(items);
        this.renderer.render();
    }

    getItemDimensions(index) {
        const dataItem = this.dataStore.data[index];
        const template = this.renderer.getItemTemplate(dataItem);
        return template.value.dimensions;
    }

    async toggleExpand(target) {
        const dataItem = this.dataStore.data[target.__dataIndex];
        await this.drillDown(dataItem);
        this.renderer.redrawCurrentPage();
    }

    async render() {
        this.performRender(async (items) => {
            this.calculateRunway(items.length);
            await this.renderer.renderInitial(items);
            this.focusedItem = document.querySelector("[role='listitem']");
        })
    }

    scrollTo(y) {
        this.scroller.scrollTo(0, y);
        this.renderer.scrollItems(this.scroller.scrollTop, this.scroller.scrollLeft);
    }

    async scrolled() {
        await this.renderer.scrollItems(this.scroller.scrollTop, this.scroller.scrollLeft);
    }

    selectionChanged(selectedItems) {
        super.selectionChanged(selectedItems, () => {
            this.dispatchEvent(new CustomEvent("selectionChanged", {
                detail: {
                    selectedId: this.selectedId,
                    selectedItems: this.datasource.selectedItems
                }
            }));
        });
    }
}

customElements.define("pragma-advanced-list", PragmaAdvancedList);