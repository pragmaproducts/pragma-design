import {BaseElement} from "./../../baremetal/lib/base-element.js";
import {setElementAbsolute, getElementIndex} from "./../../lib/dom-helper.js";

export class CellEditing extends BaseElement {
    connectedCallback() {
        super.connectedCallback();
        this.registerEvent(this.parentElement, "dblclick", this.performDblClick.bind(this));
    }

    disconnectedCallback() {
        super.disconnectedCallback();
    }

    perforrmKeyUp(event) {
        console.log(event);
    }

    async performDblClick(event) {
        const element = await this.getCellAt(event.clientX, event.clientY);
        this.createInputAt(element);
    }
    
    async getCellAt(x, y) {
        return new Promise(resolve => {
            const pointerEvents = this.parentElement.scroller.style.pointerEvents;
            this.parentElement.scroller.style.pointerEvents = "none";

            requestAnimationFrame(() => {
                const element = document.elementFromPoint(x, y);
                this.parentElement.scroller.style.pointerEvents = pointerEvents;
                resolve(element);
            })
        })
    }
    
    async getBoundingRect(element) {
        return new Promise(resolve => requestAnimationFrame(() => resolve(element.getBoundingClientRect())));
    }
    
    createInputAt(element) {
        if (element.getAttribute("role") != "cell") return;
        
        const columnIndex = getElementIndex(element);
        const column = this.parentElement.columns[columnIndex];
        console.log(column);
    }
    
    // createInputAt(element) {
    //     if (element.getAttribute("role") != "cell") return;
    //    
    //     this.getBoundingRect(element)
    //         .then(rect => {
    //             const input = document.createElement("input");
    //             setElementAbsolute(input, rect);
    //             input.value = element.innerText;
    //             document.body.appendChild(input);
    //             input.focus();
    //             input.select();
    //
    //             const fn = (grid) => {
    //                 const value = input.value;
    //                 const columnIndex = getElementIndex(element);
    //                 const column = grid.columns[columnIndex - 1];
    //                 const fieldName = column.field.split("model.").join("");
    //                 const rowId = element.parentElement.__dataIndex;
    //
    //                 if (grid.datasource.updateRecord(rowId, fieldName, value) == true) {
    //                     element.innerText = input.value;
    //                     grid.focus();
    //                 }
    //
    //                 document.body.removeChild(input);
    //                 input.onblur = null;
    //                 input.onkeyup = null;
    //             }
    //
    //             input.onblur = () => fn(this.parentElement);
    //             input.onkeyup = (event) => {
    //                 if (event.code == "Enter") fn(this.parentElement);
    //             }
    //         })
    // }
}

customElements.define('pr-cell-editing', CellEditing);