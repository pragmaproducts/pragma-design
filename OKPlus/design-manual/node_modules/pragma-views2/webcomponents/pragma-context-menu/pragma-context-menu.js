import {BaseElement} from "./../../baremetal/lib/base-element.js";
import {ResourceDataSource} from "./../../lib/resource-datasource.js";
import {isMobile} from "./../../lib/device-helper.js";
import {findParentOfType, getEventPosition, getElementPositionFromPoint} from "./../../lib/dom-helper.js";
import {TouchEvents} from "./../lib/touch-events.js";
import {ComponentUiStates} from "../../lib/component-ui-states.js";

export class PragmaContextMenu extends BaseElement {
    async connectedCallback() {
        super.connectedCallback();
        
        this.initTemplate();
        
        this.setAttribute("role", "menu");
        this.setAttribute("aria-hidden", "true");
        
        this._clickHandler = this._click.bind(this);
        this._registerContextMenuHandler = this._registerContextMenu.bind(this);
        window.eventEmitter.on("register-context-menu", this._registerContextMenuHandler);
        this._performShowHandler = this._performShow.bind(this);
        window.eventEmitter.on("show-context-menu", this._performShowHandler);
        this._unregisterContextMenuHandler = this._unregisterContextMenu.bind(this);
        window.eventEmitter.on("unregister-context-menu", this._unregisterContextMenuHandler);
        
        this.registerEvent(this, "keyup", this._keyUp.bind(this));
    }

    disconnectedCallback() {
        super.disconnectedCallback();
        
        window.eventEmitter.remove("register-context-menu", this._registerContextMenuHandler);
        this._registerContextMenuHandler = null;
        window.eventEmitter.remove("show-context-menu", this._performShowHandler);
        this._performShowHandler = null;
        window.eventEmitter.remove("unregister-context-menu", this._unregisterContextMenuHandler);
        this._unregisterContextMenuHandler = null;
        window.removeEventListener("click", this._clickHandler);
        this._clickHandler = null;
        this.panelList = null;
        this._callback = null;
        this._titleElement = null;
        this.position = null;
        
        if (this.datasource != null) {
            this.datasource.dispose();
            this.datasource = null;
        }
        
        if (this.touchEvents != null) {
            this.touchEvents.dispose();
            this.touchEvents = null;
        }
    }

    get title() {
        return this._titleElement.innerHTML;
    }
    
    set title(value) {
        if (value !== this._titleElement.innerHTML) {
            this._titleElement.innerHTML = value;
        }
    }
    
    /**
     * Click event handler
     * @param event
     * @private
     */
    async _click(event) {
        const eventPosition = getEventPosition(event);
        if ((this.position.x !== eventPosition.x && this.position.y !== eventPosition.y) && findParentOfType(event.target, "pragma-context-menu") == null) {
            await this.close();
        }
    }

    /**
     * selection handler for menu list
     * @param dataIndex
     * @param checkboxClicked
     * @param item
     * @private
     */
    async _handleSelection(dataIndex, checkboxClicked, item) {
        if (item.hasChildren === true) return;
        
        this._callback(item.model);
        await this.close();
    }

    /**
     * Initialise data source
     * @param options
     * @returns {Promise<void>}
     * @private
     */
    async _initialiseDataSource(options) {
        if (options.datasource != null) {
            this.datasource = options.datasource;
        }
        else{
            this.clearDatasourceOnClose = true;
            const options = {
                schema: {},
                definition: {
                    id: 0,
                    resource: options.menuItems,
                    hierarchical: true
                },
            };
            this.datasource = await new ResourceDataSource(options).load();
        }
    }

    /**
     * Key up event handler
     * @param event
     * @private
     */
    async _keyUp(event) {
        if (event.key !== "Escape") return;
        await this.close();
    }
    
    /**
     * Perform render of context menu
     * @param options - object containing callback and menuItems (type: hierarchicalItems)
     * @private
     */
    async _performShow(options) {
        if ((options.menuItems == null && options.datasource == null) || options.callback == null) {
            await this.close();
            return;
        }

        if (options.event.cancelable === true) {
            options.event.preventDefault();
        }

        await this._disposeDatasource();

        if (options.title != null) {
            this.title = options.title;
        }

        
        this._callback = options.callback;

        if (options.templates != null) {
            this.panelList.list.templates.length = 0;
            for (const template of options.templates) {
                this.panelList.list.templates.push(template);
            }
        }

        await this._initialiseDataSource(options);

        this.setAttribute("aria-hidden", "false");
        this._positionMenu(options.event);
        this.panelList.datasource = this.datasource;
        this.panelList.list.uiState = ComponentUiStates.active;
        this.panelList.querySelector("#ppl-filter").focus();

        window.addEventListener("click", this._clickHandler);
    }
    
    /**
     * Positions the menu in relation to click point and within bounds of the window
     * @param event - event object
     */
    _positionMenu(event) {
        if (isMobile() === true) {
            this.style.transform = "translate(0px, 0px)";
        }
        else {
            const clickPosition = getEventPosition(event);
            this.position = getElementPositionFromPoint(this, clickPosition);
            this.style.transform = `translate(${this.position.x}px, ${this.position.y}px)`;
        }
    }

    /**
     * Register context menu events with event handler for specified element
     * @param options
     * @private
     */
    _registerContextMenu(options) {
        if (options.element == null || options.eventHandler == null) return;
        
        if (isMobile() === true) {
            this.touchEvents = new TouchEvents(options.element, { longPress: options.eventHandler });
        }
        else {
            this.registerEvent(options.element, "contextmenu", options.eventHandler);
        }
    }

    /**
     * Unregister context menu events for specified element
     * @param options
     * @private
     */
    _unregisterContextMenu(options) {
        if (options.element == null) return;

        if (this.touchEvents != null) {
            this.touchEvents.dispose();
            this.touchEvents = null;
        }

        this.unregisterEvent(options.element, "contextmenu");
    }

    /**
     * Close context menu by setting relevant aria attribute, clearing list and disposing data source
     */
    async close() {
        window.removeEventListener("click", this._clickHandler);
        this.setAttribute("aria-hidden", "true");
        this.panelList.list.uiState = ComponentUiStates.suspended;

        this.panelList.list.clear();
        this.title = window.translations.contextMenu.labels.defaultTitle;

        await this._disposeDatasource();
    }

    async _disposeDatasource() {
        if (this.datasource != null) {
            await this.panelList.filter.clearFilter();
            if (this.clearDatasourceOnClose === true) {
                this.datasource.dispose();
                this.datasource = null;
            } else {
                this.panelList.datasource = null;
                delete this.datasource;
            }
        }
    }
    
    /**
     * Initialise template
     */
    initTemplate() {
        const instance = document.importNode(window.templates.get("pragma-context-menu-template"), true);
        
        this._titleElement = instance.querySelector("#pcm-header-title");
        this.title = window.translations.contextMenu.labels.defaultTitle;

        const closeContextMenuButton = instance.querySelector("#btnCloseContextMenu");
        closeContextMenuButton.ariaLabel = window.translations.contextMenu.labels.close;
        this.registerEvent(closeContextMenuButton, "click", this.close.bind(this));
        
        this.appendChild(instance);
    }

    /**
     * panelList property change event handler
     */
    panelListChanged() {
        this.panelList.selectionHandler = this._handleSelection.bind(this);
    }
}

customElements.define("pragma-context-menu", PragmaContextMenu);