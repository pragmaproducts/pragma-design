import {BaseElement} from "../../baremetal/lib/base-element.js";
import {isMobile} from "../../lib/device-helper.js";

export class PragmaAssistant extends BaseElement {

    constructor() {
        super();
        this.isOpen = true;
    }

    connectedCallback() {
        super.connectedCallback();
        this.initTemplate();
        
        this.changeAssistantContentHandler = this.changeAssistantContent.bind(this);
        this.showAssistHandler = this.showAssist.bind(this);
        this.clearAssistHandler = this.clearAssist.bind(this);
        this.toggleAssistHandler = this.toggleAssist.bind(this);
        this.hideAssistHandler = this.close.bind(this);
        
        const closeButton = this.querySelector("#assistantClose");
        this.registerEvent(closeButton, "click", this.close.bind(this)); 
        
        const createButton = this.querySelector("#assistantCreate");
        this.registerEvent(createButton, "click", this.emitCreate.bind(this));

        window.eventEmitter.on("assistant", this.changeAssistantContentHandler);
        window.eventEmitter.on("show-assistant", this.showAssistHandler);
        window.eventEmitter.on("hide-assistant", this.hideAssistHandler);
        window.eventEmitter.on("toggle-assistant", this.toggleAssistHandler);
        window.eventEmitter.on("clear-assistant", this.clearAssistHandler);

        this.close();
        this._setAssistButtonLabel(false);
    }

    disconnectedCallback() {
        window.eventEmitter.remove("assistant", this.changeAssistantContentHandler);
        window.eventEmitter.remove("show-assistant", this.showAssistHandler);
        window.eventEmitter.remove("clear-assistant", this.clearAssistHandler);
        window.eventEmitter.remove("hide-assistant", this.hideAssistHandler);
        window.eventEmitter.remove("toggle-assistant", this.toggleAssistHandler);

        this.clearAssist();
        this.pragmaForm = null;

        this.changeAssistantContentHandler = null;
        this.showAssistHandler = null;
        this.clearAssistHandler = null;
        this.hideAssistHandler = null;
        this.toggleAssistHandler = null;
    }

    initTemplate() {
        const instance = document.importNode(window.templates.get("pragma-assistant-template"), true);
        this.appendChild(instance);
        this.querySelector("#assistantCreate").innerText = window.translations.assist.globalFeaturesTitle;
        this.pragmaForm = this.querySelector("pragma-form");
    }
    
    changeState(isOpen) {
        if (isOpen === true) {
            this.isOpen = true;
            this.removeAttribute("aria-hidden");
            
            // Note (AA): Same applies here as for the menu <-- bastard!!!!
            setTimeout(() => {
                this.classList.remove("close");
                const assistantWrapper = this.querySelector(".assistant-wrapper");
                assistantWrapper.addEventListener("transitionend", () => {
                    this.dispatchToggle();
                }, {once: true});
            }, 10);
        }
        else {
            this.isOpen = false;
            this.classList.add("close");
            this.setAttribute("aria-hidden", "true");
            this.dispatchToggle();
            this._focusAssistButton();
        }
        
        this._setAssistButtonLabel(isOpen);
        window.eventEmitter.postMessage("pr-appbar", {intent: "active", target: "assist", value: isOpen});
    }

    dispatchToggle() {
        window.eventEmitter.emit("assistant-toggled", {isOpen: this.isOpen});
    }

    close() {
        this.changeState(false);
    }

    emitCreate() {
        window.eventEmitter.emit("assistant-create", 
            {
               schema: this.pragmaForm.schema,
               model: this.pragmaForm.model,
               context: this.pragmaForm.context
            });
    }

    changeAssistantContent(options) {
        if (this.pragmaForm != null) {
            if (options.viewModel != null) {
                this.pragmaForm.context = options.viewModel;
                this.pragmaForm.model = options.viewModel.model;
            }

            if (options.schema != null) {
                this.pragmaForm.schema = options.schema;
            }
        }
    }

    showAssist() {
        this.changeState(true);
    }

    toggleAssist() {
        this.changeState(!this.isOpen);
    }

    clearAssist() {
        delete this.pragmaForm.model;
        delete this.pragmaForm.context;
        this.pragmaForm.schema = null;
        delete this.pragmaForm.schema;
    }

    performAction(args) {
        if (context != null && context.performAction != null) {
            context.performAction(args);
        }
    }

    
    // noinspection JSMethodCanBeStatic
    /**
     * Sets the aria-label attribute of the assist button
     * @param isOpen
     * @private
     */
    _setAssistButtonLabel(isOpen) {
        const button = document.querySelector("#assistant-button");
        
        if (button != null) {
            const state = isOpen === true ? "Close Onkey assist" : "Open Onkey assist";
            button.classList.toggle("is-open");
            button.setAttribute("aria-label", state);
        } 
    }

    /**
     * Moves focus to the assist button
     * @private
     */
    _focusAssistButton() {
        const assistButton = document.querySelector("#assistant-button");

        if(assistButton != null) {
            assistButton.focus();
        }
    }
}

customElements.define('pragma-assistant', PragmaAssistant);