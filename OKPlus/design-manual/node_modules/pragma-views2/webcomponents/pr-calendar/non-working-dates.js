import {BaseElement} from "../../baremetal/lib/base-element.js";
import {findParentWithClass} from "../../lib/dom-helper.js";

export class NonWorkingDates extends BaseElement {

    connectedCallback() {
        super.connectedCallback();
        this._initTemplate();
        this.registerEvent(this.calendarInstance, "click", this._click.bind(this));
        this.registerEvent(this.calendarInstance, "monthChanged", this.render.bind(this));
        this.registerEvent(window, "keydown", this._key.bind(this));
    }

    disconnectedCallback() {
        super.disconnectedCallback();
        for (const key of Object.keys(this)) {
            this[key] = null;
        }
    }

    get calendarInstance() {
        return this.parentElement;
    }

    get dates() {
        return this._dates;
    }

    set dates(values) {
        if (values != null) {
            this.setAttribute("dates", values);
            this._dates = values;
            this.render();
        }
    }

    _cleanUp() {
        if (this.calendarInstance.detailsContainer != null) {
            const elements = Array.from(
                this.calendarInstance.detailsContainer.querySelectorAll(".non-working-date"));
            while (elements.length > 0) {
                const element = elements.pop();
                const parent = element.parentElement;
                parent.removeChild(element);
            }
        }
    }

    _click(event) {
        const clickedElement = event.target;
        if (clickedElement != null) {
            const element = findParentWithClass(clickedElement, "day-container");
            if (element != null) {
                const hasNonWokingDay = element.querySelector(".non-working-date") != null;
                if (hasNonWokingDay === true) {
                    event.stopPropagation();
                    event.stopImmediatePropagation();
                    this.calendarInstance.viewDate = new Date(element.dataset.value);
                }
            }
        }
    }

    _initTemplate() {
        let nonWorkingDatesTemplate = this.querySelector("[for=non-working-dates]");
        nonWorkingDatesTemplate = nonWorkingDatesTemplate == null ? null : nonWorkingDatesTemplate.content;
        nonWorkingDatesTemplate = nonWorkingDatesTemplate || document.importNode(window.templates.get("non-working-dates"), true);
        this._nonWorkingDatesTemplate = nonWorkingDatesTemplate.children;
    }

    _key(event) {
        if (event.keyCode === 13 || event.keyCode === 32) {
            const keyElement = event.target;
            if (keyElement != null) {
                const element = findParentWithClass(keyElement, "day-container");
                if (element != null) {
                    const hasNonWokingDay = element.querySelector(".non-working-date") != null;
                    if (hasNonWokingDay === true) {
                        event.stopPropagation();
                        event.stopImmediatePropagation();
                    }
                }
            }
        }
    }

    render() {
        this._cleanUp();
        if (this.calendarInstance.getDayContainersForDates == null) {
            return;
        }
        const elementObjects = this.calendarInstance.getDayContainersForDates(this.dates);
        if (elementObjects == null) {
            return;
        }
        for (const elementObject of elementObjects) {
            const model = elementObject.model;

            if (model != null) {
                const element = elementObject.element;

                for (const templateChild of this._nonWorkingDatesTemplate) {
                    const newElement = templateChild.cloneNode(true);
                    newElement.classList.add("non-working-date");
                    newElement.setAttribute("aria-label", "Disabled");
                    element.appendChild(newElement);
                }
            }
        }
    }
}

customElements.define('non-working-dates', NonWorkingDates);