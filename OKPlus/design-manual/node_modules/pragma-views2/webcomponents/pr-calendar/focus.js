import {findParentWithClass} from "../../lib/dom-helper.js";
import {dateHelpers} from "../../lib/date-helpers.js";

export class Focus {

    constructor(calendar) {
        this._calendar = calendar;
        this._calendar.registerEvent(this._calendar, "focusin", this._focus.bind(this));
        this._initTemplate();
    }

    get focusedDate() {
        return this._focusedDate;
    }

    set focusedDate(newValue) {
        const previous = this.focusedDate;

        if (dateHelpers.sameDay(previous,newValue) === false) {
            this._focusedDate = newValue;
            this.render();
        }
    }

    _cleanUp() {
        const elements = Array.from(
            this._calendar.detailsContainer.querySelectorAll(".focused-date"));

        while (elements.length > 0) {
            const element = elements.pop();
            element.classList.remove("focused-date");
            const parent = element.parentElement;
            parent.classList.remove("focused-container");
            parent.removeChild(element);
        }
    }

    /**
     * Focus event handler
     * @param {Event} event
     * @private
     */
    _focus(event) {
        const focusedElement = event.target;

        if (focusedElement != null) {
            const element = findParentWithClass(focusedElement, "day-container");
            if (element != null) {
                this.focusedDate = new Date(element.dataset.value);
            }
        }
    }

    _initTemplate() {
        this._focusTemplate = document.importNode(window.templates.get("focus"), true).children;
    }

    render() {
        this._cleanUp();
        const elementObjects = this._calendar.getDayContainersForDates([this.focusedDate]);

        for (const elementObject of elementObjects) {
            const model = elementObject.model;

            if (model != null) {
                const element = elementObject.element;

                for (const templateChild of this._focusTemplate) {
                    const newElement = templateChild.cloneNode(true);
                    newElement.classList.add("focused-date");
                    element.appendChild(newElement);
                    element.classList.add("focused-container");
                }
            }
        }
    }
}