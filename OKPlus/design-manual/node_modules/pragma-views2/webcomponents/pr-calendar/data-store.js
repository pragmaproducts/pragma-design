import {Day} from "./day.js";
import {sameMonth} from "../../lib/date-helpers.js";

export class DataStore {

    set viewDate(newViewDate) {
        let previousViewDate = this.viewDate;
        this._viewDate = newViewDate;

        if (previousViewDate == null) {
            this._initializeDataStore();
            this._calendarInstance.renderer.render();
            return;
        }

        if (!sameMonth(previousViewDate, newViewDate)) {
            this._initializeDataStore();
            this._calendarInstance.renderer.renderDays(Array.from(this.days.values()));
        }
    }

    get viewDate() {
        return this._viewDate;
    }

    get days() {
        return this._days;
    }

    get monthNames() {
        return this._monthNames;
    }

    get dayNames() {
        return this._dayNames;
    }

    constructor(calendarInstance) {
        this._days = new Map();
        this._propertyChanges = [];
        this._monthNames = ["January", "February", "March", "April", "May",
            "June", "July", "August", "September", "October", "November", "December"];
        this._dayNames = ["SU", "MO", "TU", "WE", "TH", "FR", "SA"];
        this._calendarInstance = calendarInstance;
    }

    getDataModelsForDates(dates) {
        let returnValues = [];

        if (dates == null) {
            return null;
        }

        for (let date of dates) {
            if (date != null) {
                let dateIndex = `${date.getFullYear()}${date.getMonth()}${date.getDate()}`;
                let dateModel = this.days.get(dateIndex);

                if (dateModel != null) {
                    returnValues.push(dateModel);
                }
            }
        }

        return returnValues;
    }

    _addDay(date, isBufferDay) {

        const indexDate = `${date.getFullYear()}${date.getMonth()}${date.getDate()}`;
        const dayModel = new Day(
            this._days.size + 1,
            date,
            isBufferDay
        );
        this._days.set(indexDate, dayModel);
    }

    /**
     * Create the data store.
     * @private
     */
    _initializeDataStore() {
        this._days.clear();
        this._propertyChanges.length = 0;
        const modelDate = new Date(+this.viewDate);

        modelDate.setDate(1);
        let startDayOffset = modelDate.getDay();
        let currentMonth = modelDate.getMonth();

        if (startDayOffset > 0) {
            modelDate.setDate(modelDate.getDate() - startDayOffset);
            currentMonth = modelDate.getMonth();

            while (modelDate.getMonth() === currentMonth) {
                this._addDay(new Date(+modelDate), true);
                modelDate.setDate(modelDate.getDate() + 1);
            }
        }

        currentMonth = modelDate.getMonth();

        while (modelDate.getMonth() === currentMonth) {
            this._addDay(new Date(+modelDate), false);
            modelDate.setDate(modelDate.getDate() + 1);
        }

        while (this.days.size < 42) {
            this._addDay(new Date(+modelDate), true);
            modelDate.setDate(modelDate.getDate() + 1);
        }
    }
}