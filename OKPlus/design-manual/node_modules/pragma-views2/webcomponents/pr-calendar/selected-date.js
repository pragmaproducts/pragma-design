import {BaseElement} from "../../baremetal/lib/base-element.js";
import {findParentWithClass} from "../../lib/dom-helper.js";
import {sameDay} from "../../lib/date-helpers.js";

export class SelectedDate extends BaseElement {

    connectedCallback() {
        super.connectedCallback();
        let initialSelectedDate = this.getAttribute("date");
        initialSelectedDate = this._stringToDate(initialSelectedDate);
        this._initTemplate();
        this.registerEvent(this.calendarInstance, "click", this._click.bind(this));
        this.registerEvent(this.calendarInstance, "monthChanged", this.render.bind(this));
        this.registerEvent(window, "keydown", this._key.bind(this));
        if (initialSelectedDate != null) {
            this.date = initialSelectedDate;
        }
    }

    disconnectedCallback() {
        super.disconnectedCallback();
        for (const key of Object.keys(this)) {
            this[key] = null;
        }
    }

    get calendarInstance() {
        return this.parentElement;
    }

    /**
     * Gets the currently selected date.
     * @returns {Date}
     */
    get date() {
        return this._date;
    }

    /**
     * Sets the selected date.
     * @param {Date} newValue
     */
    set date(newValue) {
        const previous = this.date;
        if (previous !== newValue) {
            if (this.calendarInstance.viewDate != null) {
                this.calendarInstance.viewDate = newValue;
            }
            this._date = newValue;
            this.render();
        }
    }

    // noinspection JSUnusedGlobalSymbols
    get dateString() {
        return this._dateString;
    }

    // noinspection JSUnusedGlobalSymbols
    set dateString(newValue) {
        const selectedDate = this._stringToDate(newValue);
        if (selectedDate != null) {
            this.date = this._stringToDate(newValue);
        }
        this._dateString = newValue;
    }

    _cleanUp() {
        if (this.calendarInstance != null && this.calendarInstance.detailsContainer != null) {
            const elements = Array.from(
                this.calendarInstance.detailsContainer.querySelectorAll(".selected-date, .selected-date-today"));

            while (elements.length > 0) {
                const element = elements.pop();
                const parent = element.parentElement;
                parent.removeChild(element);

                if (parent.classList.contains("parent-selected-date-today") ||
                    parent.classList.contains("parent-selected-date")) {
                    parent.classList.remove("parent-selected-date-today");
                    parent.classList.remove("parent-selected-date");
                }
            }
        }
    }

    _click(event) {
        const clickedElement = event.target;
        if (clickedElement != null) {
            const element = findParentWithClass(clickedElement, "day-container");
            if (element != null) {
                this._selected(element);
            }
        }
    }

    _initTemplate() {
        let selectedDateTemplate = this.querySelector("[for=selected-date]");
        selectedDateTemplate = selectedDateTemplate == null ? null : selectedDateTemplate.content;
        selectedDateTemplate = selectedDateTemplate || document.importNode(window.templates.get("selected-date"), true);
        this._selectedDateTemplate = selectedDateTemplate.children;
    }

    /**
     * Keyboard event handler.
     * @param event
     * @private
     */
    _key(event) {
        if (event.keyCode === 13 || event.keyCode === 32) {
            const keyElement = event.target;
            if (keyElement != null) {
                const element = findParentWithClass(keyElement, "day-container");
                if (element != null) {
                    this._selected(element);
                }
            }
        }
    }

    /**
     * Raises the selected date event for consumers.
     * @param {Date} newDate
     * @param {Date} oldDate
     * @private
     */
    _raiseSelectedEvent(newDate, oldDate) {
        this.dispatchEvent(new CustomEvent("selected", {
            detail: {
                newDate: new Date(+newDate),
                oldDate: new Date(+oldDate)
            }
        }));
    }

    _selected(element) {
        const previousSelectedDate = this.date;
        const newSelectedDate = new Date(element.getAttribute("data-value"));
        this._raiseSelectedEvent(newSelectedDate, previousSelectedDate);
        this.date = newSelectedDate;
    }

    /**
     * Converts a string in the recognized calendar format to a date.
     * @param {String} newValue
     * @returns {Date}
     * @private
     */
    _stringToDate(newValue) {
        // JHR: Question, does bessie not have something like this and should we then not have it in a lib like date-helper.js????
        let returnValue;
        if (newValue != null) {
            const dateParts = newValue.split("-");
            if (dateParts.length === 3) {
                const year = +dateParts[0];
                const month = +dateParts[1] - 1;
                const day = +dateParts[2];
                returnValue = new Date(year, month, day);
            }
        }
        return returnValue;
    }

    render() {
        if (this.calendarInstance == null) {
            return;
        }
        if (this.calendarInstance.getDayContainersForDates == null) {
            return;
        }
        this._cleanUp();
        const elementObjects = this.calendarInstance.getDayContainersForDates([this.date]);

        for (const elementObject of elementObjects) {
            const model = elementObject.model;
            if (model != null) {
                const element = elementObject.element;
                for (const templateChild of this._selectedDateTemplate) {
                    const newElement = templateChild.cloneNode(true);
                    if (sameDay(new Date(), model.date)) {
                        element.classList.add("parent-selected-date-today");
                        newElement.classList.add("selected-date-today");
                    } else {
                        element.classList.add("parent-selected-date");
                        newElement.classList.add("selected-date");
                    }
                    element.appendChild(newElement);
                }
            }
        }
    }
}

customElements.define('selected-date', SelectedDate);