import {clearChildElements} from "../../lib/dom-helper.js";

export class GridRenderer {
    constructor(calendarInstance) {
        this._calendarInstance = calendarInstance;
    }

    get dataStore() {
        return this._calendarInstance.dataStore;
    }

    get fragment() {
        return this._calendarInstance.fragment;
    }

    /**
     * Builds the days header Mon , Tues etc.
     * @private
     */
    _buildHeader() {
        for (const dayOfTheWeek of this.dataStore.dayNames) {

            for (const element of this._calendarInstance.headTemplate) {
                const clone = element.cloneNode(true);
                clone.classList.add("head");

                this._calendarInstance.headInflator.inflateFn(clone, {
                    dayText: dayOfTheWeek,
                    aria: dayOfTheWeek
                });
                this.fragment.appendChild(clone);
            }
        }
    }

    /**
     * Inflates individual days.
     * @param {Day} item
     * @returns {Element}
     * @private
     */
    _renderDay(item) {
        const clone = this._calendarInstance.dayTemplate.cloneNode(true);
        this._calendarInstance.dayInflator.inflateFn(clone, item[1]);
        return clone;
    }

    /**
     * Main Render function.
     */
    render() {
        clearChildElements(this._calendarInstance.detailsContainer);
        this._buildHeader();

        for (const day of this.dataStore.days) {
            const node = this._renderDay(day);
            this.fragment.appendChild(node);
        }
        this._calendarInstance.detailsContainer.appendChild(this.fragment);
    }

    /**
     * Re rendnders and inflates individual dates
     * @param {Array} models
     */
    renderDays(models) {
        for (const model of models) {
            if (model != null) {
                let previousChild = null;

                for (const child of this._calendarInstance.detailsContainer.children) {
                    if (+child.dataset.index === +model.index) {
                        previousChild = child;
                        break;
                    }
                }

                if (previousChild != null) {
                    this._calendarInstance.dayInflator.defaultFn(previousChild);
                    this._calendarInstance.dayInflator.inflateFn(previousChild, model);
                }
            }
        }
    }
}