import {BaseElement} from "./../../baremetal/lib/base-element.js";
import {toggleClass} from "./../../lib/dom-helper.js";

export class PragmaFilter extends BaseElement {
    connectedCallback() {
        super.connectedCallback();
        this.initTemplate();
    }
    
    disconnectedCallback() {
        this._input =  null;
        this._searchButton = null;
        this._clearButton = null;
        super.disconnectedCallback();
    }
    
    get filterString() {
        return this._input.value;
    }

    set filterString(newValue) {
        if (this.filterString !== newValue) {
            this._input.value = newValue;
        }
    }

    /**
     * Click event handler for component
     * @param event
     * @private
     */
    async _click(event) {
        if (event.target.tagName !== "PRAGMA-ICON-BUTTON") return;

        if (event.target.id === "btnSearch") {
            await this.filter();
        }
        else if (event.target.id === "btnClear") {
            await this.clearFilter();
        }
    }

    /**
     * Key up event handler for input element
     * @param event
     * @private
     */
    async _keyUp(event) {
        if (event.key === "Enter") {
            (this._input.value.trim().length === 0) ? await this.clearFilter() : await this.filter();
        }
    }

    /**
     * Toggles display of filter and clear buttons
     * @param reset
     * @private
     */
    _toggleButtons(reset) {
        const className = "hidden";
        
        if (reset === true) {
            this._clearButton.classList.add(className);
            this._searchButton.classList.remove(className);
        } else {
            this._clearButton.classList.remove(className);
            this._searchButton.classList.add(className);
        }
    }

    /**
     * Clears the filter input
     */
    async clearFilter() {
        this.filterString = "";
        await this.datasource.filter(this.filterString);
        
        this._input.readOnly = false;
        this._toggleButtons(true);
    }

    /**
     * Triggers data source filter 
     */
    async filter() {
        this._input.readOnly = true;
        this._toggleButtons(false);
        
        await this.datasource.filter(this.filterString);
        this._input.readOnly = false;
    }

    /**
     * Initialise component template
     */
    initTemplate() {
        const instance = document.importNode(window.templates.get("pragma-filter-template"), true);
        
        // set placeholder for input
        this._input = instance.querySelector("input");
        const placeHolderValue = this.getAttribute("placeholder") || window.translations.labels.filter;
        this._input.setAttribute("placeholder", placeHolderValue);
        this._input.setAttribute("aria-label", window.translations.labels.filter);
        
        // set icon button labels
        this._searchButton = instance.querySelector("#btnSearch");
        this._searchButton.setAttribute("aria-label", window.translations.labels.filter);
        this._clearButton = instance.querySelector("#btnClear");
        this._clearButton.setAttribute("aria-label", window.translations.labels.clear);
        
        // register events
        this.registerEvent(this, "click", this._click.bind(this));
        this.registerEvent(this._input, "keyup", this._keyUp.bind(this));
        
        this.appendChild(instance);
    }
}

customElements.define("pragma-filter", PragmaFilter);