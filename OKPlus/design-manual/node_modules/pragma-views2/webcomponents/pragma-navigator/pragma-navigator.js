class PragmaNavigator extends HTMLElement {
    onMessage(message) {
        this._selectedIdToCache(message);

        let url = `#`;
        
        if (message.view != null) {
            url += `${message.view}/`;
        }
        
        if (message.remote != null) {
            url += `${message.remote}/`;
        }

        if (message.id != null) {
            url += message.id;
        }

        //TODO JN: if remote is different from current, then dump query string
        const urlParts = window.location.hash.split("?");
        if (urlParts[1] != null) {
            url += `?${urlParts[1]}`;
        } 

        if (message.parameters != null) {
            url += this._parametersToQueryString(urlParts[1] || "", message.parameters);
        }

        window.eventEmitter.emit("navigate", {
            url: url,
            message: message
        });

        window.location.href = url;

        if (message.onNavigatedCallback != null) {
            message.onNavigatedCallback();
        }
    }

    _selectedIdToCache(message) {
        if (message.selectedId != null && !(Array.isArray(message.selectedId) && message.selectedId.length === 0)) {
            window.selectedIdCache = message.selectedId;
        }
    }

    _parametersToQueryString(queryString, parameters) {
        for (const key of Object.keys(parameters)) {
            const splitChar = queryString.length > 0 ? "&" : "?";
            queryString += `${splitChar}${key}=${parameters[key]}`
        }
        return queryString;
    }
}


customElements.define('pragma-navigator', PragmaNavigator);