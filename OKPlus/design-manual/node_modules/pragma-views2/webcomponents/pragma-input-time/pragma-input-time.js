import {BaseElement} from "../../baremetal/lib/base-element.js";
import {padStart} from "../../lib/string-helpers.js";

export class PragmaInputTime extends BaseElement {

    connectedCallback() {
        super.connectedCallback();

        const pattern = "^(([0-1][0-9]|[2][0-3]):([0-5][0-9])){1}(:([0-5][0-9])){0,1}(.\\d{3}){0,1}$";
        this._formatRegex = new RegExp(pattern);
        this._timeChanging = false;

        // Create components
        this._timeInput = document.createElement("input");
        this._timeInput.id = "timeInput";
        this._timeInput.type = "text";
        this._timeInput.pattern = pattern;
        this._timeInput.placeholder = this._buildPlaceholder();

        // Attributes
        this._includeSeconds = this.hasAttribute("include-seconds");
        this.readonly = this.readonly;
        this.required = this.required;

        // Event listeners
        this._timeInput.onkeyup = this._onKeyUpCompleted.bind(this);

        // Append to dom
        this.appendChild(this._timeInput);
    }

    disconnectedCallback() {
        super.disconnectedCallback();

        this._timeInput.onkeyup = null;
        this._timeInput = null;
        this._time = null;
        this._includeSeconds = null;
        this.timeChangedCallback = null;
    }

    get includeSeconds() {
        return this._includeSeconds || this.hasAttribute("include-seconds");
    }

    set includeSeconds(value) {
        this._includeSeconds = value;
        if (this._includeSeconds) {
            this.setAttribute("include-seconds", value);
            this._timeInput.placeholder = this._buildPlaceholder();
        }
    }

    get readonly() {
        if (this._readonly == null) {
            this._readonly = this.hasAttribute("readonly");
        }
        return this._readonly;
    }

    set readonly(value) {
        if (value === true) {
            this._readonly = true;
            this.setAttribute("readonly", "true");
            this._timeInput.setAttribute("readonly", "true");
        } else {
            this._readonly = false;
            this.removeAttribute("readonly");
            this._timeInput.removeAttribute("readonly");
        }
    }

    get required() {
        if (this._required == null) {
            this._required = this.hasAttribute("required");
        }
        return this._required;
    }

    set required(value) {
        if (value === true) {
            this._required = true;
            this.setAttribute("required", "true");
            this._timeInput.setAttribute("required", "true");
        } else {
            this._required = false;
            this.removeAttribute("required");
            this._timeInput.removeAttribute("required");
        }
    }

    get time() {
        return this._time || (this.hasAttribute("time") ? this.getAttribute("time") : null);
    }

    set time(isoTime) {
        if (this._timeChanging === false) {
            this._timeChanging = true;

            // The Time property will be formatted in iso time without the 'T'
            const oldTime = this._time;
            const time = this._tryParseTime(isoTime);
            if (time != null) {
                this._time = this._formatTimeToIsoString(time);
                if (this._timeInput != null) {
                    if (this.includeSeconds) {
                        this._timeInput.value = isoTime;
                    } else {
                        this._timeInput.value = `${padStart(time.hours)}:${padStart(time.minutes)}`;
                    }
                }
            } else {
                this._time = null;
            }

            // Notify if something changed
            if (this._time !== oldTime) {
                this.notifyPropertyChanged("time", this._time, true);
                if ((this.timeChangedCallback != null)) {
                    this.timeChangedCallback(this._time);
                }
            }

            this._timeChanging = false;
        }
    }

    _tryParseTime(isoTime) {
        let time = null;
        if ((isoTime != null) && (isoTime !== "") && (this._formatRegex.test(isoTime) === true)) {
            // Parse the time parts to integers
            const parts = isoTime.split(":");
            time = {
                hours: parseInt(parts[0], 10),
                minutes: parseInt(parts[1], 10),
                seconds: 0,
                milliSeconds: 0
            };

            if (this.includeSeconds && (parts.length > 2)) {
                const secondParts = parts[2].split(".");
                time.seconds = parseInt(secondParts[0], 10);
                if (secondParts.length > 1) {
                    time.milliSeconds = parseInt(secondParts[1], 10);
                }
            }
        }

        return time;
    }

    _buildPlaceholder() {
        let placeholder = "hh:mm";
        if (this.includeSeconds === true) {
            placeholder += ":ss.sss";
        }

        return placeholder;
    }

    _onKeyUpCompleted(eventArgs) {
        if (eventArgs.key != null) {
            this.time = this._timeInput.value;
        }
    }

    _formatTimeToIsoString(time) {
        return `${padStart(time.hours)}:${padStart(time.minutes)}:${padStart(time.seconds)}.${padStart(time.milliSeconds, 3)}`;
    }
}

customElements.define('pragma-input-time', PragmaInputTime);