import {loadScript} from "./../../component-loader.js";

class PieChart extends HTMLElement {
    get field() {
        return this.getAttribute("field") || this._field;
    }

    set field(newValue) {
        this._field = newValue;
    }

    get label() {
        return this.getAttribute("label") || this._label;
    }

    set label(newValue) {
        this._label = newValue;
    }

    get padding() {
        const value = this.getAttribute("padding") || this._padding;
        return Number(value);
    }

    set padding(newValue) {
        this._padding = newValue;
    }

    get isDonut() {
        const attr = this.getAttribute("donut");
        if (attr == undefined) {
            return this._donut;
        }

        return attr == "true";
    }

    set isDonut(newValue) {
        this._donut = newValue;
    }

    get axisUI() {
        if(this._axisUI == undefined) {
            this._axisUI = this.parentElement.svg.append("g").attr("id", "chart-body")
        }

        return this._axisUI;
    }

    constructor() {
        super();
        this._padding = 0;
        this._donut = false;
    }

    async connectedCallback() {
        const scriptPath = './third-party/d3.min.js';
        this._script = await loadScript(scriptPath, true, () => {
            this.parentElement.addChart(this);
            if (this._script != null) this._script.onload = null;
        });
    }

    disconnectedCallback() {
        this.parentElement.removeChart(this);
        delete this.axisUI;
        this._script = null;
    }

    update(data) {
        const padding = this.parentElement.paddingValues;

        const radius = Math.min(padding.width - padding.left - padding.right, padding.height - padding.top - padding.bottom) / 2;
        const pie = d3.pie().value(d => d[this.field]).padAngle(this.padding);

        this.axisUI.attr("transform", `translate(${(padding.width / 2) + padding.left}, ${(padding.height / 2) + padding.top})`);

        this.drawArch(radius, pie, data);
        this.drawLines(radius, pie, data);
        this.drawLabels(radius, pie, data);
    }

    drawArch(radius, pie, data) {
        const dataJoin = this.axisUI.selectAll(".arc").data(pie(data));

        const arc = d3.arc()
            .outerRadius(radius - 20)
            .innerRadius(0);

        if (this.isDonut == true) {
            arc.innerRadius(radius - 5);
        }

        const valuesArray = d3.extent(data, d => d[this.field]);
        const color = d3.scaleSequential()
            .domain(valuesArray)
            .interpolator(d3.interpolateCool);

        const enter = dataJoin.enter()
            .append("path")
            .attr("class", "arc");

        dataJoin.exit().remove();

        dataJoin
            .merge(enter)
            .attr("d", arc)
            .style("fill", d => color(d[this.field]))
    }

    drawLabels(radius, pie, data) {
        const dataJoin = this.axisUI.selectAll("text").data(pie(data));

        const labelArc = d3.arc()
            .outerRadius(radius + 40)
            .innerRadius(radius + 20);

        const enter = dataJoin.enter()
            .append("text")
            .text(d => d.data[this.label]);

        dataJoin.exit().remove();

        dataJoin
            .merge(enter)
            .attr("transform", d => "translate(" + labelArc.centroid(d) + ")");
    }

    drawLines(radius, pie, data) {
        const dataJoin = this.axisUI.selectAll("line").data(pie(data));

        const labelArc = d3.arc()
            .outerRadius(radius + 30)
            .innerRadius(radius + 10);

        const arc = d3.arc()
            .outerRadius(radius - 20)
            .innerRadius(radius - 5);

        const enter = dataJoin.enter()
            .append("line")
            .attr("class", "pie-line");

        dataJoin.exit().remove();

        dataJoin.merge(enter)
            .transition()
            .duration(1000)
            .ease(d3.easeElastic)
            .attr("x1", d => labelArc.centroid(d)[0])
            .attr("y1", d => labelArc.centroid(d)[1])
            .attr("x2", d => arc.centroid(d)[0])
            .attr("y2", d => arc.centroid(d)[1])
    }
}

customElements.define("pie-chart", PieChart)
