import {loadScript} from "./../../component-loader.js";

class BarChart extends HTMLElement {
    get axisUI() {
        if(this._axisUI == undefined) {
            this._axisUI = this.parentElement.svg.append("g").attr("id", "chart-body")
        }

        return this._axisUI;
    }
    
    async connectedCallback() {
        const scriptPath = './third-party/d3.min.js';
        this._script = await loadScript(scriptPath, true, () => {
            this.parentElement.addChart(this);
            if (this._script != null) this._script.onload = null;
        });
    }


    disconnectedCallback() {
        this.parentElement.removeChart(this);
        delete this.axisUI;
        this._script = null;
    }

    update(data) {
        const padding = this.parentElement.paddingValues;
        const x = this.parentElement.xAxis.d3Scale;
        const y = this.parentElement.yAxis.d3Scale;

        const dataJoin = this.axisUI
            .selectAll(".bar")
            .data(data);

        const xField = this.parentElement.xAxis.field;
        const yField = this.parentElement.yAxis.field;
        const isTimeline = this.parentElement.xAxis.constructor.name == "TimeAxis";

        const enter = dataJoin.enter()
            .append("rect")
            .attr("class", "bar")
            .attr("x", d => (isTimeline == true ? x(new Date(d[xField])) : x(d[xField])) + padding.left)
            .attr("y", d => y(d[yField]) + padding.top)
            .attr("height", d => padding.height - y(d[this.parentElement.yAxis.field]))
            .attr("width", this.parentElement.xAxis.itemWidth);

        dataJoin.exit().remove();

        dataJoin
            .merge(enter)
            .transition()
            .duration(100)
            .delay(100)
            .ease(d3.easeLinear)
            .attr("x", d => (isTimeline == true ? x(new Date(d[xField])) : x(d[xField])) + padding.left)
            .transition()
            .duration(500)
            .ease(d3.easeElastic)
            .attr("width", this.parentElement.xAxis.itemWidth)
            .attr("y", d => y(d[this.parentElement.yAxis.field]) + padding.top)
            .attr("height", d => {
                const h = padding.height - y(d[this.parentElement.yAxis.field]);
                const result = h > 0 ? h : 0;
                return result;
            });
    }
}

customElements.define("bar-chart", BarChart);
