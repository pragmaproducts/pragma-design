import {loadScript} from "./../../component-loader.js";

class ScatterChart extends HTMLElement {
    get axisUI() {
        if(this._axisUI == undefined) {
            this._axisUI = this.parentElement.svg.append("g").attr("id", "chart-body")
        }

        return this._axisUI;
    }

    get sizeField() {
        return this.getAttribute("size-field") || this._sizeField;
    }

    set sizeField(newValue) {
        this._sizeField = newValue;
    }

    async connectedCallback() {
        const scriptPath = './third-party/d3.min.js';
        this.script = await loadScript(scriptPath, true, () => {
            this.parentElement.addChart(this);
            if (this.script != null) this.script.onload = null;
        });
    }

    disconnectedCallback() {
        this.parentElement.removeChart(this);
        delete this.axisUI;
        this.script = null;
    }

    update(data) {
        const padding = this.parentElement.paddingValues;
        const x = this.parentElement.xAxis.d3Scale;
        const y = this.parentElement.yAxis.d3Scale;

        const width = this.parentElement.xAxis.itemWidth / 2;
        const sizeField = this.sizeField;
        const sizeArray = (sizeField || "").length > 0 ? d3.extent(data, d => d[sizeField]) : null;

        const size = sizeArray == null ? null : d3.scaleSqrt()
            .domain(sizeArray)
            .range([4, 20]);

        const color = sizeArray == null ? null : d3.scaleSequential()
            .domain(sizeArray)
            .interpolator(d3.interpolateWarm);

        const dataJoin = this.axisUI
            .selectAll(".circle")
            .data(data);

        const enter = dataJoin.enter()
            .append("circle")
            .attr("class", "circle");

        dataJoin.exit().remove();

        const xField = this.parentElement.xAxis.field;
        const yField = this.parentElement.yAxis.field;
        const isTimeline = this.parentElement.xAxis.constructor.name == "TimeAxis"; 
        
        dataJoin
            .merge(enter)
            .style("fill", sizeArray == null ? "cornflowerblue" : d => color(d[sizeField]))
            .transition()
            .duration(500)
            .ease(d3.easeElastic.period(1))
            .attr("r", d => sizeArray == null ? 5 : size(d[sizeField]))
            .attr("cx", d => (isTimeline == true ? x(new Date(d[xField])) : x(d[xField])) + width + padding.left)
            .attr("cy", d => y(d[yField]) + padding.top)
    }
}

customElements.define("scatter-chart", ScatterChart);
