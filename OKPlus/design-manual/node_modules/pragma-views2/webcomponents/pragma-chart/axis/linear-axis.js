import {loadScript} from "./../../component-loader.js";

class LinearAxis extends HTMLElement {
    get axis() {
        return this.getAttribute("axis") || this._axis;
    }

    set axis(newValue) {
        this._axis = newValue;
    }

    get axisUI() {
        if(this._axisUI == undefined) {
            this._axisUI = this.parentElement.svg.append("g").attr("id", "left-axis")
        }

        return this._axisUI;
    }

    get field() {
        return this.getAttribute("field") || this._field;
    }

    set field(newValue) {
        this._field = newValue;
    }

    get d3Scale() {
        if (this._d3Scale == undefined) {
            this._d3Scale = d3.scaleLinear();
        }

        return this._d3Scale;
    }

    async connectedCallback() {
        const scriptPath = './third-party/d3.min.js';
        this._script = await loadScript(scriptPath, true, () => {
            if (this.axis == "x") {
                this.parentElement.xAxis = this;
            }
            else {
                this.parentElement.yAxis = this;
            }
            if (this._script != null) this._script.onload = null;
        });
    }

    disconnectedCallback() {
        delete this.parentElement.yAxis;
        delete this.d3Scale;
        this._script = null;
    }

    update(data) {
        const padding = this.parentElement.paddingValues;
        const domainArray = [0, d3.max(data, d => d[this.field])];

        const selection = this.d3Scale.domain(domainArray);

        if (this.axis == "x") {
            selection.range([0, padding.width])
        }
        else {
            selection.range([padding.height, 0]);
        }

        this.axisUI
            .attr("transform", this.axis == "x" ? `translate(${padding.left}, ${padding.top + padding.height})` : `translate(${padding.left}, ${padding.top})`)
            .call(this.axis == "x" ? d3.axisBottom(this.d3Scale) : d3.axisLeft(this.d3Scale));
    }
}

customElements.define("linear-axis", LinearAxis);
