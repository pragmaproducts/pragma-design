import {loadScript} from "./../../component-loader.js";

class TimeAxis extends HTMLElement {
    get axisUI() {
        if(this._axisUI == undefined) {
            this._axisUI = this.parentElement.svg.append("g").attr("id", "bottom-axis")
        }

        return this._axisUI;
    }

    get field() {
        return this.getAttribute("field") || this._field;
    }

    set field(newValue) {
        this._field = newValue;
    }
    
    constructor() {
        super();
    }

    get d3Scale() {
        if (this._d3Scale == undefined) {
            this._d3Scale = d3.scaleTime();
        }

        return this._d3Scale;
    }
    
    async connectedCallback() {
        const scriptPath = './third-party/d3.min.js';
        this._script = await loadScript(scriptPath, true, () => {
            this.parentElement.xAxis = this;
            if (this._script != null) this._script.onload = null;
        });
    }

    disconnectedCallback() {
        delete this.parentElement.xAxis;
        delete this.d3Scale;
        delete this.axisUI;
        this._script = null;
    }

    update(data) {
        const padding = this.parentElement.paddingValues;
        const domainArray = d3.extent(data, d => new Date(d[this.field].toString()));
        this.d3Scale.domain(domainArray).range([0, padding.width]);

        this.itemWidth = 50; // todo: need to scale this
        let bottomAxis;
        if (data.length <= 10) {
            const tickValues = data.map(d => new Date(d[this.field].toString()));

            bottomAxis = d3.axisBottom(this.d3Scale)
                .tickValues(tickValues)
                .tickFormat(d3.timeFormat("%Y-%m-%d"))
        }
        else {
            bottomAxis = d3.axisBottom(this.d3Scale)
                .ticks(10)
                .tickFormat(d3.timeFormat("%Y-%m-%d"))
        }

        this.axisUI
            .attr("transform", `translate(${padding.left}, ${padding.top + padding.height})`)
            .call(bottomAxis)
            .selectAll("text")
                .attr("transform", "rotate(45)")
                .style("text-anchor", "start");
    }
}

customElements.define("time-axis", TimeAxis);
