import {PragmaMessagesStates} from '../lib/pragma-messages-states.js';
import {BaseElement} from '../../baremetal/lib/base-element.js';
import {parseElement} from "./../../baremetal/lib/binding/dom-parsing.js"

export class Appbar extends BaseElement {
    get title() {
        return this._title || this.getAttribute("title");
    }

    set title(newValue) {
        this.setProperty("title", newValue);
        this.form.setValue({"@translations.title": newValue});
    }
    
    get src() {
        return this._src || this.getAttribute("src") || "./app/app-bar.json";
    }
    
    set src(newValue) {
        this.setProperty("src", newValue);
    }
    
    get form() {
        if (this._form == null) {
            this.form = this.querySelector("pragma-form");
        } 
        
        return this._form;
    }
    
    set form(newValue) {
        this.setProperty("form", newValue);
    }
    
    get schema() {
        return this.form.schema;
    }
    
    set schema(newValue) {
        this.form.schema = newValue;
    }
    
    connectedCallback() {
        super.connectedCallback();
        this._initTemplate();

        this.form.context = this;
        this._loadSchema();
    }
     
    disconnectedCallback() {
        this.schema = null;
        this.form = null;
    }

    _initTemplate() {
        const instance = document.importNode(window.templates.get("pragma-appbar"), true);
        this.appendChild(instance);
    }
    
    _loadSchema() {
        fetch(this.src).then(result => result.text()).then(jsonResult => {
            this.schema = JSON.parse(jsonResult);
        });
    }

    /**
     * This function is triggered by the schema when a active propery is set.
     * The target element style class must change to show these states.
     * @param args
     */
    setActiveState(args) {
        const ic = args["icon-name"];
        const isActive = args.isActive;
        
        const element = this.querySelector(`[icon-name="${ic}"]`);
        
        if (isActive == true) {
            element.classList.add("active");
        }
        else {
            element.classList.remove("active");
        }
    }

    /**
     * use eventEmitter.postMessage to send a object defined as:
     * {
     *     intent: object in variables of schema to target,
     *     target: property to set,
     *     value: value to set it to.
     * }
     * @param args
     */
    onMessage(args) {
        if (this.form.setValue != null) {
            this.form.setValue({[`@${args.intent}.${args.target}`]: args.value});
        }
    }
}

customElements.define('pr-appbar', Appbar);