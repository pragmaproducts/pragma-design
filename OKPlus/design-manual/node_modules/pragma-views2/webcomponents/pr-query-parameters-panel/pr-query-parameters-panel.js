import {BaseElement} from "./../../baremetal/lib/base-element.js";
import {ComponentUiStates} from "./../../lib/component-ui-states.js";
import {findParentOfType} from "./../../lib/dom-helper.js";
import {buttonTypes, dialogTypes} from "../pragma-dialogs/pragma-dialogs-constants.js";

export class QueryParametersPanel extends BaseElement {
    connectedCallback() {
        super.connectedCallback();

        this.initTemplate();

        this.registerEvent(this.editQueryButton, "click", this.editQuery.bind(this));
        this.registerEvent(this.continueButton, "click", this.submit.bind(this));
    }

    disconnectedCallback() {
        this.queryParameters = null;
        this.editQueryButton = null;
        this.continueButton = null;
        
        this._targetElement = null;
        
        delete this._datasource;
        
        super.disconnectedCallback();
    }
    
    get datasource() {
        return this._datasource;
    }
    
    set datasource(value) {
        this._datasource = value;
        this.queryParameters.datasource = value;
    }

    get targetElement() {
        return this._targetElement;
    }

    set targetElement(value) {
        this._targetElement = value;
    }

    /**
     * Removes component from DOM
     */
    close() {
        if (this.parentElement != null) {
            this.parentElement.removeChild(this);
        }
    }

    /**
     * Click event handler for EditQuery button, launch Query Builder and close component
     * @param event
     */
    async editQuery(event) {
        event.preventDefault();

        const targetPragmaForm = findParentOfType(this.targetElement, "pragma-form");
        if (targetPragmaForm != null) {
            window.eventEmitter.emit("edit-query", {
                dataSource: this.datasource,
                targetVisualisationId: this.targetElement.id,
                targetElement: targetPragmaForm
            });
        }
        
        await this.performSchemaSideEffects();
        this.close();
    }

    /**
     * Returns the data source parameters definition with updated values
     * @returns {*}
     */
    getUpdatedParameterValues() {
        const dirtyModel = this.queryParameters.parametersForm.model.getFlatDirtyModel();
        const keys = Object.keys(dirtyModel);
        
        for (const key of keys) {
            const parameterName = key.charAt(0) === '@' ? key : `@${key}`;
            this.datasource.definition.parameters[parameterName] = dirtyModel[key];
        }
        
        return this.datasource.definition.parameters;
    }

    /**
     * Returns a boolean representing whether the data set has changes or not.
     * @returns {boolean}
     */
    hasChanges() {
        return this.queryParameters.parametersForm.model.getDirtyModel() != null;
    }
    
    /**
     * Initialize component template
     */
    initTemplate() {
        const instance = document.importNode(window.templates.get("pr-query-parameters-panel-template"), true);
        this.appendChild(instance);
    }

    /**
     * Performs schema side effect on target visualisation's data source, updates parameterized query values and triggers load
     * @returns {Promise<void>}
     */
    async performSchemaSideEffects() {
        const sideEffectsManager = this.datasource.schema.sideEffects;
        
        this.targetElement.uiState = ComponentUiStates.suspended;
        
        const intentions = [{ property: "use-default-parameter-values", value: true }];

        if (this.hasChanges() === true) {
            intentions.push({ property: "parameters", value: this.getUpdatedParameterValues() });
        }
        
        sideEffectsManager.perform({
            target: "datasource",
            id: this.datasource.definition.id,
            intentions: intentions
        });
        
        this.targetElement.uiState = ComponentUiStates.active;

        //NOTE JN: pragma-lookup has a preventLoading flag set on its data source definition to prevent repeated loads, 
        //we need to manually trigger load on the data source to overcome this
        if (this.datasource != null && this.datasource.definition.preventLoading === true) {
            await this.datasource.load();
        }
    }

    /**
     * Reset data source flag for use-default-parameter-values so that parameters will be requested again on data source load
     */
    resetDataSourceFlag() {
        if (this.datasource != null && this.datasource.definition != null) {
            this.datasource.definition["use-default-parameter-values"] = false;
        }
    }
    
    /**
     * Click event handler for Continue/Submit button, performs schema side effects for target visualisations data source
     * @param event
     * @returns {Promise<void>}
     */
    async submit(event) {
        event.preventDefault();

        this.queryParameters.parametersForm.model.validate()
            .then(_ => this.performSchemaSideEffects())
            .catch(_ => {
                window.eventEmitter.emit("show-message", {
                    type: dialogTypes.error,
                    buttons: buttonTypes.ok,
                    message: window.translations.queryParameters.valuesRequired
                });
            });
    }
}

customElements.define('pr-query-parameters-panel', QueryParametersPanel);