import {buttonTypes, dialogTypes} from './../pragma-dialogs/pragma-dialogs-constants.js';
import {BaseElement} from "./../../baremetal/lib/base-element.js";
import {cloneObject} from "./../../baremetal/lib/class-helper.js";
import {DatasetFactory} from "./../../lib/dataset-factory.js";
import {DialogNavigation} from "../lib/dialog-navigation.js";
import {SchemaHelper} from "./../../lib/schema-helper.js";

export class PragmaLookup extends BaseElement {
    constructor() {
        super();
        this.context = this;
        this.selectedId = -1;
        this.classList.add("closed");
        this.setAttribute("aria-hidden", "true");
        this.doLookupHandler = this.doLookup.bind(this);
        window.eventEmitter.on("do-lookup", this.doLookupHandler);

        this.returnRecordsHandler = this.returnRecords.bind(this);
        window.eventEmitter.on("datasource-records:return", this.returnRecordsHandler);
    }

    async connectedCallback() {
        super.connectedCallback();
        await this.initTemplate();

        const closeButton = this.querySelector("#btnClose");
        const acceptButton = this.querySelector("#btnLookupAccept");
        this.previewButton = this.querySelector("#btnPreview");
        const editQueryButton = this.querySelector("#btnEditQuery");
        this.titleElement = this.querySelector("#pragma-lookup-title");

        this._dialogNavigation = new DialogNavigation(this, this.close.bind(this));

        this.registerEvent(closeButton, "click", this.cancel.bind(this));
        this.registerEvent(acceptButton, "click", this.accept.bind(this));
        this.registerEvent(this.previewButton, "click", this.toggle.bind(this));
        this.registerEvent(editQueryButton, "click", this._editQuery.bind(this));
        this.registerEvent(this, "doubleclick", this.onDoubleClick.bind(this));
    }

    disconnectedCallback() {
        this.definition = null;
        this.perspective = null;
        this.previewDefinition = null;
        this.items = null;
        this.template = null;
        this.selectedId = null;
        this._dialogNavigation = null;
    }

    _clearPreviewModel() {
        if (this.previewForm.model.clear != null) {
            this.previewForm.model.clear();
        }
    }

    _getPreviewModel() {
        this._setPreviewParametersOnSchema();
        this.previewForm.model.load();
    }

    _getRecords(lookup) {
        const identifier = `${lookup.model["__schema"].type}${lookup.model["__schema"].resource}`;

        window.eventEmitter.emit("datasource-records:get",
            {
                datasource: this.definition.datasource,
                model: this.model,
                filter:lookup.filter,
                filterField: lookup.filterField,
                identifier: identifier
            });
    }

    _initializeView(lookup) {
        this.collectionForm.schema = {
            variables: lookup.sourceSchema.variables,
            datasets: [{
                id: 0,
                name: "model",
                fields: [
                    {
                        name: "selectedId",
                        default: []
                    }]
            }],
            body: {
                elements: this.template.elements
            }
        };

        const options = {
            schema: this.collectionForm.schema
        };

        this.dsFactory = new DatasetFactory(options);
        this.collectionForm.model = this.dsFactory.createDataSet(0);
        this.collectionForm.model.setInitialValues({});
        this.collectionForm.model.selectedIdChanged = this.selectedIdChanged.bind(this);
    }

    _setDefinition(lookup) {
        this.definition = cloneObject(lookup.definition);
        this.perspective = lookup.perspective;
        this.previewDefinition = lookup.preview;
        this.successCallback = lookup.successCallback;
        this.cancelCallback = lookup.cancelCallback;
        this.filter = lookup.filter;
        this.filterField = lookup.filterField;
    }

    _setLookupTitle(lookup) {
        let title = window.translations.lookups.defaultTitle;
        if (lookup.definition.title != null && lookup.sourceSchema != null) {
            this._schemaHelper = new SchemaHelper(lookup.sourceSchema);
            title = this._schemaHelper.getAssociatedValue(null, lookup.definition.title);
        }

        this.titleElement = this.querySelector("#pragma-lookup-title");

        if (this.titleElement != null) {
            this.titleElement.innerHTML = title;
        }
    }

    _setPreviewParametersOnSchema() {
        if (this.previewForm.schema.variables.parameters == null) {
            this.previewForm.schema.variables.parameters = {};
        }
        //TODO GM: TEMP ResourceId. Needs to be renamed to remoteId in all schemas
        this.previewForm.schema.variables.parameters.resourceId = this.selectedId;
    }

    accept() {
        if (this.selectedId != -1) {
            const item = this.data.find(t => t.id == this.selectedId);
            this.successCallback(item);
            this.close();
        }
    }

    cancel() {
        this.cancelCallback();
        this.close();
    }

    clearLookupForms() {
        if (this.collectionForm.context && this.collectionForm.context.datasource != null) {
            this.collectionForm.context.datasource.dispose();    
        } 
        

        delete this.collectionForm.model;

        delete this.collectionForm.schema;
        this.collectionForm.schema = null;


        delete this.previewForm.model;
        this.previewForm.schema = null;
        delete this.previewForm.schema;
        this.previewForm.context = null;
    }

    close(item) {
       
        
        if (this._schemaHelper != null) {
            this._schemaHelper.dispose();
            this._schemaHelper = null;
        }

        this.filter = null;
        this.filterField = null;
        this.perspective = null;
        this.definition = null;
        this.previewDefinition = null;
        this.selectedId = [];
        this.template = null;
        this.preview = false;
        if (this.dsFactory != null) {
            this.dsFactory.dispose();
            this.dsFactory = null;
        } 
        if (this.previewFactory != null) {
            this.previewFactory.dispose();
            this.previewFactory = null;
        }
        
        this.clearLookupForms();
        this.classList.add("closed");
        this.hidePreview();
        this.setAttribute("aria-hidden", "true");
        this._dialogNavigation.focusOpeningElement();
    }

    /**
     * When a lookup is fired this is the entry point
     * @param lookup
     */
    doLookup(lookup) {
        this._setDefinition(lookup);
        this._setLookupTitle(lookup);

        if (lookup.preview != null) {
            this.getPreviewSchema();
            this.togglePreviewButton(true);
        } else {
            this.togglePreviewButton(false);
        }

        if (this.definition.template != null) {
            this.template = lookup.model["__schema"].templates.find(item => item.id === this.definition.template);
            this._initializeView(lookup);
        }

        this._getRecords(lookup);
    }

    /**
     * Emits event to edit-query custom event handler with required arguments
     * @param event
     * @private
     */
    _editQuery(event) {
        event.preventDefault();

        window.eventEmitter.emit("edit-query", {
            dataSource: this.datasource,
            targetVisualisationId: this.collectionForm.schema.visualizations.lookup.id,
            targetElement: this.collectionForm
        });
    }

    getPreviewSchema() {
        if (this.previewDefinition == null) return; 
        
        this.classList.add("preview");
        window.eventEmitter.emit("fetch-schema",
            {
                remote: this.previewDefinition.remote,
                type: "view", // Potential todo send from schema
                callback: (schema) => {
                    this.previewForm.schema = schema;
                    this.previewFactory = new DatasetFactory({
                        schema: schema,
                        remoteCallback: this.previewDatasetRemoteCallback.bind(this)
                    });
                    this.previewForm.model = this.previewFactory.createDataSet(0, null, null, this.previewDefinition.remote);
                }
            });
    }

    hidePreview() {
        window.eventEmitter.postMessage("#lookup-split-view", {
            message: "hide"
        });
    }

    async initTemplate() {
        const instance = document.importNode(window.templates.get("pragma-lookup-template"), true);
        this.appendChild(instance);

        this.collectionForm = this.querySelector("#collectionForm");
        this.previewForm = this.querySelector("#previewForm");

        this.collectionForm.context = this;
        this.previewForm.context = this;
    }

    onDoubleClick() {
        this.accept();
    }

    previewDatasetRemoteCallback(options) {
        window.eventEmitter.emit("fetch-lookup-preview", {
            options: options
        });
    }

    async returnRecords(datasource) {
        if (datasource == null) {
            this.showNoRecordsFoundMessage();
            return;
        }

        let queryOptions;
        if((this.filter || "").length > 0) {
            queryOptions = [{
                field: this.filterField,
                value: this.filter,
                operator: "LIKE"
            }];
        }
        this.datasource = datasource;
        if (this.filter == null) {
            this.classList.remove("closed");
            this.removeAttribute("aria-hidden");
        } 
      
        this._dialogNavigation.applyFocus();
        await datasource.load(null, null, queryOptions);

        this.data = await datasource.data({perspective: this.perspective.id});
        if (this.data.items != null) {
            this.data = this.data.items;
        } 

        if (this.data.length == 0) {
            this.showNoRecordsFoundMessage();

            // todo find a way to go back to label composite
            this.cancelCallback();
            return this.close();
        }

        if (this.data.length == 1) {
            this.successCallback(this.data[0]);
            return this.close();
        }
        
        if (this.filter != null) {
            this.classList.remove("closed");
            this.removeAttribute("aria-hidden");
        } 
    }

    async selectedIdChanged(newValue) {
        if (this.selectedId !== newValue) {
            this.selectedId = newValue;
        }

        if (this.selectedId.length === 0 && this.previewModel != null) {
            this._clearPreviewModel();
        }

        if (this.preview !== true) {
            return;
        }

        if (this.definition != null && this.previewDefinition != null) {

            this.previewModel = await this._getPreviewModel();
        }
    }

    showNoRecordsFoundMessage() {
        window.eventEmitter.emit("show-message", {
            type: dialogTypes.information,
            buttons: buttonTypes.ok,
            message: window.translations.lookups.messages.noRecords
        });
    }

    async toggle() {
        this.preview = !this.preview;

        if (this.preview === true) {
            await this._getPreviewModel();
        }
        window.eventEmitter.postMessage("#lookup-split-view", {
            message: "toggle"
        });
    }

    togglePreviewButton(visible) {
        if (visible === true) {
            this.previewButton.removeAttribute("aria-hidden");
        } else {
            this.previewButton.setAttribute("aria-hidden", "true");
        }
    }
}

customElements.define('pragma-lookup', PragmaLookup);