class PragmaGroup extends HTMLElement {
    constructor() {
        super();
        this.expanded = "true";
    }

    static get observedAttributes() {
        return ["expanded"]; // array of string for attributes changing ["attribute1"]
    }

    get expanded() {
        return this.getAttribute("expanded") || this._expanded;
    }

    set expanded(newValue) {
        this._expanded = newValue;
        if (newValue == "false") {
            this.classList.add("pragma-group-hidden");
        }
        else {
            this.classList.remove("pragma-group-hidden");
        }
    }

    get title() {
        return this.getAttribute("title") || this._title;
    }

    set title(newValue) {
        this._title = newValue;
    }

    get uiGraph() {
        return this._uiGraph;
    }

    set uiGraph(newValue) {
        this._uiGraph = newValue;
    }

    get path() {
        return this._path;
    }

    set path(newValue) {
        this._path = newValue;
    }

    get uiState() {
        return this._uiState;
    }

    set uiState(newValue) {
        this._uiState = newValue;
        if(this._uiGraph != null && this.path != null) {
            this._uiGraph.setChildrenStateForPath(this.path, newValue);
        }
    }

    attributeChangedCallback(name, oldValue, newValue) {
        if (name == "expanded") {
            this.expanded = newValue;
        }
    }

    connectedCallback() {
        this.initTemplate();
        this.setGroupTitle();
        this.setToggleButton();
    }

    disconnectedCallback() {
        if (this.toggleHandler != null) {
            this.removeEventListener('click', this.toggleHandler);
            this.toggleHandler = null;
        }
    }

    initTemplate() {
        const instance = document.importNode(window.templates.get("pragma-group"), true);
        const disableToggle = this.getAttribute("disable-toggle");
        if (Boolean(disableToggle) === true) {
            const node = instance.querySelector(".pragma-group-expand-button");
            node.parentNode.removeChild(node);
        }
        
        this.attachShadow({mode: 'open'}).appendChild(instance.cloneNode(true));
    }

    setGroupTitle() {
        const h2Element = this.shadowRoot.querySelector("h2");
        if (h2Element != null) {
            h2Element.innerText = this.title;
        }
    }

    setToggleButton() {
        const toggleButtonElement = this.shadowRoot.querySelector(".pragma-group-expand-button");
        if (toggleButtonElement != null) {
            this.toggleHandler = this.toggleGroup.bind(this);
            toggleButtonElement.addEventListener("click", this.toggleHandler)
        }
    }

    toggleGroup() {
        if (this.expanded == "false") {
            this.setAttribute("expanded", "true");
        }
        else {
            this.setAttribute("expanded", "false");
        }
    }
}

customElements.define('pragma-group', PragmaGroup);