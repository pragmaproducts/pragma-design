export class BreadcrumbNavigationMediator {

    constructor() {
        this.navigatedHandler = this._navigate.bind(this);
        window.eventEmitter.on("navigate", this.navigatedHandler);

        this._urlChangedHandler = this._urlChanged.bind(this);
        window.addEventListener("hashchange", this._urlChangedHandler);

        this.store = window.draftStore;
        this.storeKey = "navigation";
        this._breadcrumbNavigation = false;
    }

    dispose() {
        window.eventEmitter.remove("navigate", this.navigatedHandler);
        this.navigatedHandler = null;
        delete this.store;
        this.storeKey = null;
        this.itemAddedCallback = null;
        this.clearCallback = null;
        this.itemUpdatedCallback = null;

        window.removeEventListener("hashchange", this._urlChangedHandler);
        this._urlChangedHandler = null;
        this._breadcrumbNavigation = null;
    }

    _getLastItem() {
        const data = this.data();
        if (data == null || data.length === 0) return;
        return data[data.length - 1];
    }

    _navigate(event) {
       
        const lastItem = this._getLastItem();
        this._breadcrumbNavigation = true;
        const item = {
            remote: event.message.remote,
            context: event.message.context || event.message.view,
            view: event.message.view
        };

        if (lastItem == null || lastItem.parameters.remote !== item.remote || lastItem.parameters.view !== event.message.view) {
            return this.add(event.url, item);
        }

        if (lastItem.parameters.remote === item.remote && lastItem.parameters.view === item.view && item.context !== lastItem.parameters.context) {
            this._breadcrumbNavigation = false;
            return this.update(event.url, lastItem.key, item);
         
        }
    }

    _urlChanged() {
        if (this._breadcrumbNavigation === false) {
            const lastItem = this._getLastItem();
            const parts = window.location.hash.split("/");
            if (lastItem == null || parts[1] != null && parts[1] !== lastItem.parameters.remote || parts[0].substring(1) !== lastItem.parameters.view ) {
                this.store.clear(this.storeKey);
                if (this.clearCallback != null) {
                    this.clearCallback();
                }    
            } 
        }
        this._breadcrumbNavigation = false;
    }

    add(key, item) {
        this.store.add(this.storeKey, key, item);
        if (this.itemAddedCallback != null) {
            this.itemAddedCallback(key, item);
        }
    }

    data() {
        return this.store.data(this.storeKey);
    }

    perform() {
        this._breadcrumbNavigation = true;
        return true;
    }

    remove(key) {
        this.store.remove(this.storeKey, key);
    }

    update(key, oldKey, item) {
        this.store.update(this.storeKey, key, oldKey, item);
        if (this.itemUpdatedCallback != null) {
            this.itemUpdatedCallback(key, oldKey, item);
        }
    }
}
