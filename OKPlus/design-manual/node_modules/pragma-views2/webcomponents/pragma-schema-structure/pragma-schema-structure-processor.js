import {HierarchicalItem} from "./../../lib/hierarchical-item.js";

export class PragmaSchemaStructureProcessor {
    newModel(title) {
        return {
            title: title
        }
    }
    
    process(schema) {
        this.schema = schema;
        try {
            const element = {
                element : "view",
                elements: schema.body.elements
            };

            this.processElement(element);
        }
        finally {
            delete this.schema;
        }
    }
    
    processElement(element, parentItem) {
        if (this[element.element] != null) {
            return this[element.element](element, parentItem);
        }
    }
    
    processElements(elements, parentElement) {
        for (let element of elements) {
            this.processElement(element, parentElement);
        }
    }

    processTemplate(id, parentItem) {
        const template = this.schema.templates.find(item => item.id == id);
        this["template"](template, parentItem);
    }

    ["view"](element) {
        const item = new HierarchicalItem({title:  "view"}, true, true, 0);
        this.processElements(element.elements, item);
        return item;
    }

    ["template"](element, parentItem) {
        this.processElements(element.elements, parentItem);
    }

    ["master-detail"](element, parentItem) {
        this.processElements(element.detail, parentItem)
    }

    ["tabsheet"](element, parentItem) {
        const item = new HierarchicalItem({title: "tabsheet"}, true, true, parentItem.depth + 1);
        for (let tab of element.elements) {
            const childItem = new HierarchicalItem({title: "tab", template: tab.template}, true, true, parentItem.depth + 2);
            this.processTemplate(tab.template, childItem);
            item.addItem(childItem);
        }

        parentItem.addItem(item)
    }
}