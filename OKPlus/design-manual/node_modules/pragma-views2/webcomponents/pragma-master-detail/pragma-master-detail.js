import {isPortrait} from "../../lib/device-helper.js";

class PragmaMasterDetail extends HTMLElement {
    get isMasterVisible() {
        return this._isMasterVisible;
    }

    set isMasterVisible(newValue) {
        this._isMasterVisible = newValue;
        this.updateMasterVisiblity();
    }

    get uiGraph() {
        return this._uiGraph;
    }

    set uiGraph(newValue) {
        this._uiGraph = newValue;
    }

    get uiState() {
        return this._uiState;
    }

    set uiState(newValue) {
        this._uiState = newValue;
        if(this._uiGraph != null && this.path != null) {
            this._uiGraph.setChildrenStateForPath(this.path, newValue);
        }
    }

    get path() {
        return this._path;
    }

    set path(newValue) {
        this._path = newValue;
    }

    connectedCallback() {
        const isMasterVisibleAttribute = this.getAttribute("is-master-visible");
        this.isMasterVisible = isMasterVisibleAttribute == null ? true : isMasterVisibleAttribute == "true";
        this.initTemplate();
        this.isMasterVisible = isPortrait() === false;
        
        this.isLandscapeHandler = this.landscape.bind(this);
        this.splitterIcon.addEventListener("click", this.toggleMaster.bind(this));
        this.dataset.stateTracking = true;
        
        window.addEventListener("resize", this.isLandscapeHandler);
    }

    disconnectedCallback() {
        this.masterElement = null;
        this.detailElement = null;
        this.splitterIcon = null;
        this.splitterElement = null;
        
        window.removeEventListener("resize", this.isLandscapeHandler);
        
        this.isLandscapeHandler = null;
    }

    initTemplate() {
        const instance = document.importNode(window.templates.get("master-detail"), true);
        this.attachShadow({mode: 'open'}).appendChild(instance.cloneNode(true));
        this.masterElement = this.shadowRoot.querySelector(".master");
        this.detailElement = this.shadowRoot.querySelector(".detail");
        this.splitterElement = this.shadowRoot.querySelector(".md-splitter");
        this.splitterIcon = this.shadowRoot.querySelector("#splitter-icon"); 
        this.updateMasterVisiblity();
    }


    updateMasterVisiblity() {
        if (this.masterElement) {
            if (this.isMasterVisible) {
                this.classList.remove("master-closed")
            }
            else {
                this.classList.add("master-closed")
            }
        }
    }

    toggleMaster() {
        this._isMasterVisible = !this._isMasterVisible;
        
        if(this._isMasterVisible) {
            this.animateMasterIn();
        }
        else {
            this.animateMasterOut();
        }
    }

    onMessage(params){
        if (params.message == "toggle"){
            this.isMasterVisible = !this.isMasterVisible;
        }
    }
    
    animateMasterOut() {
        this.masterElement.classList.add("master-out");
        this.masterElement.addEventListener("transitionend", () => {
            this.classList.add("master-closed");
        }, { once: true });
    }
    
    animateMasterIn() {
        this.classList.remove("master-closed");
        
        requestAnimationFrame(() => {
            this.masterElement.classList.remove("master-out");
        });
    }
    
    landscape() {
        if(isPortrait() === false) {
            this._isMasterVisible = true;
            this.animateMasterIn();
        }
    }
}

customElements.define('pragma-master-detail', PragmaMasterDetail);