import {BaseElement} from "./../../baremetal/lib/base-element.js";
import {ComponentUiStates} from "../../lib/component-ui-states.js";

class PragmaSplitView extends BaseElement {

    constructor() {
        super();
    }

    get visible() {
        return this.getAttribute("visible") || this._visible;
    }

    set visible(newValue) {
        if (newValue === this._visible) return;
        this._visible = newValue;
        const fn = this._visible ? this._showRight.bind(this): this._hideRight.bind(this);
        fn();
        this._notifyChildrenRight(this._visible ? ComponentUiStates.active: ComponentUiStates.suspended);
    }

    _showRight() {
        this.classList.add("visible");
        this.rightSlot.removeAttribute("aria-hidden");

        // Note Gerhard: Temporary code to handle state changes

        this.rightElement.addEventListener("transitionend",() => {
            // Only margin left container when right animated
            this.classList.add("left-spaced");
        }, {once:true});
    }

    _hideRight() {
        this.classList.remove("visible", "left-spaced");

        this.rightElement.addEventListener("transitionend",() => {
            if (this.visible === false) {
                this.rightSlot.setAttribute("aria-hidden", "true");
            }
        }, {once:true});
    }

    _notifyChildren(uiState) {
        if (this._uiGraph == null || this.path == null) return;
            if(this.visible === true) {
                this._uiGraph.setChildrenStateForPath(this.path, uiState, this.rightSlot);
            }
            this._uiGraph.setChildrenStateForPath(this.path, uiState, this.leftSlot);
    }

    _notifyChildrenRight(uiState) {
        if (this._uiGraph == null || this.path == null) return;
        this._uiGraph.setChildrenStateForPath(this.path, uiState, this.rightSlot);
    }

    _initTemplate() {
        const instance = document.importNode(window.templates.get("pragma-split-view-template"), true);
        this.rightElement = instance.querySelector("#pragma-split-view-right");
        this.leftSlot = this.querySelector("[slot='left']");
        this.rightSlot = this.querySelector("[slot='right']");
        this.attachShadow({mode: 'open'}).appendChild(instance.cloneNode(true));
    }

    _setRightSize(){
        const percentageSize = this.getAttribute("split-percentage");
        const rightPercentageSize = `${percentageSize}%`;
        const slot = this.children[1];

        this.style.setProperty("--split-percentage", rightPercentageSize);
        slot.setAttribute("aria-hidden", "true");
    }

    connectedCallback() {
        super.connectedCallback();
        this._initTemplate();
        this._setRightSize();
        this._visible = false;
    }

    disconnectedCallback() {
        super.disconnectedCallback();
        this.rightElement = null;
        this.rightSlot = null;
    }

    onMessage(params) {
        if (this[params.message] != null) {
            this[params.message](params);
        }
    }

    toggle() {
        this.visible = !this.visible;
    }

    hide() {
        this.visible = false;
    }

    get uiState() {
        if(this._uiState == null && this.visible === false) {
            return ComponentUiStates.suspended;
        }
    }

    set uiState(newValue) {
        this._uiState = newValue;
        this._notifyChildren(newValue);
    }

    get uiGraph() {
        return this._uiGraph;
    }

    set uiGraph(newValue) {
        this._uiGraph = newValue;
    }

    get path() {
        return this._path;
    }

    set path(newValue) {
        this._path = newValue;
    }

}


customElements.define('pragma-split-view', PragmaSplitView);