export class FocusBase {
    /***
     * @param instance The visualization you wish to apply focus to.
     */
    constructor(instance) {
        this._instance = instance;
        this._index = 0;
        this._rowIndex = 0;
    }

    dispose() {
        delete this._index;
        delete this._rowIndex;
        delete this._instance;
    }

    /***
     * The focused index vertically.
     * @returns {number}
     */
    get index() {
        return this._index;
    }

    /***
     * @param {number} value
     */
    set index(value) {
        this._index = value;
    }

    /***
     * @returns {BaseNavigation|null}
     */
    get navigation() {
        return this._instance.navigation;
    }

    /***
     * The focused index horizontally.
     * @returns {number}
     */
    get rowIndex() {
        return this._rowIndex;
    }

    /***
     * @param {number} value
     */
    set rowIndex(value) {
        this._rowIndex = value;
    }

    /***
     * Do the actual focus, setting prevent scroll to true to cater for advanced virtualizations
     * virtual scrolling, we scroll via code.
     * @param element
     * @private
     */
    _focus(element) {
        element.focus({ preventScroll: true });
    }

    /***
     * Helper to focus a horizontal row.
     * @param {Element} element
     * @private
     */
    _focusRow(element) {
        if (element == null) return;
        this._index = element.__dataIndex || 0;
        this._focus(element);
    }

    /***
     * Helper to focus row items usually horizontal cells.
     * @param {Element} element
     * @param {number} newIndex
     * @private
     */
    _focusRowItem(element, newIndex) {
        this._rowIndex = newIndex;
        this._focus(element);
    }

    /***
     * Sets focus to either the passed element or focus index.
     * @param {Element|null} element
     */
    focus(element) {
        if (element == null) {
            const row = this.navigation.getRowByIndex(this.index);
            this._focusRow(row);
        } else {
            this._focusRow(element);
        }
    }

    /***
     * Moves focus down one. Setting focus index -1 
     */
    focusDown() {
        if (this.index < this.navigation.itemCount) {
            this._index++;
        }
    }

    /**
     * Moves focus one left, rowIndex -1
     */
    focusLeft() {
        if (this.rowIndex - 1 >= 0) {
            this._rowIndex -= 1;
        }
    }

    /**
     * Moves focus one right, focusIndex + 1
     */
    focusRight() {
        const row = this.navigation.getRowByIndex(this.index);
        if (this.rowIndex + 1 < row.children.length) {
            this._rowIndex += 1;
        }
    }

    /**
     * Moves focus one up, index -1
     */
    focusUp() {
        if (this.index > 0) {
            this._index--;
        }
    }
}