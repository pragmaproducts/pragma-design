import {ElementStore} from "./../../baremetal/lib/virtualization/element-store.js";
import {createInflatorFunction} from "../../baremetal/lib/virtualization/inflation-utils.js";

/**
 * This is a class that generates a template depending on the condition of generator
 */
export class TemplateFactory {
    constructor(templates, key, formatters) {
        this.map = new Map();
        this._setData(templates, key, formatters);
    }

    dispose() {
        this._clearData();
        this.map = null;
    }

    _setData(templates, key, formatters) {
        for (const template of templates) {
            this.addTemplate(template, key, formatters);
        }
    }

    _clearData() {
        for (const template of this.map.keys()) {
            this.removeTemplate(this.map.get(template));
        }
    }

    /**
     * Add a template ... to be continued
     * @param template: HTML template
     * @param key: key on map to be used e.g. condition
     * @param formatters: array of formatters
     */
    addTemplate(template, key, formatters) {
        let attributeValue = template.getAttribute(key);
        const elementStore = this._createElementStore(template);
        let formattingCode = [];
        if (formatters != null) {
            for (let formatter of formatters) {
                formattingCode.push(formatter.getCode());
            }
        }
        const params = {
            store: elementStore,
            inflate: this._createInflateFunction(elementStore.store[0], formattingCode),
            conditionFn: attributeValue != null ? window.compiler.add(attributeValue, false) : null
        };

        this.map.set(attributeValue || template.getAttribute("type"), params)
    }

    _createElementStore(template) {
        return new ElementStore(template.cloneNode(true).content);
    }

    _createInflateFunction(item, formattingCode) {
        return createInflatorFunction(item, formattingCode)
    }

    removeTemplate(template) {
        template.store.dispose();
        template.store = null;
        if (template.conditionFn != null) {
            window.compiler.remove(template.conditionFn);
            template.conditionFn = null;
        }
        template.inflate = null;
    }

    
    getTemplateForItem(item) {
        for (const key of this.map.keys()) {
            const template = this.map.get(key);
            if ((key !== "default" && key !== "group-default" && template.conditionFn == null)
                || template.conditionFn != null && template.conditionFn(item) === true) {
                return {key, value: template}
            }
        }

        const type = item.hasChildren && this.map.has("group-default") ? "group-default" : "default";

        return {
            key: type,
            value: this.map.get(type)
        }
    }

    get(key) {
        return this.map.get(key) || this.map.get("default");
    }
}