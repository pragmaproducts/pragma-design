import {SelectionMediator} from "./selection-mediator.js";
import {getValueOnPath} from "./../../baremetal/lib/objectpath-helper.js";

export class TypeSelectionMediator  extends SelectionMediator{
    constructor(dataSource, selectionReference, allowMultipleSelect, typeExpression) {
        super(dataSource, selectionReference, allowMultipleSelect);
        this.typeExpression = typeExpression;
    }

    dispose() {
        super.dispose();
        window.compiler.remove(this.typeFn);
        this.typeFn = null;
    }

    _multipleSelect(item, selected) {
        const type = getValueOnPath(this.getModel(item),this.typeExpression);
        if(this.dataSource.selectedItemsMap.size > 0 && getValueOnPath(this.dataSource.selectedItemsMap.values().next().value, this.typeExpression) !== type){
            this.dataSource.selectedItemsMap.clear();
        }
        this._setDataSourceSelection(new Map([[this.getItemId(item), item]]), selected);
        this.dataSource.selectionChanged();
    }

    addToVisibleSelection(index, items) {
        let counter = index + 1;
        for(const child of items) {
            if(this.dataSource.selectedItemsMap.has(this.getItemId(child))) {
                this.visibleSelection[counter] = child;
            }
            counter++;
        }
    }

    removeFromVisibleSelection(index, items) {
        let counter = index + 1;
        for(const child of items) {
            if(this.dataSource.selectedItemsMap.has(this.getItemId(child))) {
                delete this.visibleSelection[counter];
            }
            counter++;
        }
    }

    checkIfItemShouldBeSelectedRecursive(item, idMap) {
        if (idMap == null) return false;
        if (item.items != null && item.items.length > 0) {
            for (const child of item.items) {
                this.checkIfItemShouldBeSelectedRecursive(child, idMap);
            }
        }
        const selectedItem = idMap.get(this.getItemId(item));
        item.__isSelected = selectedItem != null;
        return item.__isSelected;
    }

}