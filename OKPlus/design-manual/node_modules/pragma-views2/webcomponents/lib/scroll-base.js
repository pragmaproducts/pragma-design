export class ScrollBase {
    constructor(instance) {
        this._instance = instance;
    }

    dispose() {
        delete this._instance;
    }

    get navigation() {
        return this._instance.navigation;
    }

    get scroller() {
        return this._instance.scroller;
    }

    get scrollerHeight() {
        return this._instance.scroller.clientHeight;
    }

    get scrollerWidth() {
        return this._instance.scroller.clientWidth;
    }

    // noinspection JSUnusedGlobalSymbols
    async BottomLeft(index) {
        await this._scrollFn(index, (index, scrollerHeight) => {
            const result = (this.navigation.getIndexVerticalPosition(index)) - (scrollerHeight - this.navigation.getIndexHeight(index));
            return result < 0 ? 0 : result;
        }, (index) => {
            return this.navigation.getIndexHorizontalPosition(index);
        });
    }

    // noinspection JSUnusedGlobalSymbols
    async BottomRight(index) {
        await this._scrollFn(index, (index, scrollerHeight) => {
            const result = (this.navigation.getIndexVerticalPosition(index)) - (scrollerHeight - this.navigation.getIndexHeight(index));
            return result < 0 ? 0 : result;
        }, (index) => {
            return this.navigation.getIndexHorizontalPosition(index) -
                (this.scrollerWidth - this.navigation.getIndexWidth(index));
        });
    }

    // noinspection JSUnusedGlobalSymbols
    async TopLeft(index) {
        await this._scrollFn(index, (index) => {
            return this.navigation.getIndexVerticalPosition(index);
        }, (index) => {
            return this.navigation.getIndexHorizontalPosition(index);
        });
    }

    // noinspection JSUnusedGlobalSymbols
    async TopRight(index) {
        await this._scrollFn(index, (index) => {
            return this.navigation.getIndexVerticalPosition(index);
        }, (index) => {
            return this.navigation.getIndexHorizontalPosition(index) -
                (this.scrollerWidth - this.navigation.getIndexWidth(index));
        });
    }

    async _scrollFn(index, scrollTopFn, scrollLeftFn) {
        const renderer = this._instance.renderer;
        if (this.verticalScrollRequired(index)) {
            const scrollTop = scrollTopFn.call(this, index, this.scrollerHeight);
            await renderer.scrollItems(scrollTop, this.scroller.scrollLeft);
            this.updateVirtualScrollBars(scrollTop, this.scroller.scrollLeft);
        }
        if (this.horizontalScrollRequired(index)) {
            const scrollLeft = scrollLeftFn.call(this, index);
            await renderer.scrollItems(this.scroller.scrollTop, scrollLeft);
            this.updateVirtualScrollBars(this.scroller.scrollTop, scrollLeft);
        }
    }

    horizontalScrollRequired(index) {
        return this.navigation.isIndexInHorizontalView(index) === false;
    }

    async scroll(verticalDirection, horizontalDirection, index) {
        await this[`${verticalDirection + horizontalDirection}`](index);
    }

    /***
     * Sets the virtual scrollers position.
     * @param scrollTop in pixels.
     * @param scrollLeft in pixels.
     */
    updateVirtualScrollBars(scrollTop, scrollLeft) {
        this._instance.scroller.scrollTop = scrollTop;
        this._instance.scroller.scrollLeft = scrollLeft;
    }

    verticalScrollRequired(index) {
        return this.navigation.isIndexInVerticalView(index) === false;
    }
}