import {BaseNavigation} from "./base-navigation.js";
import {Platform} from "./platform.js";

export class CollectionNavigation extends BaseNavigation {

    constructor(element) {
        super(element);

        this.extendedItem = null;
        this.focusedItem = null;
        this.combinations = new Map([
                ["shift + ArrowDown", this.extendSelectionDown],
                ["shift + ArrowUp", this.extendSelectionUp],
                ["shift +  ", this.toggleFocusedItemSelection]
            ]
        );

        // Collection spesific keycodes
        this.keyCodes.home = "Home";
        this.keyCodes.end = "End";
        this.platform = new Platform();
        this._keydownHandler = this._keydown.bind(this);

        window.addEventListener('keydown', this._keydownHandler);
    }

    dispose() {
        super.dispose();

        // disposing event binding
        window.removeEventListener('keydown', this._keydownHandler);

        // disposing handlers 
        this._keydownHandler = null;

        // disposing variables
        this.extendedItem = null;
        this.focusedItem = null;
        this.combinations = null;
        this.platform = null;
    }

    /**
     * Keydown handler
     * Checks if the pressed key is space, home or end in order to stop the default scroll behaviour
     * @param event
     * @private
     */
    _keydown(event) {
        if(event.key === this.keyCodes.home || event.key === this.keyCodes.end) {
            event.preventDefault();
        }
    }

    /**
     * Sets tabindex to -1 and removes focus from the element
     * @param element: HTMLElement to remove focus from
     */
    blur(element) {
        if (element) {
            element.setAttribute("tabindex", "-1");
            element.blur();
        }
    }

    /**
     * Extends selection one row down from the focused item
     */
    extendSelectionDown() {

        if (this.extendedItem == null) {
            this.extendedItem = this.focusedItem.nextElementSibling;
        }
        else {
            this.extendedItem = this.extendedItem.nextElementSibling;

            if (this.extendedItem === this.focusedItem) {
                this.extendedItem = this.extendedItem.nextElementSibling;
            }
        }

        this.element.toggleItemSelection(this.extendedItem);
    }

    /**
     * Extends selection one row up from the focused item
     */
    extendSelectionUp() {

        if (this.extendedItem == null) {
            this.extendedItem = this.focusedItem.previousElementSibling;
        }
        else {
            if (this.extendedItem === this.focusedItem) {
                this.extendedItem = this.focusedItem.previousElementSibling;
            }
        }

        this.element.toggleItemSelection(this.extendedItem);
        this.extendedItem = this.extendedItem.previousElementSibling;
    }

    /**
     * Sets the tabs index to 0 and focuses the element
     * @param element: HTMLElement to set focus to
     */
    focus(element) {
        if (element) {
            element.setAttribute("tabindex", "0");
            element.focus();
        }
    }

    /**
     * Sets an element as the focused element
     * @param element
     */
    setFocusedElement(element) {
        
        if (this.focusedItem != null) {
            this.blur(this.focusedItem);
        } 
        
        this.focus(element);
        this.focusedItem = element;
        this.extendedItem = null;
    }

    /**
     * Returns the keycombination from the event
     * @param event
     * @returns {*}
     */
    getCombination(event) {
        return this.platform.keycombo(event);
    }

    /**
     * Returns the key combination that was pressed
     * @param event
     */
    keyCombination(event) {
        const combo = this.getCombination(event);

        if (combo && this.combinations.has(combo)) {
            const shortcut = this.combinations.get(combo);
            shortcut.apply(this, [event]);
        }
    }

    /**
     * Toggles the selection of the focused item
     */
    toggleFocusedItemSelection() {
        this.element.toggleItemSelection(this.focusedItem)
    }
}