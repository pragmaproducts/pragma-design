import {VisualizationBase} from './visualization-base.js';

export class HierarchicalBase extends VisualizationBase {

    /**
     * Finds a node in the collection matching the value for the property supplied
     * @param data
     * @param property
     * @param value
     */
    find(data, property, value) {
        
        for (let item of data) {
            if (item.model[property] == value) {
                return item;
            } 
            
            //NOTE JN: Cater for when hasChildren is not set but items has dat
            if (item.hasChildren === true || Array.isArray(item.items) === true) {
                const result = this.find(item.items, property, value);
                
                if (result != null) {
                    return result;
                } 
            } 
        } 
    }

    /**
     * Finds the parent of a specific node
     * @param node
     * @param item
     * @returns {*}
     */
    findParent(node, item) {
        const result = node.items.find(t => t == item);
        
        if (result != null) {
            return node;
        } 
        
        for (let e of node.items) {
            if (e.hasChildren === true) {
                const parent = this.findParent(e, item);
                
                if (parent != null) {
                    return parent;
                } 
            } 
        } 
    }
}