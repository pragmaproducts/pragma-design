import {HierarchicalBase} from './hierarchical-base.js';
import {setAttribute} from "./../../baremetal/lib/template-inflator.js";

export class CollectionBase extends HierarchicalBase {

    expand(key, depth) {
        const items = this._findItemsByDepth(depth, key);
        const requestData = {
            id: key,
            dataset: items,
            size: this._batchSize,
            page: 0
        };

        this.requestBatch(requestData);
    }

    selectAll() {
        this.datasource.selectedId = this._findAllIds();
    }

    _findAllIds() {
        let ids = [];
        for (const item of this.items.values()) {
            if (item.hasChildren !== true) {
                ids.push(this._getItemId(item));
            }
        }
        return ids;
    }

    removeElement(item) {
        const element = this.querySelector(`[data-key='${item.key}']`);
        if (element != null) {
            element.parentNode.removeChild(element);
        }
    }

    isElementSelected(element) {
        return element.getAttribute("aria-selected") === "true";
    }

    applySelection() {
        super.applySelection();
        const allLeafItems = this.querySelectorAll(".visualization-item");

        for (const element of allLeafItems) {

            const item = this.items.get(element.dataset.key);
            const rowIsSelected = this.isElementSelected(element);
            if (rowIsSelected === false && item.isSelected === true) {
                this.setElementState(element, true);
            }

            if (rowIsSelected === true && item.isSelected !== true) {
                this.setElementState(element, false);
            }
        }
    }

    setElementState(element, isSelected) {
        const input = element.querySelector("input");
        input.checked = isSelected;
        setAttribute(element, {"aria-selected": isSelected});
    }
}
