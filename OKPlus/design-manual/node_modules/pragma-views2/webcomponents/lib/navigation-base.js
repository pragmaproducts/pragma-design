export class NavigationBase {
    constructor(instance) {
        this._instance = instance;
    }

    dispose() {
        delete this._instance;
    }

    get itemCount() {
        return this._instance.dataStore.data.length - 1;
    }

    get rowChildCount() {
        return this._instance.columns.length;
    }

    get scroller() {
        return this._instance.scroller;
    }

    get scrollerHeight() {
        return this._instance.scroller.clientHeight;
    }

    get scrollerWidth() {
        return this._instance.scroller.clientWidth;
    }

    /***
     * Collapses an expandable row.
     * @param {number} index
     * @returns {Promise<boolean>}
     */
    async collapse(index) {
        const row = this.getRowByIndex(index);
        if (this.isExpanded(index) === true) {
            await this._instance.toggleExpand(row);
            return true;
        }
        return false;
    }

    /***
     * @param {*} dataItem
     * @param {*} targetDataItem
     * @returns {boolean}
     */
    dataStoreItemsHaveSameParent(dataItem, targetDataItem) {
        const dataItemIndex = this._instance.dataStore.data.indexOf(dataItem);
        const targetDataItemIndex = this._instance.dataStore.data.indexOf(targetDataItem);
        const dataItemParentIndex = this.getParentIndex(dataItemIndex);
        const targetDataItemParentIndex = this.getParentIndex(targetDataItemIndex);
        return dataItemParentIndex === targetDataItemParentIndex;
    }

    /***
     * Expands an expandable row.
     * @param {number} index
     * @returns {Promise<boolean>}
     */
    async expand(index) {
        const row = this.getRowByIndex(index);
        if (this.isExpandable(index) && this.isExpanded(index) === false) {
            await this._instance.toggleExpand(row);
            return false;
        }
        return this.isExpanded(index) === true;
    }

    /***
     * Returns the data store item by index.
     * @param {number} index
     * @returns {*}
     */
    getDataStoreItemByIndex(index) {
        return this._instance.dataStore.data[index];
    }

    getIndexHeight(index) {
        return this._instance.getItemDimensions(index).height;
    }

    /***
     * Gets the items data store parent index
     * @param {number} index
     * @returns {number} The parent index or -1 if it could not be found.
     */
    getParentIndex(index) {
        const item = this.getDataStoreItemByIndex(index);
        const parentItem = this._instance.dataStore.data.find(o => o.items != null && o.items.indexOf(item) !== -1);
        return this._instance.dataStore.data.indexOf(parentItem);
    }

    /***
     * Return the actual row element by index.
     * @param {number} index
     * @returns {Element}
     */
    getRowByIndex(index) {
        const itemsArray = Array.from(this._instance.container.children);
        return itemsArray.find(o => o.__dataIndex === index);
    }

    /***
     * @param {number} index
     * @returns {boolean}
     */
    isExpandable(index) {
        const item = this.getDataStoreItemByIndex(index);
        return item.hasChildren === true || (item.model != null && item.model.expandable === true);
    }

    /***
     * @param {number} index
     * @returns {boolean}
     */
    isExpanded(index) {
        const item = this.getDataStoreItemByIndex(index);
        return item.__isExpanded === true;
    }
}