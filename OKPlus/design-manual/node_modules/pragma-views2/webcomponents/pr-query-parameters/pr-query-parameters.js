import {BaseElement} from "./../../baremetal/lib/base-element.js";
import {DatasetFactory} from "./../../lib/dataset-factory.js";

export class QueryParameters extends BaseElement {
    connectedCallback() {
        super.connectedCallback();

        this.initTemplate();
        
        this.parametersForm.context = this;
    }
    
    disconnectedCallback() {
        if (this.dsFactory != null) {
            this.dsFactory.dispose();
            this.dsFactory = null;
        }

        this.parametersForm = null;
        
        delete this._datasource;

        super.disconnectedCallback();
    }

    get datasource() {
        return this._datasource;
    }
    
    set datasource(value) {
        this._datasource = value;
        
        if (this._datasource != null && this._datasource.definition != null && this._datasource.definition.parameters != null) {
            this._initializeView(this._datasource.definition.parameters);
        }
    }
    
    /**
     * Returns a valid field name by removing @ character from start of parameter name
     * @param parameterName
     * @returns {*}
     * @private
     */
    _getFieldName(parameterName) {
        return parameterName.indexOf("@") === -1 ? parameterName : parameterName.slice(1);
    }

    /**
     * Generate schema definitions for variables, fields and elements
     * @param parameters
     * @param dataSetName
     * @returns {{variables: {titles}, elements: Array, fields: Array}}
     * @private
     */
    _getSchemaDefinitions(parameters, dataSetName) {
        let titles = {};
        let variables = {titles: titles};
        const fields = [];
        const elements = [];

        const keys = Object.keys(parameters);
        for (const key of keys) {
            if (key[0] !== '@') continue;
            const fieldName = this._getFieldName(key);
            titles[fieldName] = fieldName;

            fields.push({
                name: fieldName,
                default: parameters[key],
                validations: {
                    required: {type: "required", origin: "api", value: true}
                }
            });

            elements.push({
                element: "input",
                title: `@titles.${fieldName}`,
                field: `${dataSetName}.${fieldName}`,
                default: parameters[key]
            });
        }
        
        return {
            fields: fields,
            variables: variables,
            elements: elements
        };
    }
    
    /**
     * Generate schema, instantiate the data set and set initial values
     * @param parameters
     * @private
     */
    _initializeView(parameters) {
        const dataSetName = "model";
        const schemaParts = this._getSchemaDefinitions(parameters, dataSetName);
        this.parametersForm.schema = {
            variables: schemaParts.variables,
            datasets: [
                {
                    id: 0,
                    name: dataSetName,
                    fields: schemaParts.fields
                }
            ],
            body: {
                elements: schemaParts.elements
            }
        };

        const options = {
            schema: this.parametersForm.schema
        };

        this.dsFactory = new DatasetFactory(options);
        this.parametersForm.model = this.dsFactory.createDataSet(0);
        
        this.parametersForm.model.setInitialValues({});
    }

    /**
     * Initialize component template
     */
    initTemplate() {
        const instance = document.importNode(window.templates.get("pr-query-parameters-template"), true);
        this.appendChild(instance);
    }
}

customElements.define('pr-query-parameters', QueryParameters);