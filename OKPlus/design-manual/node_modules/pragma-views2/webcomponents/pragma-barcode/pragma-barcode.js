import {BaseElement} from "../../baremetal/lib/base-element.js";
import {loadScript, removeScript} from "./../component-loader.js";
import {isMobile} from "../../lib/device-helper.js";

class PragmaBarcode extends BaseElement {
    constructor() {
        super();
        this.classList.add("dialog");
        this.classList.add("closed");
        this.setAttribute("aria-hidden", "true");
        this.showDialogHandler = this.showDialog.bind(this);
        this.ready = false;
        this.displayHandler = this.display.bind(this);
        window.eventEmitter.on("display-barcode-scanner", this.displayHandler);
    }

    async connectedCallback() {
        super.connectedCallback();
        
        this._barcodeScanScriptPath = './third-party/wasm/a.out.js';
        this._script = await loadScript(this._barcodeScanScriptPath, true, () => {
            if (this._script != null) {
                this.ready = true;
                this._script.onload = null;
            }
        });
    }
    
    async disconnectedCallback() {
        super.disconnectedCallback();
        window.eventEmitter.remove("show-barcode", this.showDialogHandler);
        window.eventEmitter.remove("display-barcode-scanner", this.displayHandler);
        this.displayHandler = null;
        this._ready = null;
        await removeScript(this._barcodeScanScriptPath);
        this._barcodeScanScriptPath = null;
        this._script = null;
        this._video.removeEventListener("loadeddata", this.videoInitializedHandler);
        this._video = null;
        this._canvas = null;
        this._context = null;
        this._barcode_api = null;
        this._constraints = null;
        this.showDialogHandler = null;
        this.videoInitializedHandler = null;
    }
    
    get barcode() {
        return this._barcode;
    }

    get ready() {
        return this._ready;
    }
    
    set ready(value) {
        this._ready = value;
        if (this._ready === true) {
            Module.onRuntimeInitialized = this.runtimeInitialized.bind(this);
            this.initialise();
        }
    }

    cancel() {
        this.unload();
    }

    /**
     * Captures frames from the camera and passes it to the barcode scan webassembly routine
     */
    captureFrames() {
        const interval = setInterval(() => {
                     if ((this._barcodeFound === true) || (this._capturing === false)) {
                         return clearInterval(interval);
                     }

                     this._context.drawImage(this._video, 0, 0, this._canvas.width, this._canvas.height);
                     const image = this._context.getImageData(0, 0, this._canvas.width, this._canvas.height);
                     this.detectSymbols(image);
                 }, 250);
    }

    detectSymbols(image) {
        // Convert the image data to grayscale
        // css??
        const grayData = [];
        const d = image.data;
        for (let i = 0, j = 0; i < d.length; i += 4, j++) {
            grayData[j] = (d[i] * 66 + d[i + 1] * 129 + d[i + 2] * 25 + 4096) >> 8;
        }

        // Put the data into the allocated buffer on the wasm heap.
        const p = this._barcode_api.create_buffer(image.width, image.height);
        Module.HEAP8.set(grayData, p);

        // Call the scanner function
        this._barcode_api.scan_image(p, image.width, image.height);

        // Clean up
        this._barcode_api.destroy_buffer(p);
    }

    display() {
        if (this.ready === true)
        {
            this.classList.remove("closed");
            this.removeAttribute("aria-hidden");
        }
    }

    initTemplate() {
        const instance = document.importNode(window.templates.get("pragma-barcode"), true);
        this.appendChild(instance);
        this._video = this.querySelector("video");
        this.videoInitializedHandler = this.videoInitialized.bind(this);
        this._video.addEventListener("loadeddata", this.videoInitializedHandler);
        this._canvas = this.querySelector("canvas");
    }

    initialise() {
        this.initTemplate();
        this.labelElements(["#btnCancel"], ["labels.cancel"], ["innerText"]);
        window.eventEmitter.on("show-barcode", this.showDialogHandler);

        this.registerEvent(this.querySelector("#btnCancel"), "click", this.cancel.bind(this));
        this.registerEvent(this.querySelector("#btnStart"), "click", this.start.bind(this));
        this.registerEvent(this.querySelector("#btnStop"), "click", this.stop.bind(this));
    }

    /**
     * Initialise the video camera
     */
    initializeVideoDevice() {
        navigator.mediaDevices.getUserMedia(this._constraints)
            .then((stream) => {
                this._video.srcObject = stream;
            })
            .catch((error) => {
                window.eventEmitter.emit("show-message", {
                    message: error,
                });
            });
    }

    async runtimeInitialized() {
        this._barcode_api = {
            scan_image: Module.cwrap('scan_image', '', ['number', 'number', 'number']),
            create_buffer: Module.cwrap('create_buffer', 'number', ['number', 'number']),
            destroy_buffer: Module.cwrap('destroy_buffer', '', ['number']),
        };

        /**
         * Set the callback function that should be called whenever a barcode is detected
         * @param symbol
         * @param data
         * @param polygon
         */
        Module['processResult'] = (symbol, data, polygon) => {
            console.log(data);
            this._barcode = data;
            this._barcodeFound = true;

            this.unload();
            window.eventEmitter.emit("show-message", {
                message: this._barcode
            });
        };

        if (isMobile()) {
            this._constraints = {
                video: {
                    facingMode: "environment",
                    width: 420,
                    height: 300
                }
            };
        }
        else {
            this._constraints = {
                video: {
                    facingMode: "user",
                    width: 420,
                    height: 300
                }
            };
        }
    }

    async showDialog(callback) {
        this.callback = callback;
        this.classList.remove("closed");
        this.removeAttribute("aria-hidden");
    }

    start() {
        this.startCapturing();
    }

    startCapturing() {
        this.initializeVideoDevice();
    }

    stop() {
        this.stopCapturing();
    }

    stopCapturing() {
        this._capturing = false;
    }

    unload() {
        this.classList.add("closed");
        this.setAttribute("aria-hidden", "true");
    }

    videoInitialized() {
        this._capturing = true;
        this._barcodeFound = false;
        this._canvas.width = this._video.videoWidth;
        this._canvas.height = this._video.videoHeight;
        this._context = this._canvas.getContext('2d');
        this.captureFrames();
    }
}

customElements.define("pragma-barcode", PragmaBarcode);