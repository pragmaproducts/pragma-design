/**
 * If we want to set a path for the style applicaiton we can add a path property
 */
export class PragmaConditionalFormatter extends HTMLElement {
    get condition() {
        return this.getAttribute("condition") || this._condition || null;
    }
    
    set condition(newValue) {
        this._condition = newValue;
    }
    
    get styleProperty() {
        return this.getAttribute("style-property") || this._styleProperty;
    }
    
    set styleProperty(newValue) {
        this._styleProperty = newValue;
    }
    
    get value() {
        return this.getAttribute("value") || this._value;
    }
    
    set value(newValue) {
        this._value = newValue;    
    }
    
    getCode(path) {
        let result = this.getExecutionCode(path);
        
        if (this.condition != null) {
            result = `if (${this.condition}) {${result}}`;
        }
        
        return result;
    }
    
    getExecutionCode(path) {
        let result = "";

        if (this.styleProperty != null) {
            const properties = this.styleProperty.split(",");
            const values = this.value.split(",");
            
            const prefix = path == null ? "element." : `element.${path}.`;

            for (let i = 0; i < properties.length; i++) {
                const property = properties[i].trim();
                const value = values[i].trim();
                
                result += `${prefix}style.${property} = '${value}';`
            }
        }
        
        return result;
    }
}

customElements.define("pragma-conditional-formatter", PragmaConditionalFormatter);
