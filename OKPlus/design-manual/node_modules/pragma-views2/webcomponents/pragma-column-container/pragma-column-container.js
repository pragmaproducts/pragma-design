import {TouchEvents} from './../lib/touch-events.js';

export class PragmaColumnContainer extends HTMLElement {
    connectedCallback() {
        this.index = 0;
        this._initTemplate();
        this._initChildren();
        this._configureTouchEvents();
    }

    disconnectedCallback() {
        this.options.swipeLeft = null;
        this.options.swipeRight = null;
        this.options = null;
        this.touchEvents.dispose();
        this.touchEvents = null;
        this.index = null;
        this.swipeIndicatorPoints = null;
    }

    /**
     * Configure touch events for component, set handlers for swipe actions
     * @private
     */
    _configureTouchEvents() {
        this.options = {
            swipeLeft: this.swipeLeftHandler.bind(this),
            swipeRight: this.swipeRightHandler.bind(this),
            transformElement: this.transformHandler.bind(this)
        };
        this.touchEvents = new TouchEvents(this.columns, this.options);
    }

    // noinspection JSMethodCanBeStatic
    /**
     * Create svg with circle as content, to be used as swipe indicator
     * @param container: container element of parent
     * @param parent: parent element newly created svg will be appended to
     * @param columnIndex
     * @private
     */
    _createSwipeElement(container, parent, columnIndex) {
        const xPoint = this._getSwipeElementXPoint(container, columnIndex);
        this.swipeIndicatorPoints.set(columnIndex, xPoint);
        
        const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        svgElement.setAttribute('xPoint', xPoint);
        
        const swipeIndicator = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        svgElement.appendChild(swipeIndicator);
        
        parent.appendChild(svgElement);
    }
    
    /**
     * Query and return the relevant swipe indicator for a specified column
     * @param columnId
     * @private
     */
    _getSwipeIndicator(columnId) {
        return this.shadowRoot.querySelector(`pager-button[aria-controls=${columnId}]`);
    }

    /**
     * Calculate svg x coordinate for svg swipe indicator
     * @param container: container element
     * @param index: parent index relative to container
     * @private
     */
    _getSwipeElementXPoint(container, index) {
        const columnCount = this.columns.children.length;
        const svgWidth = 24;
        const leftShift = (columnCount % 2 === 0) ? (svgWidth / 2) : 0;
        const center = (container.offsetWidth / 2) - (svgWidth / 2);
        const start = center - (Math.floor(columnCount / 2) * svgWidth) + leftShift;

        return (start + (index * svgWidth));
    }

    /**
     * Add relevant styles and calculated z-index so child items, so they are stacked
     * on top of each other when viewed on mobile.
     */
    _initChildren() {
        this.columns = this.querySelector('div[slot="pragma-column-container-columns"]');
        let counter = this.columns.children.length;
        const children = Array.from(this.columns.children);
        
        if (counter === 0) return;
        this.swipeIndicatorPoints = new Map();

        const pagerList = this.shadowRoot.querySelector('.pragma-column-container-swipe-indicator > .pager-list');
        pagerList.parentElement.style.zIndex = counter + 1;
        const fragment = document.createDocumentFragment();
        
        for (let child of children) {
            child.style.zIndex = counter.toString();
            child.classList.add('column', 'container', 'horizontal', 'fullsize', 'spaced-equal');
            const columnIndex = children.indexOf(child);
            const columnId = `column-${columnIndex}`;
            child.setAttribute('id', columnId);
            
            const pagerButton = document.createElement('pager-button');
            pagerButton.classList.add('tabsheet-button');
            
            if (counter === this.columns.children.length) {
                pagerButton.classList.add('active-swipe-indicator');
            } 
            
            pagerButton.setAttribute('aria-controls', columnId);
            this._createSwipeElement(pagerList, pagerButton, columnIndex);
            fragment.appendChild(pagerButton);

            counter -= 1;
        }

        pagerList.appendChild(fragment);
    }

    /**
     * Initialise template
     * @private
     */
    _initTemplate() {
        const instance = document.importNode(window.templates.get("pragma-column-container-template"), true);
        this.attachShadow({mode: 'open'}).appendChild(instance.cloneNode(true));
    }

    /**
     * Adds column-hidden style for current child item so it is not visible, when new child index is valid.
     */
    swipeLeftHandler() {
        const newIndex = this.index + 1;
        if (newIndex < this.columns.children.length) {
            window.requestAnimationFrame(() => {
                const column = this.columns.children[this.index];
                column.classList.add('column-hidden');
                const swipeIndicator = this._getSwipeIndicator(column.id);
                swipeIndicator.classList.remove('active-swipe-indicator');
                
                const newColumn = this.columns.children[newIndex];
                const newSwipeIndicator = this._getSwipeIndicator(newColumn.id);
                newSwipeIndicator.classList.add('active-swipe-indicator');
                
                this.index = newIndex;
            });
        }
    }

    /**
     * Removes column-hidden style from current child item so it is visible, when new child index is valid.
     */
    swipeRightHandler() {
        const newIndex = this.index - 1;
        if (newIndex >= 0) {
            window.requestAnimationFrame(() => {
                const oldColumn = this.columns.children[this.index];
                const oldSwipeIndicator = this._getSwipeIndicator(oldColumn.id);
                oldSwipeIndicator.classList.remove('active-swipe-indicator');

                const newColumn = this.columns.children[newIndex];
                newColumn.classList.remove('column-hidden');
                const newSwipeIndicator = this._getSwipeIndicator(newColumn.id);
                newSwipeIndicator.classList.add('active-swipe-indicator');
                
                this.index = newIndex;
            });
        }
    }

    /**
     * Handler for setting transform value on a specified target element
     * @param value: transform value
     * @private
     */
    transformHandler(value) {
        const targetElement = this.columns.children[this.index];
        if (targetElement == null) {
            console.error('Unable to identify target element for transform animation.');
            return;
        }
        
        targetElement.style.transform = value;
    }
}

customElements.define("pragma-column-container", PragmaColumnContainer);