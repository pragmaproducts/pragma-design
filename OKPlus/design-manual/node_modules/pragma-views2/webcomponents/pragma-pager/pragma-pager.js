import {BaseElement} from "../../baremetal/lib/base-element.js";
import {BaseNavigation} from '../lib/base-navigation.js';
import {ComponentUiStates} from "../../lib/component-ui-states.js";

class PragmaPager extends BaseElement {
    get currentPagerButton() {
        return this.allPagerButtons[this.currentPagerIndex];
    }
    
    get firstPagerButton() {
        return this.allPagerButtons[0];
    }
    
    get lastPagerButton() {
        return this.allPagerButtons[this.allPagerButtons.length -1];
    }
    
    get nextPagerButton() {
        this.currentPagerIndex++;
        if (this.currentPagerIndex > this.allPagerButtons.length -1) {
            this.currentPagerIndex = this.allPagerButtons.length -1;
        }
        
        return this.currentPagerButton;
    }
    
    get pagerOrientation() {
        return this.getAttribute('aria-orientation');
    }
    
    get previousPagerButton() {
        this.currentPagerIndex--;
        if (this.currentPagerIndex < 0) {
            this.currentPagerIndex = 0;
        }
        
        return this.currentPagerButton;
    }

    get allPagerButtons() {
        if (this._allPagerButtons == undefined) {
            this._allPagerButtons = [];
        }
        
        return this._allPagerButtons;
    }

    get uiGraph() {
        return this._uiGraph;
    }

    set uiGraph(newValue) {
        this._uiGraph = newValue;
    }

    get uiState() {
        return this._uiState;
    }

    set uiState(newValue) {
        this._uiState = newValue;
        let activePage = this.querySelector(".tabsheet-page[slot='body']");
        this.notifyChildren(activePage, newValue);
    }

    notifyChildren(element, uiState) {
        if (this._uiGraph != null && this.path != null) {
            this._uiGraph.setChildrenStateForPath(this.path, uiState, element);
        }
    }

    get path() {
        return this._path;
    }

    set path(newValue) {
        this._path = newValue;
    }

    
    click(event) {
        if (event.target.getAttribute('role') != 'tab') {
            return;
        }
        event.preventDefault();
        const pagerButton = event.target;
        this.handleBehaviour(pagerButton);
    }

    connectedCallback() {
        super.connectedCallback();

        this._baseNavigation = new BaseNavigation(this);
        this.currentPagerIndex = 0;
        this.nextPageId = -1;
        this.initTemplate();

        this.registerEvent(this, "click", this.click.bind(this));
        this.registerEvent(this, "keydown", this.keyDown.bind(this));
    }

    disconnectedCallback() {
        super.disconnectedCallback();
        this._allPagerButtons = null;
        this.nextPageId = null;
        this.currentPagerIndex = null;
        if (this._baseNavigation != null) {
            this._baseNavigation.dispose();
            this._baseNavigation = null;
        }
    }

    getPageByControl(control) {
        return this.querySelector(`#${control}`);
    }

    handleBehaviour(pagerButton, force) {
        if (pagerButton == this.currentPagerButton && force != true) return;
        this.selectPagerButton(pagerButton);
        this.showPage(pagerButton.controls, pagerButton.id);
    }

    initTemplate() {
        const instance = document.importNode(window.templates.get("pragma-pager-template"), true);
        this.setAttribute('role', 'tablist');
        this.attachShadow({mode: 'open'}).appendChild(instance.cloneNode(true));
    }

    keyDown(event) {
        if (event.key === "Tab") {
            return;
        } 
        
        if (event.target.getAttribute('role') != 'tab' || event.altKey) {
            return;
        }
        if (this.pagerOrientation == 'vertical' && (event.keyCode === this._baseNavigation.keyCodes.rightArrow || event.keyCode === this._baseNavigation.keyCodes.leftArrow)) {
            return;
        }
        if (this.pagerOrientation != 'vertical' && (event.keyCode === this._baseNavigation.keyCodes.upArrow || event.keyCode === this._baseNavigation.keyCodes.downArrow)) {
            return;
        }
        
        event.preventDefault();
        const activePagerButton = this.currentPagerButton;
        
        let pagerButton;

        switch (event.key) {
            case this._baseNavigation.keyCodes.upArrow:
                pagerButton = this.previousPagerButton;
                break;
            case this._baseNavigation.keyCodes.downArrow:
                pagerButton = this.nextPagerButton;
                break;
            case this._baseNavigation.keyCodes.rightArrow:
                pagerButton = this.nextPagerButton;
                break;
            case this._baseNavigation.keyCodes.leftArrow:
                pagerButton = this.previousPagerButton;
                break;
            case this._baseNavigation.keyCodes.home:
                pagerButton = this.firstPagerButton;
                break;
            case this._baseNavigation.keyCodes.end:
                pagerButton = this.lastPagerButton;
                break;
            default:
                return;
        }

        if (activePagerButton != pagerButton) {
            activePagerButton.selected = false;
            this.handleBehaviour(pagerButton, true);    
        }
    }

    // JHR: todo: we will need to add a remove button here so that if you remove a page on the designer it will not be part of this anymore.
    registerChild(pagerButton) {
        this.allPagerButtons.push(pagerButton);
        const isFirstButton = this.allPagerButtons.length == 1;
        this.nextPageId++;
        
        pagerButton.id = `pb-${this.nextPageId}_${pagerButton.controls}`;
        pagerButton.role = 'tab';
        pagerButton.selected = isFirstButton;

        const page = this.getPageByControl(pagerButton.controls);
        page.setAttribute('role', 'tabpanel');
        page.setAttribute('aria-labelledby', pagerButton.id);
        this.setPageVisibility(page, pagerButton.selected == "true");

        if (isFirstButton == true) {
            this.lastPage = page;
        }
    }
    //GM: Investigate if this is used
    resetState() {
        for(const pagerButton of this.activePagerButtons) {
            pagerButton.selected = false;
        }

        const activePages = this.allLinkedPages.filter(page => page.hidden == false);
        for(const page of activePages) {
            this.setPageVisibility(page, false);
        }
    }

    selectPagerButton(pagerButton) {
        if (this.currentPagerButton != undefined) {
            this.currentPagerButton.selected = false;
        }

        this.currentPagerIndex = this.allPagerButtons.indexOf(pagerButton);
        pagerButton.selected = true;
        pagerButton.focus();
    }

    setPageVisibility(page, isVisible) {
        isVisible ? page.setAttribute('slot', "body"): page.removeAttribute('slot');
    }

    showPage(controls) {
        if (this.lastPage != undefined) {
            this.setPageVisibility(this.lastPage, false);
            this.notifyChildren(this.lastPage, ComponentUiStates.suspended);
        }

        const page = this.getPageByControl(controls);
        this.setPageVisibility(page, true);
        this.notifyChildren(page, ComponentUiStates.active);

        this.lastPage = page;
    }
}

customElements.define('pragma-pager', PragmaPager);

class PagerButton extends HTMLElement {
    get controls() {
        return this.getAttribute('aria-controls');
    }

    set controls(value) {
        if (this.controls === value) {
            return;
        }
        this.setAttribute('aria-controls', value);
    }

    //TODO JN: Remove getter and setter for properties that will not change (controls, roles...)
    get role() {
        return this.getAttribute('role');
    }

    set role(value) {
        if (this.role === value) {
            return;
        }
        this.setAttribute('role', value);
    }

    get selected() {
        return this.getAttribute('aria-selected');
    }

    set selected(value) {
        if (this.selected === value) {
            return;
        }
        
        this.setAttribute('aria-selected', value);
        this.tabIndex = this.selected === 'true' ? 0 : -1;
    }

    get tabIndex() {
        return this.getAttribute('tabindex');
    }

    set tabIndex(value) {
        if (this.tabIndex === value) {
            return;
        }
        this.setAttribute('tabindex', value);
    }

    connectedCallback() {
        this.parentElement.parentElement.registerChild(this);
    }

    disconnectedCallback() {
        this.controls = null;
        this.role = null;
        this.selected = null;
        this.tabIndex = null;
    }
}

customElements.define('pager-button', PagerButton);