import {ViewBase} from "../../../baremetal/lib/view-base.js";
import {template as mainSchema} from "./schema.js";
import {cloneObject} from "../../../baremetal/lib/class-helper.js";
import {DatasetFactory} from "./../../../lib/dataset-factory.js";
import {performTriggersFor, removeObserverFromCache} from "../../../baremetal/lib/binding/observers.js";

export default class Complete extends ViewBase {

    get model () {
        return this._model;
    }

    set model(newValue) {
        if(newValue == null) return;
        this._model = newValue;
        this.mainSchema.variables.dataModel = this.model;
    }

    connectedCallback() {
        this.title = "Complete";
        this.context = this;
        this.mainSchema = cloneObject(mainSchema);

        this.init();

        this.remoteName = "Complete";

        this.fetchSchemaHandler = this.fetchSchema.bind(this);
        window.eventEmitter.on("fetch-schema", this.fetchSchemaHandler);
    }

    disconnectedCallback() {
        window.eventEmitter.remove(`${this.remoteName}-model-load`, this.fetchRecordHandler);
        this.fetchRecordHandler = null;

        window.eventEmitter.remove("fetch-schema", this.fetchSchemaHandler);
        this.fetchSchemaHandler = null;
    }

    init() {
        this.remoteDsCallbackHandler = this.getRemoteData.bind(this);

        window.eventEmitter.emit("assistant", {
            viewModel: this,
            schema: this.assistSchema
        });
    }

    async getRemoteData(def, payload, parent, inflatedParameters, queryOptions, fetchCount) {
        return this.schema.datasources[0].resource;
    }

    debug() {
        this.mainSchema.variables.ui.isMasterVisible = !this.mainSchema.variables.ui.isMasterVisible;
    }

    schemaLoaded(event) {

        const options = {
            schema: this.mainSchema,
            remoteDsCallback: this.remoteDsCallbackHandler,
            remoteCallback: this.datasetRemoteCallback.bind(this),
            draft: event.detail.draft
        };

        const form = document.querySelector("#main-view pragma-form .form-container");
        this.dsFactory = new DatasetFactory(options);
        this.model = this.dsFactory.createDataSet(0, {}, this.model, this.remoteName,null);


        // Note: If model changes update the assist using the context (this)
        // See assist component for more details
        window.eventEmitter.emit("assistant", {
            viewModel: this
        });

        performTriggersFor(this.model);
        this.dsFactory.finalize();
    }


    performTriggers() {
        performTriggersFor(this.model);
    }

    log() {
        console.log(this.model);
    }


    fetchSchema(args){
        args.callback(siteSchema);
    }

    datasetRemoteCallback(event) {
        const item = dataItems.find((item) => item.id === event.parameters.id[0]);
        event.successCallback(item);
    }


    performAction(args) {
        if (args.action == "select-first") {
            this.model.selectedId = 1;
        }
    }

    save() {
        window.eventEmitter.emit(`activity_1`, "busy");

        setTimeout(() => {
            window.eventEmitter.emit(`activity_1`, "done");
        }, 2000)
    }

    performToolAction(parameters, event) {
        eventEmitter.emit("show-message", {message: `button with id: "${event.detail}" was clicked`});
    }
}