import {ViewBase} from "../../../baremetal/lib/view-base.js";
import {template as mainSchema} from "./schema.js";
import {cloneObject} from "../../../baremetal/lib/class-helper.js";
import {DatasetFactory} from "./../../../lib/dataset-factory.js";
import {dataItems} from "./data-items.js";
import {performTriggersFor} from "../../../baremetal/lib/binding/observers.js";
import {ActionTypeConstants} from "./../../../lib/datasource-constants.js";

export default class VisualizationLiveChanges extends ViewBase {
    
    connectedCallback() {
        this.title = "Complete";
        this.context = this;
        this.mainSchema = cloneObject(mainSchema);

        this.init();
        
        this.remoteName = "Complete";
        this.datasourceRemoteName = "list-items";
        
        this.fetchRecordHandler = this.fetchRecordCallback.bind(this);
        window.eventEmitter.on(`${this.remoteName}-model-load`, this.fetchRecordHandler);
        
        this.updateCodeCounter = 1;
        
        this.data = dataItems();
    }
    
    disconnectedCallback() {
        window.eventEmitter.remove(`${this.remoteName}-model-load`, this.fetchRecordHandler);
        this.fetchRecordHandler = null;
    }

    init() {
        this.remoteDsCallbackHandler = this.remoteDsCallback.bind(this);
        
        window.eventEmitter.emit("assistant", {
            viewModel: this,
            schema: this.assistSchema
        });
    }

    remoteDsCallback(def, payload, parent, routerParameters, queryOptions) {
        if (queryOptions != null) {
            return [this.data.find(item => item.id === queryOptions[0].value[0])];
        } 
        
        return cloneObject(this.data);
    }

    fetchRecordCallback(event) {
        const item = dataItems.find((item) => item.id == event.parameters.id);
        event.successCallback(item);
    }

    schemaLoaded(event) {
        console.log("Schema loaded");
        const options = {
            schema: this.mainSchema,
            remoteDsCallback: this.remoteDsCallbackHandler,
            fetchRecordCallback: this.fetchRecordCallbackHandler
        };

        this.dsFactory = new DatasetFactory(options);
        this.model = this.dsFactory.createDataSet(0, {}, this.model, this.remoteName);

        // Note: If model changes update the assist using the context (this)
        // See assist component for more details
  

        this.model.selectedId = [2];
        performTriggersFor(this.model);
    }
    
    async add() {
        const item = this._createRandomItem();
        this.data.push(item);

        await window.dataSourceManager.performAction(ActionTypeConstants.itemsAdded, this.datasourceRemoteName, [item.id]);
    }

    async update() {
        const updatedItem = this.data[this.data.length - 1];
        //updatedItem.siteCode = "223";
        updatedItem.description = "Updated description";

        await window.dataSourceManager.performAction(ActionTypeConstants.itemsUpdated, this.datasourceRemoteName, [updatedItem.id]);
    }

    async delete() {
        const deleteItem = this.data[this.data.length - 1];

        await window.dataSourceManager.performAction(ActionTypeConstants.itemsDeleted, this.datasourceRemoteName, [deleteItem.id]);
    }
    
    _createRandomItem() {
        const id = Math.floor(Math.random() * Math.floor(100000000));
        return {
            id: id,
            code: id,
            description: `Description ${id}`,
            siteCode: `Site Code 0123`,
            region: `Region Code 1`
        }
    }
}