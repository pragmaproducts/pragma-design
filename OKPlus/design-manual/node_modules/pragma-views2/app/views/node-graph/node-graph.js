import {ViewBase} from "./../../../baremetal/lib/view-base.js";
import {SceneGraph} from "../../../lib/scene-graph/scene-graph.js";
import {SceneFunction} from "../../../lib/scene-graph/scene-function.js";
import {SceneNode} from "../../../lib/scene-graph/scene-node.js";
import {SceneValue} from "../../../lib/scene-graph/scene-value.js";
import {SceneGroup} from "../../../lib/scene-graph/scene-group.js";
import {loadScript} from "./../../../webcomponents/component-loader.js";
import {sceneGraphToSVG} from "./scene-to-svg.js";

export default class NodeGraph extends ViewBase {
    async connectedCallback() {
        const graph = new SceneGraph();

        const pow = graph.appendNode(new SceneFunction("pow"));
        graph.appendNode(new SceneNode("*"));
        graph.appendNode(new SceneValue(100));
        graph.appendNode(new SceneNode("gt", true));
        graph.appendNode(new SceneNode("@value"));

        // Base parameter
        const base = pow.addParameter("base", new SceneGraph());
        base.appendNode(new SceneValue(10));

        // Exponent parameter
        const mpr = new SceneFunction("monitoring_point_reading");
        mpr.addParameter("field", new SceneGraph()).appendNode(new SceneValue("MonitoringPoint->Id"));
        const mprGroup = new SceneGroup();
        mprGroup.nodes.appendNode(mpr);
        mprGroup.nodes.appendNode(new SceneNode("+"));
        mprGroup.nodes.appendNode(new SceneValue(273));

        const g1 = new SceneGroup();
        g1.nodes.appendNode(new SceneValue(-1567));
        g1.nodes.appendNode(new SceneNode("/"));
        g1.nodes.appendNode(mprGroup);

        const g2 = new SceneGroup();
        g2.nodes.appendNode(g1);
        g2.nodes.appendNode(new SceneNode("+"));
        g2.nodes.appendNode(new SceneValue(7.0895));

        const exponent = pow.addParameter("exponent", new SceneGraph());
        exponent.appendNode(g2);

        // pow(10,((-1567/(monitoring_point_reading(MonitoringPoint->Id)+273))+7.0895))*100 gt @value
        this.formula = graph.toString();
        console.log(graph);

        this.scene = graph;

        this.loadD3();
    }

    async loadD3() {
        const scriptPath = "./../../../third-party/d3.min.js";

        this._script = await loadScript(scriptPath, true, () => {
            this.loadGraph();
        });
    }

    loadGraph() {
        this.svg = d3.select(this._element).append("svg").attr("width", "100%").attr("height", "50%");
        sceneGraphToSVG(this.svg,  this.scene);
    }
}

