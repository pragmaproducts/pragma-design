import { ViewBase } from "../../../baremetal/lib/view-base.js";
import { IntentionHelper } from "../../../lib/intention-helper.js";
import {isMobile} from "../../../lib/device-helper.js";

export default class PragmaTouchPoc extends ViewBase {
    constructor() {
        super();
        this.intentionHelper = new IntentionHelper();
        this.leftClickHandler = this.leftClick.bind(this);
        this.doubleClickHandler = this.doubleClick.bind(this);
        this.rightClickHandler = this.rightClick.bind(this);
        this.dragStartHandler = this.dragStart.bind(this);
        this.dragEndHandler = this.dragEnd.bind(this);
        this.elementMoveHandler = this.moveHandler.bind(this);
        this.contextmenuHandler = this.contextMenu.bind(this);
        this._isMobile = isMobile();
    }

    dispose() {
        super.dispose();
        this.intentionHelper = null;
        this.leftClickHandler = null;
        this.doubleClickHandler = null;
        this.rightClickHandler = null;
        this.elementMoveHandler = null;
        this.moveHandler = null;
    }

    init() {

        this.target = document.querySelector('.test-element');
        const secondTarget = document.querySelector('.second-test-element');
        const container = document.querySelector('.ziggy');


        this.intentionHelper.registerIntention(secondTarget,'click', this.leftClickHandler);
        this.intentionHelper.registerIntention(secondTarget,'dblclick', this.doubleClickHandler);
        this.intentionHelper.registerIntention(secondTarget,'contextmenu', this.contextmenuHandler);
        this.intentionHelper.registerIntention(secondTarget,'rightclick',this.rightClickHandler);
        this.intentionHelper.registerIntention(container,'dragstart', this.dragStartHandler);
        this.intentionHelper.registerIntention(container,'dragend', this.dragEndHandler);
        this.intentionHelper.registerIntention(container,'drag', this.elementMoveHandler);
    }

    leftClick(event) {
        // do something to the target
        event.target.style.setProperty('background-color', 'dodgerblue');
        event.target.style.setProperty('color', 'white');
    }

    leftClick2(event) {
        console.log("2");
    }

    rightClick(event) {
        event.target.style.setProperty('background-color', 'indigo');
        event.target.style.setProperty('color', 'white');
    }

    contextMenu(event) {
        console.log(' hello context menu')
    }

    doubleClick(event) {
        event.target.style.setProperty('background', 'pink');
        event.target.style.setProperty('color', 'dodgerblue');
    }

    dragStart(event) {
        event.target.style.setProperty('box-shadow', '0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23)');
        event.target.style.setProperty('cursor', '');
        if (event.target === this.target) {
            this.isDragging = true;
        }
    }

    dragEnd(event) {
        event.target.style.setProperty('box-shadow', 'none');
        this.isDragging = false;
    }

    moveHandler(event) {
        if(this.isDragging === false) return;

        requestAnimationFrame(()=> {
            let x = 0;
            let y = 0;
            if (this._isMobile) {
                x = event.touches[0].clientX - (this.target.offsetHeight / 2);
                y = event.touches[0].clientY - (this.target.offsetWidth / 2);
            } else {
                x = event.clientX - (this.target.offsetWidth /2);
                y = event.clientY - (this.target.offsetHeight /2);
            }
            this.target.style.transform = `translate(${x}px,${y}px)`;
        });

    }

    connectedCallback() {
        this.init();
    }

    disconnectedCallback() {
        this.intentionHelper.dispose();
        this.dispose()
    }
}