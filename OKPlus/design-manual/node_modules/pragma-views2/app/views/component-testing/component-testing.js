import {ViewBase} from "../../../baremetal/lib/view-base.js";
import {isMobile} from "./../../../lib/device-helper.js";
import {PragmaMessagesSections} from "./../../../lib/pragma-messages-sections.js";
import {dialogTypes} from "./../../../webcomponents/pragma-dialogs/pragma-dialogs-constants.js";
import {ActionDialogManager} from "../../../lib/action-dialog-manager.js";

export default class ComponentTesting extends ViewBase {

    constructor() {
        super();
        this.isMasterVisible = false;
    }

    showErrors() {
        const errors = [
            {
                "message": "Joe dirt is invalid",
                "severity": "error",
            }
        ];
        window.pragmaMessages.addMessages("Testing", errors, PragmaMessagesSections.validationErrors, true);
    }

    showList() {
        if (isMobile()) {
            window.eventEmitter.postMessage("master-detail", {
                message: "toggle"
            })
        }
    }

    showDialog() {
        // window.eventEmitter.emit("show-message", {
        //     type: dialogTypes.error,
        //     message: "Joe dirt is cool"
        // });

     this.test();

    }

    test() {
        const dynamicForm = document.createElement("div");
        const buttons = [
            {
                id: "saveAndNew",
                title: "test",
                remote: true,
                callback: async (dialog, button) => {
                   this.test();
                }
            }
        ];

        const options = {
            contentElement: dynamicForm,
            animatedCallback: ()=> {},
            buttons: buttons,
            title: `Create`
        };

        new ActionDialogManager(options);
    }

    showBarcode() {
        window.eventEmitter.emit("show-barcode", (result) => {
            console.log(result)
        });
    }
    
    appendDivs() {
        let count =  0;
        
        for (let i = 0; i < 50; i++) {
            const result = this.testing();
            if ((result.end2-result.start2) < (result.end-result.start)) {
                count ++;
            } 
        }
     console.log(`${count}/50 innerHTML won`);
    }


    testing() {

        let start = performance.now();

        const panel = document.querySelector('pragma-panel-bar');
        const fragment = document.createDocumentFragment();
        for (let i = 0; i < 1000; i++) {
            const div = document.createElement("div");
            const button = document.createElement("button");
            button.textContent = "Test";
            div.appendChild(button);
            fragment.appendChild(div);
        }

        panel.appendChild(fragment);
        let end = performance.now();

        let start2 = performance.now();
        const array = [];
        for (let i = 0; i < 1000; i++) {
            array.push(`<div><button>Test</button></div>`)
        }

        const tpl = document.createElement('div');
        tpl.innerHTML = array.join("");
        panel.appendChild(tpl);

        let end2 = performance.now();
        return {start, end,  start2, end2}
    }
}