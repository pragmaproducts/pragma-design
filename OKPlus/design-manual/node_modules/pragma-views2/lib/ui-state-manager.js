import {ComponentUiStates} from "./component-ui-states.js";

export class UiStateManager {
    /**
     * This class is used to pass events down to registered components and also check if they are active or suspended
     * @param sharedClass - The shared class will need to have a function of componentStateChanged
     *                      if you want to perform actions on the class when component state changes
     *                      e.g. dataset and dataSource
     */
    constructor(sharedClass) {
        this.components = [];
        this.sharedClass = sharedClass;
    }
    
    dispose() {
        this.components = [];
        delete this.sharedClass;
    }

    /**
     * Gets the states of children that registered itself with the state manager
     * @returns {string}
     */
    getState() {
        if(this.components.length === 0) return ComponentUiStates.empty;
        let suspendedCount = 0;
        
        for (const element of this.components) {
            suspendedCount += element.uiState === ComponentUiStates.suspended ? 1:0;
        }
        
        return suspendedCount === this.components.length ? ComponentUiStates.suspended: ComponentUiStates.active;
    }

    /**
     * This gets called from a component when its state changes.
     * The function will evaluate all the registered components and send the state on to the shared class
     */
    componentStateChanged() {
        const state = this.getState();
        if (this.sharedClass.componentStateChanged != null) {
            this.sharedClass.componentStateChanged(state);
        }
    }

    /**
     * Add a component to get a evaluated when componentStateChanged is called
     * @param component
     */
    registerComponent(component) {
        if(this.components.indexOf(component) !== -1) return;
        this.components.push(component);
    }

    /**
     * Remove a component to not get a evaluated when componentStateChanged is called
     * @param component
     */
    unregisterComponent(component) {
        const index = this.components.indexOf(component);
        if(index === -1) return;
        this.components.splice(index, 1);
    }

    /**
     * Can be used to send values to components e.g. itemsAdded, selectionChanged
     * If you want to send results back from the call the results array will be populated with that result set.
     * If you want to provide detailed information as to who the result comes from you will need to add that information to the result payload as a property
     * @param fn
     * @param options
     */
    notify(fn, options) {
        if(this.components.length === 0) return ComponentUiStates.empty;

        const results = [];
        for (const component of this.components) {
            if (component[fn] != null)
            {
                results.push(component[fn](options));
            }
        }
        return results.length == 0 ? null : results;
    }
}