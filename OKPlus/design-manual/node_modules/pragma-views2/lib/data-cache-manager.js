import './group-worker.js';

export class CacheManager {
    constructor() {
        this.cacheIdCollection = new Set();
        this.cacheCountCollection = new Map();
    }

    dispose() {
        this.cacheIdCollection.clear();
        this.cacheIdCollection = null;

        this.cacheCountCollection.clear();
        this.cacheCountCollection = null;
    }

    addCache(id, data) {
        if (this.cacheIdCollection.has(id)) {
            return false;
        }

        const dataToCache = data.slice(0);
        if (dataToCache.definition != undefined) {
            delete dataToCache.definition;
            delete dataToCache.factory;
        }

        window.groupWorker.createCache(id, dataToCache);
    }

    addCacheCount(cacheId) {
        let count = 1;
        if (this.cacheCountCollection.has(cacheId)) {
            count = this.cacheCountCollection.get(cacheId) + 1;
        }

        this.cacheCountCollection.set(cacheId, count);
    }

    addPerspective(perspective, data) {
        const cacheId = perspective.data.cache;
        const perspectiveId = `${cacheId}_${perspective.id}`;
        const fieldsToGroup = perspective.data.grouping;
        const sorting = perspective.data.sorting;

        const aggregate = {
            aggregate: perspective.data.aggregate
        };

        window.groupWorker.createGroupPerspective(perspective.data.cache, perspectiveId, fieldsToGroup, aggregate, sorting, data);
        this.addCacheCount(cacheId);
    }

    reduceCacheCount(cacheId) {
        if (!this.cacheCountCollection.has(cacheId)) {
            return 0;
        }

        const count = this.cacheCountCollection.get(cacheId) - 1;
        this.cacheCountCollection.set(cacheId, count);

        return count;
    }

    removeCache(id) {
        if (this.cacheIdCollection.has(id)) {
            window.groupWorker.disposeCache(id);
            this.cacheIdCollection.delete(id);
        }
    }

    removePerspective(perspective) {
        const cacheId = perspective.data.cache;
        const count = this.reduceCacheCount(cacheId);

        if (count == 0) {
            const perspectiveId = `${cacheId}_${perspective.id}`;
            window.groupWorker.disposeGroupPerspective(cacheId, perspectiveId);
        }
    }
}