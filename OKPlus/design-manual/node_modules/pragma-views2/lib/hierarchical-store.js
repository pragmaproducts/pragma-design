import {HierarchicalItem} from "./hierarchical-item.js";

export class HierarchicalStore {

    constructor(options){
        this.definition = options.definition;
        this.schema = options.schema;
    }

    dispose(){
    }

    async _createPerspectives(items) {
        return new Promise(resolve => {
            let perspectives = [];

            for (let id of this.definition.perspective.perspectives) {
                const perspective = this.schema.perspectives.find(item => item.id === id);
                perspectives.push(perspective);
            }

            const eventName = `records_${this.definition.perspective.cache}`;
            const fn = () => {
                window.eventEmitter.remove(eventName, fn);
                resolve();
            }

            window.eventEmitter.on(eventName, fn);

            window.groupWorker.createCache(this.definition.perspective.cache, items, perspectives);
        });
    }

    _itemsToHierarchyItems(items, depth) {
        const result = [];

        for (let item of items) {
            const h = new HierarchicalItem(item, false, (item.items || []).length > 0, depth);

            if (item.items != null) {
                h.items = this.itemsToHierarchyItems(item.items, h.depth);
                delete item.items;
            }

            result.push(h);
        }

        return result;
    }

    async load(items) {
        if (this.definition.hierarchical === true) {
            this._data = this._itemsToHierarchyItems(items);
        }
        else {
            await this._createPerspectives(items);
        }
    }

    /**
     * Get the data required
     * @returns {Promise<void>}
     */
    async data(options) {
        if (this._data != null) {
            return this._data;
        }

        if (options != null && options.perspective != null) {
            return this.getPerspectiveData(options.perspective);
        }
    }
}