import {getValueOnPath, prefixVariables} from "../baremetal/lib/objectpath-helper.js";
import {cloneObject} from "../baremetal/lib/class-helper.js";

export class SchemaHelper {
    constructor(schema) {
        this.schema = schema;
    }

    dispose() {
        delete this.schema;
    }

    getAssociatedValue(model, value) {
        if (this.schema == undefined || this.schema.variables == undefined || value == undefined) {
            return value;
        }

        let result = value;

        if (value[0] == "@"){
            result = prefixVariables("schema.variables.","@", value);
            result = getValueOnPath(this, result);
        }

        if (typeof result == "string" && value.indexOf("viewModel") != -1){
            result = prefixVariables("", "viewModel.", value);
            result = getValueOnPath(window.viewModel, result);
        }

        if (typeof result == "string" && result.indexOf("model.") != -1) {
            result = prefixVariables("", "model.", value);
            result = model == undefined ? null : getValueOnPath(model, result);
        }

        return  result;
    }

    setAssociatedValueFor(model) {
        const keys = Object.keys(model);
        for (let key of keys) {
            model[key] = this.getAssociatedValue(model[key]);
        }
    }

    inflateParameters(model, parameters) {
        if (parameters == null) return; 
        // Cloning parameters to prevent the the variable from being replaced on original object
        const cloneParameters = cloneObject(parameters);
        const keys = Object.keys(cloneParameters);
        for(let key of keys) {
            let result = this.getAssociatedValue(model, cloneParameters[key]);

            if (result instanceof Object) {
                result = this.inflateParameters(model, result);
            }

            cloneParameters[key] = result;
        }

        return cloneParameters;
    }

}