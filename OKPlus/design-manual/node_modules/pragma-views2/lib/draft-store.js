export class DraftStore {

    constructor() {
        this.groups = new Map();
    }

    dispose() {
        this.groups = null;
    }

    add(groupKey, key, parameters, draft) {
        const item = {key, parameters, draft};
        let items = this.groups.get(groupKey);
        if (items == null) {
            const items = [];
            items.push(item);
            this.groups.set(groupKey, items);
        }
        else {
            items.push(item);
        }
        return true;
    }

    update(groupKey, key, oldKey, parameters, draft) {
        let items = this.groups.get(groupKey);
        for (const item of items) {
            if (item.key === oldKey) {
                item.key = key;
                item.parameters = parameters;
                item.draft = draft;
            } 
        }
        return true;
    }

    data(groupKey) {
        return this.groups.get(groupKey);
    }
    
    clear(groupKey) {
        this.groups.delete(groupKey);
    }
    

    remove(groupKey, key) {
        let items = this.groups.get(groupKey);
        for (const item of items) {
            if (item.key === key) {
                items.splice(items.indexOf(item), 1);
            } 
        }
        return true;
    }
}