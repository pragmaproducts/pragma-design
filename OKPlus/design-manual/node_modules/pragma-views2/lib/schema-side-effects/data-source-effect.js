export class DataSourceEffect {
    static register(manager) {
        const instance = new DataSourceEffect();
        instance.manager = manager;
        manager.add("datasource", instance);
    }

    dispose() {
        delete this.manager;
    }

    update(properties, schema, rootElement) {
        const id = properties.id;
        const intentions = properties.intentions;

        for (let intention of intentions) {
            if (this[intention.property] != null) {
                this[intention.property](intention.value);
            }
            else {
                const ds = schema.datasources.find(item => item.id == id);

                if (ds != null) {
                    ds[intention.property] = intention.value;
                }
            }
        }
    }

    fields(parameters) {
        const fields = parameters[0];
        const target = parameters[1];
        const targetId = parameters[2];
        
        if (this.manager.effects.has(target) === true) {
            const params = this.createFieldParameters(fields);
            this.manager.perform({
                target: target,
                id: targetId,
                intentions: [
                    {
                        action: "overrideColumns",
                        parameters: params
                    }
                ]
            });
        }
    }

    createFieldParameters(fields) {
        const result = [[],[]];

        for (let field of fields) {
            const title = field.replace(/([a-z](?=[A-Z]))/g, '$1 ').replace(/^\w/, c => c.toUpperCase());
            result[0].push(field);
            result[1].push(title);
        }

        return result;
    }
}