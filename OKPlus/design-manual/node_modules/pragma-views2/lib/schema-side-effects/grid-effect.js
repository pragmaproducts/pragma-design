export class GridEffect {
    static register(manager) {
        const instance = new GridEffect();
        instance.manager = manager;
        manager.add("grid", instance);
    }

    dispose() {
        delete this.manager;
    }

    update(properties, schema, rootElement) {
        const id = properties.id;
        const element = rootElement.querySelector(`#${id}`);
        const intentions = properties.intentions;

        for (let intention of intentions) {
            if (intention.action != null) {
                /**
                 * JHR todo:  Put something on the intention so that you can define if he UI part needs to execute.
                 * This means you can have additive features like column-resize that will performt he UI action on the grid and
                 * IF the schema as attached to the datasource on the grid then update the schema.
                 */

                element[intention.action](...intention.parameters);

                if (schema.visualizations != null && this[intention.action] != null) {
                    this[intention.action](id, intention, schema);
                }
            }
        }
    }
    
    appendColumn(id, intention, schema) {
        const schemaItem = schema.visualizations[id];

        const column = {
            field: intention.parameters[0],
            title: intention.parameters[1],
            width: 200
        };
        
        const oldElements = this.getElements(schemaItem);
        oldElements.columns.push(column);
        schemaItem.columns = oldElements.columns.concat(oldElements.other);
    }

    removeColumn(id, intention, schema) {
        const schemaItem = schema.visualizations[id];
        const oldElements = this.getElements(schemaItem);

        for (let fieldName of intention.parameters) {
            const item = oldElements.columns.find(item => item.field == fieldName);
            if (item != null) {
                const index = oldElements.columns.indexOf(item);
                oldElements.columns.splice(index, 1);
            }
        }
        schemaItem.columns = oldElements.columns.concat(oldElements.other);
    }

    moveColumn(id, intention, schema) {
        const schemaItem = schema.visualizations[id];
        const oldElements = this.getElements(schemaItem);

        const sourceItem = oldElements.columns.splice(intention.parameters[0], 1)[0];
        oldElements.columns.splice(intention.parameters[1], 0, sourceItem);

        schemaItem.columns = oldElements.columns.concat(oldElements.other);
    }

    overrideColumns(id, intention, schema) {
        const schemaItem = schema.visualizations[id];
        const oldElements = this.getElements(schemaItem);

        const newColumns = [];
        for (let i = 0; i < intention.parameters[0].length; i++) {
            const fieldName = intention.parameters[0][i];
            const title = intention.parameters[1][i];

            let column = oldElements.columns.find(item => item.field == fieldName);

            if (column == null) {
                column = {
                    field: fieldName,
                    title: title,
                    width: 200
                };
            }

            newColumns.push(column);
        }

        schemaItem.columns = newColumns.concat(oldElements.other);
    }
    
    setColumnWidth(id, intention, schema) {
        const schemaItem = schema.visualizations[id];
        
        let column = schemaItem.columns.find(item => item.field == intention.parameters[0]);
        if (column != null) {
            column["data-width"] = intention.parameters[1];    
        }
    }

    getElements(schemaElement) {
        const result = {
            columns: schemaElement.columns,
            other: []
        };

        if (schemaElement.elements != null) {
            for (let element of schemaElement.elements) {
                result.other.push(element);
            }
        }

        return result;
    }
}