import {GridEffect} from "./../../lib/schema-side-effects/grid-effect.js";
import {DataSourceEffect} from "./data-source-effect.js";

export class SchemaSideEffectManager {
    constructor(schema, rootElement) {
        this.schema = schema;
        this.rootElement = rootElement;
        this.effects = new Map();
        this.registerEffects();
    }
    
    dispose() {
        delete this.schema;
        delete this.rootElement;
    }
    
    add(key, sideEffect) {
        if (this.effects.has(key) == true) return;
        
        this.effects.set(key, sideEffect);
    }
    
    perform(data) {
        const target = data.target;
        if (target == null) return;
        
        if (this.effects.has(target)) {
            const effect = this.effects.get(target);
            effect.update(data, this.schema, this.rootElement);
        }
    }

    registerEffects() {
        if (this.schema.datasources != null) {
            DataSourceEffect.register(this);
        }

        if (this.schema.visualizations == null || this.schema.visualizations.length == 0) return;

        const map = new Map([["grid", GridEffect]]);

        const keys = Object.keys(this.schema.visualizations);
        for (let key of keys) {
            const type = this.schema.visualizations[key].element;
            if (this.effects.has(type) == false && map.has(type)) {
                map.get(type).register(this);
            }
        }
    }
}