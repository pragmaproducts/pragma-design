import {createFullPageLayer} from './dom-helper.js';
import {populateTemplate, processStepTemplate, processTemplate} from './template-parser-contstants.js';

export class ProcessManager {
    constructor(pragmaForm, actions) {
        this.pragmaForm = pragmaForm;
        this.actions = actions;
        this.index = -1;
        this.layer = createFullPageLayer();

        this.offset = 100 / actions.length;

        const html = this.getProcessStepsUI();
        this.pragmaForm.dynamicViewLoader.load(html, this.layer, this.pragmaForm);
    }

    dispose() {
        delete this.pragmaForm;
        delete this.actions;
    }

    getProcessStepsUI() {
        let processSteps = "";

        let i = 0;
        for (let actionId of this.actions) {
            const action = this.pragmaForm.schema.actions.find(item => item.id == actionId);
            processSteps += populateTemplate(processStepTemplate, {
                "__value__": i * this.offset,
                "__title__": action.title
            });

            i++;
        }

        processSteps += populateTemplate(processStepTemplate, {
            "__value__": 100,
            "__title__": ""
        });


        const html = populateTemplate(processTemplate, {
            "__html__": "",
            "__stages__": processSteps
        });

        return html;
    }

    async next() {
        this.index = this.index + 1;

        if (this.updateProgress() == true) {
            const id = this.actions[this.index];
            const action = this.pragmaForm.schema.actions.find(item => item.id == id);

            if (action.action == "showDialog") {
                await this.showDialog(action.parameters.id);
            }
            else {
                const atEnd = this.index == this.actions.length - 1;
                await this.pragmaForm.performAction(id, atEnd);
                await this.next();
            }
        }

    }

    showDialog(templateId) {
        const dialogBody = this.layer.querySelector(".dialog-body");
        if (this.hasDialogContent == true) {
            this.pragmaForm.dynamicViewLoader.unload(dialogBody);
        }

        const html = this.pragmaForm.templateParser.parseTemplate({template: templateId});
        this.pragmaForm.dynamicViewLoader.load(html, dialogBody, this.pragmaForm);
        this.hasDialogContent = true;
    }

    updateProgress() {
        const value = this.offset * (this.index + 1);

        const progress = this.layer.querySelector("staged-progress");
        progress.setAttribute("aria-value", value);

        if (this.index == this.actions.length) {
            this.pragmaForm.closeDialog();
            return false;
        }

        return true;
    }
}