export class HierarchicalItem {
    constructor(model, isExpanded = false, hasChildren = true, depth = -1) {
        this.model = model;
        this.isExpanded = isExpanded;
        this.hasChildren = hasChildren;
        this.depth = depth + 1;
    }

    get title() {
        return this.model.title || this._title;
    }

    set title(newValue) {
        this.title = newValue;
    }

    addItem(item) {
        if (this.items == undefined) {
            this.items = [];
        }

        this.items.push(item);
    }
}

/**
 * Add comment
 * @param items {string}: items to process
 * @param depth {number}: current depth of item
 * @param path {string} : hierarchical path to item e.g. "0.1.2.2"
 * @returns {Array}
 */
export function itemsToHierarchyItems(items, depth, path) {
    const result = [];

    for (let i = 0; i < items.length; i++) {
        let item  = items[i];
        item.__path = path == null? i.toString() : `${path}.${i}`;

        const h = new HierarchicalItem(item, false, (item.items || []).length > 0, depth);

        if (item.items != null) {
            h.items = itemsToHierarchyItems(item.items, h.depth, item.__path);
            delete item.items;
        }
        result.push(h);
    }

    return result;
}
