export class DataSourceManager {

    constructor() {
        this._counter = 0;
        this._keys = new Map();
    }

    /**
     * Dispose instance properties
     */
    dispose() {
        this._counter = null;
        this._keys = null;
    }

    /**
     * Returns data source keys for items matching either the response type or the data source instance
     * @param definitionRefValue - data source definition reference value
     * @returns {Array} - keys
     * @private
     */
    _getKeys(definitionRefValue) {
        const results = [];
        
        for(const entry of this._keys) {
            const key = entry[0];
            const dataSource = entry[1];
            if (dataSource.definition.reference === definitionRefValue || dataSource.definition.remote === definitionRefValue) {
                results.push(key);
            }   
        }
        
        return results;
    }

    /**
     * Add data source instance to keys map and return identifier
     * @param dataSource - data source instance
     * @returns {number} - data source key
     */
    async add(dataSource) {
        const key = ++this._counter;
        this._keys.set(key, dataSource);
        return key;
    }

    /**
     * Performs action
     * @param type - data source success callback type
     * @param definitionRefValue - data source definition reference value
     * @param parameters - callback parameters
     */
    async performAction(type, definitionRefValue, parameters) {
        if (type == null || definitionRefValue == null) return;
        
        const _keys = this._getKeys(definitionRefValue);
        for(const key of _keys) {
            const dataSource = this._keys.get(key);
            if (dataSource.definition.ignoreEvents == null) {
                await dataSource[type](parameters);
            } 
        }
    }

    /**
     * Remove data source from keys map
     * @param key - data source key
     */
    remove(key) {
        this._keys.delete(key);
    }
}