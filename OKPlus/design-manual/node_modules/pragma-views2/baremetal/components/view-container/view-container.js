import { BaseElement } from "../../lib/base-element.js";
import { ViewBase } from "../../lib/view-base.js";
import { loadTemplate, loadModule } from "../../lib/component-loader.js";
import { ViewBinding } from "../../lib/binding/view-binding.js";
import { releaseElements } from "../../lib/binding/binding-helpers.js";
import { observe } from "../../lib/binding/observers.js";
import {UIGraph} from "../../../lib/ui-graph.js";

class ViewContainer extends BaseElement {
    static get observedAttributes() {
        return ["view"];
    }

    get paused() {
        return this.getAttribute("paused") == "true";
    }
    
    get viewModel(){
        return this._viewModel;
    }
    
    set viewModel(newValue) {
        this._viewModel = newValue;
        window.viewModel = newValue;
    }
    
    get root() {
        return this._root || this.getAttribute("root") || "app"
    }
    
    set root(newValue) {
        this._root = newValue;
    }
    
    connectedCallback() {
        this.loadIndicator = document.createElement("pragma-action-icon");
        this.appendChild(this.loadIndicator);
        this.loadIndicator.classList.add("vis-loading");

        this.uiGraph = new UIGraph(this);
    }
    
    disconnectedCallback() {
        this.uiGraph.dispose();
        this._unloadCurrentView();
        this.loadIndicator = null;
    }

    async viewChanged(newValue) {
        this.loadIndicator.setAttribute("state", "busy");
        try {
            this._unloadCurrentView();

            if ((newValue || "").length == 0) {
                return;
            }

            this.viewName = newValue;

            const path = `./${this.root}/views/${newValue}/${newValue}`;
            return this._loadView(path, newValue);
        }
        finally {
            this.loadIndicator.setAttribute("state", "none");
        }
    }

    async _loadView(path) {
        if (this.paused == true) {
            return requestAnimationFrame(() => this._loadView(path));
        } 
        
        const jsFile = `${path}.js`;
        const htmlFile = `${path}.html`;

        const module = await loadModule(jsFile, this.viewName);
        this.viewModel = observe(new module.default());

        const template = await loadTemplate(htmlFile);
        const viewInstance = document.importNode(template, true);

        if (this.viewModel instanceof ViewBase) {
            this.binding = new ViewBinding(this.viewModel);
            await this.binding.parse(viewInstance);
            this.viewModel._element = this;
        }

        this.appendChild(viewInstance);
        
        this.uiGraph.build();

        if (this.binding != undefined) {
            this.binding.observeDomChanged();
        }

        if (this.viewModel.connectedCallback) {
            this.viewModel.connectedCallback(this);
        }
    }

    async showView(viewName, loadedCallback) {
        if (this.paused == true) {
            return requestAnimationFrame(() => this.showView(viewName, loadedCallback));
        }

        await this.viewChanged(viewName);
        if (loadedCallback != undefined) {
            loadedCallback();
        }
    }

    _unloadCurrentView() {
        this._disposeView();

        if (window.modules != undefined) {
            window.modules.delete(this.viewName);
        }

        while (this.firstChild) {
            this.removeChild(this.firstChild);
        }
    }

    _disposeView() {
        releaseElements(this.children);

        if (this.viewModel == undefined) return;

        if (this.viewModel.disconnectedCallback) {
            this.viewModel.disconnectedCallback();
        }

        if (this.binding != undefined) {
            this.binding.dispose();
            this.binding = null;
        }

        if (this.viewModel.dispose != undefined) {
            this.viewModel.dispose();
        }

        this.viewModel = null;
    }
}

customElements.define("view-container", ViewContainer);