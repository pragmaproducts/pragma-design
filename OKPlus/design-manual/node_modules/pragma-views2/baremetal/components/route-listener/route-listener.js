import { BaseElement } from "../../lib/base-element.js";

class RouteListener extends BaseElement {
    async connectedCallback() {
        super.connectedCallback();

        const routePath = this.getAttribute("src");
        const result = await fetch(routePath).then(result => result.text());
        this.routes = JSON.parse(result);

        this.registerEvent(window, "hashchange", this.urlChanged.bind(this));

        if (document.readyState == "complete") {
            this.urlChanged();
        } else {
            this._updateWhenReady();
        }
    }

    disconnectedCallback() {
        this.routes = null;
        super.disconnectedCallback();
    }

    _updateWhenReady() {
        document.onreadystatechange = state => {
            if (document.readyState == "complete") {
                this.urlChanged();
            }
        };
    }

    urlChanged() {
        this.loadView(this.getUrlParts());
    }

    getUrlParts() {
        const locationHash = window.location.hash.split("#")[1];
        if (locationHash == undefined) {
            return {
                hash: ""
            };
        }

        const paramIndex = locationHash.indexOf("?");
        if (paramIndex == -1) {
            return {
                hash: locationHash
            };
        }

        const hashValue = locationHash.slice(0, paramIndex);
        const params = decodeURIComponent(locationHash).slice(paramIndex + 1).split("&").reduce(function (result, item) {
            const parts = item.split('=');
            result[parts[0]] = parts[1];
            return result;
        }, {});

        return {
            hash: hashValue,
            parameters: params
        };
    }

    loadView(args) {
        const route = this.getRouteFromHash(args.hash);
        const containerId = this.getAttribute("view-container");
        const container = document.querySelector(`#${containerId}`);

        if (route == undefined) {
            this.view = "404";
        }
        else {
            if (route.view == this.view) {
                this.setViewModelParameters(container, args.parameters, route);
                return;
            }
            this.view = route.view;
        }

        container.showView(this.view, () => {
            this.setViewModelParameters(container, args.parameters, route)
        });
    }
    
    setViewModelParameters(container, parameters, route){
        container.viewModel.parameters = parameters;
        if (route != undefined && route.routeParameters != undefined){
            container.viewModel.routeParameters = route.routeParameters;
        }
    }
    
    getRouteFromHash(hash){
        const parts = hash.split("/");
        const routeConfig = this.routes[parts.shift()];

        if (routeConfig == undefined) return null; 
        
        return {
            view: routeConfig.view,
            routeParameters: this.getRouteParameters(routeConfig, parts)
        };
    }

    getRouteParameters(config, hashParts) {
        if (config.routeParameters == undefined) return null;

        let routeParameters = {};
        
        for (let i = 0; i < config.routeParameters.length; i++) {
            routeParameters[config.routeParameters[i]] = hashParts[i]
        }
        
        return routeParameters;
    }
}

customElements.define("route-listener", RouteListener);