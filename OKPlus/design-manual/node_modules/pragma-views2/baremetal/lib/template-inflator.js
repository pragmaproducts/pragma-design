import {domCaseMap} from "./binding/document-casemap.js";

export function inflateTemplate(fragment, model) {
    const children = Array.from(fragment.children);
    for (let child of children)
    {
        if (child.children.length > 0) {
            inflateTemplate(child, model);
        }
        else if (child.innerText != undefined) {
            inflateInnerText(child, model);
        }
        inflateAttributes(child,  model);
    }

    return fragment;
}

export function inflateElement(element, model) {
    inflateAttributes(element, model);
    inflatInnerText(element, model);
}

export function inflateAttributes(element, model) {
    const attributes = Array.from(element.attributes);
    for (let attribute of attributes) {
        inflateAttribute(attribute, model);
    }
}

export function inflateAttribute(attr, model) {
    if (attr.nodeValue.indexOf("#") != -1) {
        const value = getModelValue(model, attr.nodeValue);
        const attrName = domCaseMap.has(attr.name) ? domCaseMap.get(attr.name) : attr.name;

        if (attrName == "innerHTML") {
            attr.ownerElement.innerHTML = value;
        }
        else {
            attr.ownerElement.setAttribute(attrName, value);
        }
    }
}

export function inflateInnerText(element, model) {
    if (element.innerText.indexOf("#") > -1) {
        element.innerText = getModelValue(model, element.innerText);
    }
}

/**
 * Sets the given attributes on an element
 * @param {*} element: HTML element
 * @param {*} args: attributes to set
 */
export function setAttribute(element, args) {
    const keys = Object.keys(args);

    for(let key of keys) {
        element.setAttribute(key, args[key]);
    }
}

function getModelValue(model, bindingText) {
    const path = bindingText.split("#").join("");
    const value = getValue(model, path);
    return value;
}

function getValue(obj, path) {
    if (path.indexOf(".") == -1) {
        return obj[path];
    }

    const properties = path.split(".");

    if (properties.length == 2){
        return obj[properties[1]];
    }
    else {
        const childObj = obj[properties[1]];
        const childPath = properties.slice(1).join(".");
        return getValue(childObj, childPath);
    }
}
