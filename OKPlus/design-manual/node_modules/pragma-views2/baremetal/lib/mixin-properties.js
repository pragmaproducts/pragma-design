export function addPropertyFeatures(obj) {
    obj.setProperty = setProperty;
    obj.getProperty = getProperty;
}

/**
 * set the object member to a given value.
 * if the object member is already set and is disposable then clear it first.
 * @param ref
 * @param value
 */
function setProperty(ref, value, callback) {
    const fieldName = `_${ref}`;
    if (this[fieldName] != null && value == null) {
        if (this[fieldName].clear != null) {
            this[fieldName].clear();
        }

        if (this[fieldName].dispose != null) {
            this[fieldName].dispose();
        }
    }

    this[fieldName] = value;
    if (value != null && callback != null) {
        callback();
    }
}

/**
 * get the object member and if it does not exist use the callback to instanciate it.
 * @param ref
 * @param callback
 * @returns {*}
 */
function getProperty(ref, callback) {
    const fieldName = `_${ref}`;

    if (this[fieldName] == null) {
        this[fieldName] = callback();
    }

    return this[fieldName];
}
