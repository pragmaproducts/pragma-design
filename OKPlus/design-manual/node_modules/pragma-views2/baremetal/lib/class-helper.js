import {removeObserverFromCache} from "./binding/observers.js";

export const ignore = ["datasetFactory", "__definition", "__schema", "__defaults", "__globalId"];
export const deleteItems = ["_context", "schema"];

export function cloneObject(model) {
    if (model.raw != undefined) {
        return model.raw();
    }
    return JSON.parse(JSON.stringify(model));
}

export function cleanModel(model) {
    if (model == undefined || typeof model != "object" || model.__disposed == true) return;

    removeObserverFromCache(model);
    model.__disposed = true;
    
    if (typeof model.dispose == "function") {
        model.dispose.call(model);
        model.dispose = null;
        delete model.dispose;
    }

    const keys = Reflect.ownKeys(model);
    
    for (let key of keys) {
        if (deleteItems.indexOf(key) != -1) {
            delete model[key];
        } else if (ignore.indexOf(key) == -1) {
            const target = Reflect.get(model, key);
            
            if (target != undefined && typeof target == "object") {
                cleanModel(target);
            }

            Reflect.set(model, key, null);
            Reflect.deleteProperty(model, key);
        }
    }
}