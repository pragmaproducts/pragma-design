
import { ExecutionCompiler } from "./actions/code-compiler.js";
import { getObjOnPath } from "./binding/observers.js";

if (window.compiler == undefined) {
    window.compiler = new ExecutionCompiler();
}

const knownFunctions = new Map([
    ["@today", todayDate],
    ["@todayDate", todayDate],
    ["@todayDateTime", todayDateTime],
    ["@null", () => null]
]);

export function prefixVariables(newPrefix, oldPrefix, variable) {
    if (isKnowFunction(variable) == true) {
        return variable;
    }
    return variable.split(oldPrefix).join(newPrefix);
}

function isKnowFunction(variable) {
    return knownFunctions.has(variable);
}

export function getModelOnPath(obj, path) {
    const stack = path.split(".");
    const fieldName = stack[stack.length - 1];
    let model = obj;

    for (let i = 0; i < stack.length - 1; i++) {
        model = model[stack[i]];
        if (model == undefined) {
            return undefined;
        }
    }

    return {
        model: model,
        fieldName: fieldName
    };
}

export function getValueOnPath(obj, path) {
    if (isKnowFunction(path)) {
        return knownFunctions.get(path)();
    }
    const fn = window.compiler.add(path, false);
    return fn(obj);
}

export function setValueOnPath(obj, path, value) {
    const stack = path.split(".");
    const fieldName = stack[stack.length - 1];
    let model = getObjOnPath(obj, stack);
    model[fieldName] = value;
}

export function deleteValueOnPath(obj, path) {
    const result = getModelOnPath(obj, path);
    if (result != undefined) {
        return delete result.model[result.fieldName];
    }
}

export function executeFunctionOnPath(obj, path, parameters, args) {
    const result = getModelOnPath(obj, path);

    if (result == undefined) {
        return console.warn(`Could not execute ${path} as the path does not fully exist on object`);
    }

    result.model[result.fieldName].call(result.model, parameters, args);
}

function todayDate() {    
    // NOTE JB: Once cannot use date.toISOString() for a date only; it will convert/change the date to UTC.    
    //  - Best to extract the date for your local today date.
    const date = new Date();
    const day = date.getDate().toString().padStart(2, "0");
    const month = (date.getMonth() + 1).toString().padStart(2, "0");
    const year = date.getFullYear();

    return `${year}-${month}-${day}`;
}

function todayDateTime() {
    // NOTE JB: When time is involved, we want want to use utc date and time 
    return new Date().toISOString();
}