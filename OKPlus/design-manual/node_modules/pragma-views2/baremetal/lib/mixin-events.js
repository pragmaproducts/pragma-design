export function addEventsFeatures(obj) {
    obj.events = [];
    obj.registerEvent = registerEvent;
    obj.unregisterEvent = unregisterEvent;
    obj.hasEvent = hasEvent;
}

export function removeEventsFeatures(obj) {
    unloadEvents(obj);
    obj.registerEvent = null;
    obj.unregisterEvent = null;
}

function unregisterEvent(element, event) {
    const e = this.events.find(item => item.element == element && item.event == event);
    if (e != null) {
        e.element.removeEventListener(e.event, e.callback);
        this.events.splice(this.events.indexOf(e), 1);
    }
}

function hasEvent(element, event) {
    const e = this.events.find(item => item.element == element && item.event == event);
    return e != null;
}

function registerEvent(element, event, callback) {
    element.addEventListener(event, callback);
    this.events.push({
        element: element,
        event: event,
        callback: callback
    });
}

function unloadEvents(obj) {
    if (obj.events == undefined) return;
    for (let event of obj.events) {
        event.element.removeEventListener(event.event, event.callback);
        event.element = null;
        event.event = null;
        event.callback = null;
    }
    obj.events = null;
}