/**
 * Object store is a class that recycles objects so that it does not go to garbage collection.
 * When you are finished with an object return it to the store instead making it null.
 * Preventing garbage collection is a performance feature for virtualization
 */
export class ObjectStore {
    constructor() {
        this.store = [];
    }
    
    dispose() {
        this._clear();
    }

    /**
     * return the item to the store.
     * This cleans up the item using the recycleCallback and adds it the the store for the next request.
     * @param item
     * @returns {Promise<void>}
     */
    async returnItem(item, cleanFn) {
        item = this.recycleCallback(item);

        if (cleanFn != null) {
            cleanFn(item);
        }

        this.finilizeCallback(item);
        this.store.push(item);
    }
    
    async returnItems(items, cleanFn) {
        
    }

    /**
     * Get a item from the store.
     * If the store is empty it will create a new item using the createObjectCallback.
     * Remember to return the item to the store when you are done with it.
     * @returns {*}
     */
    getItem() {
        if (this.store.length > 0) {
            return this.store.pop();
        }
        
        const item = this.createObjectCallback();
        return item;
    }

    /**
     * Prepopulate the store with ready to use items equal to the expected amount you will be working with.
     * Properly initializing the store assists in performance for initial use.
     * Don't under initialize or over initialize the store, try and be exact for best performance.
     * @param count
     */
    async initStore(count) {
        for (let i = 0; i < count; i++) {
            this.store.push(this.createObjectCallback());
        }
    }

    /**
     * Override this to do custom clean up operations
     * @param item
     * @returns {*}
     */
    recycleCallback(item) {
        return item;
    }

    finilizeCallback(item) {
        return item;
    }
    
    createObjectCallback() {
        // override this to create items
    }
    
    /**
     * This function clears the store of all objects.
     * This is done during the dispose of the store
     * @private
     */
    _clear() {
        for (let item of this.store) {
            if (item.dispose != undefined) {
                item.dispose();
            }
        }
        
        this.store = null;
    }
}