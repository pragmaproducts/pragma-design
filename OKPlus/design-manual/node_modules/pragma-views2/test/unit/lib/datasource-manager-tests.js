import {DataSourceManager} from "./../../../lib/datasource-manager.js";
import {ActionTypeConstants} from "./../../../lib/datasource-constants.js";
import {createDataSourceInstance} from "../test-helpers/datasource-manager-helper.js";

describe("datasource-manager-tests", () => {
    const sandbox = sinon.createSandbox();
    let instance;

    beforeEach(() => {
        instance = new DataSourceManager();
    });

    it('constructor', () => {
        // Assert
        chai.assert.isNotNull(instance._keys, "Expect _keys to not be null.");
        chai.assert.isNotNull(instance._counter, "Expect _counter to not be null.");
        chai.assert.equal(instance._counter, 0, "Expect _counter to be set to zero.");
    });

    it('constructor - data source definition reference', () => {
        // Arrange
        const definitionRef = "action";
        
        // Act
        instance = new DataSourceManager(definitionRef);
        
        // Assert
        chai.assert.isNotNull(instance._keys, "Expect _keys to not be null.");
        chai.assert.isNotNull(instance._counter, "Expect _counter to not be null.");
        chai.assert.equal(instance._counter, 0, "Expect _counter to be set to zero.");
    });

    it('dispose', () => {
        // Arrange
        const dataSource = createDataSourceInstance();
        instance._keys.set(123, dataSource);

        // Act
        instance.dispose();

        // Assert
        chai.assert.isNull(instance._counter, "Expect _counter to be null.");
        chai.assert.isNull(instance._keys, "Expect _keys to be null.");
    });

    it('_getKeys', () => {
        // Arrange
        const dataSource = createDataSourceInstance();
        const key = 123456;
        const definitionRefValue = "SomeRemote";
        instance._keys.set(key, dataSource);

        // Act
        const results = instance._getKeys(definitionRefValue);
        
        // Assert
        chai.assert.isArray(results, "Expect result of _getKeys() to be an Array.");
        chai.assert.equal(results.length, 1, "Expect 1 key returned in results array.");
        chai.assert.equal(results[0], key, "Expect correct key to be returned.");
    });

    it('add', async () => {
        // Arrange
        const dataSource = createDataSourceInstance();
        
        // Act
        const result = await instance.add(dataSource);

        // Assert
        chai.assert.equal(instance._counter, result, "Expect counter to be set to 1.");
        chai.assert.deepEqual(instance._keys.get(result), dataSource, "Expect _keys to contain data source instance and relevant key.");
    });
    
    it("performAction - for items added action type", async () => {
        // Arrange
        const type = ActionTypeConstants.itemsAdded;
        const definitionRefValue = "SomeRemote";
        const key = 123;
        const dataSource = createDataSourceInstance();
        instance._keys.set(key, dataSource);
        const spyGetKeys = sandbox.stub(instance, "_getKeys").returns([key]);
        const spyItemsAdded = sandbox.stub(dataSource, "itemsAdded");

        // Act
        await instance.performAction(type, definitionRefValue);

        // Assert
        chai.assert(spyGetKeys.calledOnce, "Expect _getKeys() to be called once.");
        chai.assert(spyGetKeys.calledWith(definitionRefValue));
        chai.assert(spyItemsAdded.calledOnce, "Expect data source's itemsAdded() to be called once.");
    });

    it("performAction - for items updated action type", async () => {
        // Arrange
        const type = ActionTypeConstants.itemsUpdated;
        const definitionRefValue = "SomeRemote";
        const key = 123;
        const dataSource = createDataSourceInstance();
        instance._keys.set(key, dataSource);
        const spyGetKeys = sandbox.stub(instance, "_getKeys").returns([key]);
        const spyItemsUpdated = sandbox.stub(dataSource, "itemsUpdated");

        // Act
        await instance.performAction(type, definitionRefValue);

        // Assert
        chai.assert(spyGetKeys.calledOnce, "Expect _getKeys() to be called once.");
        chai.assert(spyGetKeys.calledWith(definitionRefValue));
        chai.assert(spyItemsUpdated.calledOnce, "Expect data source's itemsUpdated() to be called once.");
    });

    it("performAction - for items deleted action type", async () => {
        // Arrange
        const type = ActionTypeConstants.itemsDeleted;
        const definitionRefValue = "SomeRemote";
        const key = 123;
        const dataSource = createDataSourceInstance();
        instance._keys.set(key, dataSource);
        const spyGetKeys = sandbox.stub(instance, "_getKeys").returns([key]);
        const spyItemsDeleted = sandbox.stub(dataSource, "itemsDeleted");

        // Act
        await instance.performAction(type, definitionRefValue);

        // Assert
        chai.assert(spyGetKeys.calledOnce, "Expect _getKeys() to be called once.");
        chai.assert(spyGetKeys.calledWith(definitionRefValue));
        chai.assert(spyItemsDeleted.calledOnce, "Expect data source's itemsDeleted() to be called once.");
    });

    it("remove", () => {
        // Arrange
        const key = 132;
        const dataSource = createDataSourceInstance();
        instance._keys.set(key, {
            dataSource: dataSource,
            responseType: "Asset"
        });

        // Act
        instance.remove(key);
        
        // Assert
        chai.assert.isUndefined(instance._keys.get(key), "Expect removed key to not exist on map");
    });
});