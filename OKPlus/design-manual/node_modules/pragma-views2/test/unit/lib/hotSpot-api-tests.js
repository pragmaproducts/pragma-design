import {HotSpotsApi} from '../../../lib/hotSpot-api/hotSpot-api.js';

describe('hot-spots-api-tests', () => {
    let instance;
    const sandbox = sinon.createSandbox();

    beforeEach(() => {
        instance = new HotSpotsApi();
    });

    afterEach(() => {
        sandbox.restore();
    });

    it('constructor-success', () => {
        instance.isMobile = false;
        chai.assert.equal(instance.speed, 40, 'Expect instance speed to be 40');
        chai.assert.equal(instance.hotSpotElements.length, 0, 'Expect instance hotSpotElements to be equal to empty array');
    });

    it('set-hotSpots', () => {
        // Arrange
        const hotSpots = new Map();
        const stubSetProp = sandbox.stub(instance, 'setProperty');
        // Act
        instance.hotSpots = hotSpots;
        // Assert
        chai.assert(stubSetProp.calledOnce, 'Expect spyHotSpots to be called once');

    });

    it('dispose-success', () => {
        // Arrange
        let testValue = 0;
        const event = 'touchstart';
        const scrollHandler = () => {
            testValue = 10;
        };
        const hotSpot = {
            element: document.createElement('div'),
            scrollhandler: scrollHandler,
            event: event
        };
        instance.isMobile = true;
        instance.hotSpotElements.push(hotSpot);
        instance.speed = 40;
        // Act
        instance.dispose();
        // Assert
        chai.assert.equal(instance.hotSpotElements, null, 'Expects instance hotSpotElements to be null');
        chai.assert.equal(instance.speed, null, 'Expects instance speed to be null');
    });

    it('scroll-speed-success', () => {
        // Arrange
        instance.isMobile = false;
        // Act
        instance.speed = instance.isMobile === true ? 25 : 40;
        // Assert
        chai.assert.equal(instance.speed, 40, 'expect the scroll speed to equal 40');
    });

    it('scroll-speed-is-mobile-success', () => {
        // Arrange
        instance.isMobile = true;
        // Act
        instance.speed = instance.isMobile === true ? 25 : 40;
        // Assert
        chai.assert.equal(instance.speed, 25, 'expect the scroll speed to equal 40');
    });

    it('hotSpotEvents-success', () => {
        // Arrange
        let isExecuted = false;
        const fn = (event, callback) => {
            isExecuted = true;
        };
        const fn1 = () => {
        };
        const fn2 = () => {
        };
        const events = [
            {type: 'mouseover'},
            {type: 'mouseout'}
        ];
        const callbacks = [fn1, fn2];
        // Act
        instance.hotSpotEvents(fn, events, callbacks);
        // Assert
        chai.assert.equal(isExecuted, true, 'Expect isExecuted to be true because the fn is executed')
    });

    it('addHotSpots-success', () => {
        // Arrange
        const animationLayer = document.createElement('div');
        // Act
        instance.addHotSpots(animationLayer);
        // Assert
        for (const key of instance.hotSpots.keys()) {
            chai.assert.include(Array.from(animationLayer.childNodes), animationLayer.querySelector(`.hotspot-${key}`), 'Expect animation layer to have instances hot spots');
        }
    });

    it('performElementScroll-mouseover-success', () => {
        // Arrange
        let hasEnded = false;
        const element = document.createElement('div');
        const direction = 'right';
        const event = {type: 'mouseover'};
        const spyRightFunc = sandbox.stub(instance, '_scrollright');

        // Act
        const promise = new Promise((resolve) => {
            instance.performElementScroll(event, element, direction, hasEnded);
        });

        // Assert
        promise.then(() => {
            chai.assert(spyRightFunc.calledOnce, 'Expect the function to be called');
        });
        // chai.assert(spyRightFunc.calledOnce, 'Expect the function to be called');
    });

    it('performElementScroll-direction-success', () => {
        // Arrange
        let hasEnded = false;
        const element = document.createElement('div');
        const direction = null;
        const event = {type: 'mouseover'};
        const spyRightFunc = sandbox.stub(instance, '_scrollright');

        // Act
        const promise = new Promise((resolve) => {
            instance.performElementScroll(event, element, direction, hasEnded);
        });

        // Assert
        promise.then(() => {
            chai.assert(spyRightFunc.notCalled, 'Expect the function not to be called');
        });
        // chai.assert(spyRightFunc.calledOnce, 'Expect the function to be called');
    });

    it('performElementScroll-hasEnded-success', ()=> {
        // Arrange
        const hasEnded = false;
        const element = document.createElement('div');
        const direction = 'right';
        const event = {type: 'mouseout'};
        // Act
        const promise = new Promise((resolve) => {
            instance.performElementScroll(event, element, direction, hasEnded);
        });
        // Assert
        promise.then(()=>{
            chai.assert.equal(hasEnded, true, 'Expect has ended to be true');
        });
    });

    it('performElementScroll-hasEnded-false-success', ()=> {
        // Arrange
        const hasEnded = true;
        const element = document.createElement('div');
        const direction = 'right';
        const event = {type: 'mouseout'};
        // Act
        const promise = new Promise((resolve) => {
            instance.performElementScroll(event, element, direction, hasEnded);
        });
        // Assert
        promise.then(()=>{
            chai.assert.equal(instance.eventInterval, undefined, 'Expect eventInterval to be undefined');
        });
    });

    it('_scrollleft', ()=> {
       // Arrange
        instance.speed = 40;
        let element = {
            scroller: {
                scrollLeft: 0
            }
        };
        // Act
        const promise = new Promise(resolve => {
            instance._scrollleft(element);
        });
        // Assert
        promise.then(() => {
            chai.assert.equal(element.scroller.scrollLeft, -instance.speed, 'Expect element scroller scrollLeft to be equal to negative instance.speed')
        });

    });

    it('_scrollleft-fail', ()=> {
       // Arrange
        instance.speed = 40;
        let element = {
            scroller: null
        };
       // Act
        instance._scrollleft(element);
       // Assert
        chai.assert.equal(element.scroller, null, 'Expect element scroller scrollLeft to be equal to negative instance.speed');

    });

    it('_scrollright', ()=> {
       // Arrange
        instance.speed = 40;
        let element = {
            scroller: {
                scrollLeft: 0
            }
        };
        const promise = new Promise(resolve => {
            instance._scrollright(element);
        });
        // Assert
        promise.then(() => {
            chai.assert.equal(element.scroller.scrollLeft, instance.speed, 'Expect element scroller scrollRight to be equal to negative instance.speed')
        });

    });

    it('_scrollright-fail', ()=> {
       // Arrange
        instance.speed = 40;
        let element = {
            scroller: null
        };
       // Act
        instance._scrollright(element);
       // Assert
        chai.assert.equal(element.scroller, null, 'Expect element scroller to be null');
    });

    it('_scrolltop', ()=> {
       // Arrange
        instance.speed = 40;
        let element = {
            scroller: {
                scrollTop: 0
            }
        };

        const promise = new Promise(resolve => {
            instance._scrolltop(element);
        });
        // Assert
        promise.then(() => {
            chai.assert.equal(element.scroller.scrollTop, -instance.speed, 'Expect element scroller scrollTop to be equal to negative instance.speed')
        });

    });

    it('_scrolltop-fail', ()=> {
       // Arrange
        instance.speed = 40;
        let element = {
            scroller: null
        };
       // Act
        instance._scrolltop(element);
       // Assert
        chai.assert.equal(element.scroller, null, 'Expect element scroller to be null');
    });

    it('_scrollbottom', ()=> {
       // Arrange
        instance.speed = 40;
        let element = {
            scroller: {
                scrollTop: 0
            }
        };
        const promise = new Promise(resolve => {
            instance._scrollbottom(element);
        });
        // Assert
        promise.then(() => {
            chai.assert.equal(element.scroller.scrollTop, instance.speed, 'Expect element scroller scrollBottom to be equal to negative instance.speed')
        });

    });

    it('_scrollbottom fail', ()=> {
       // Arrange
        instance.speed = 40;
        let element = {
            scroller: null
        };
       // Act
        instance._scrollbottom(element);
       // Assert
        chai.assert.equal(element.scroller, null, 'Expect element scroller to be null');

    });

});
