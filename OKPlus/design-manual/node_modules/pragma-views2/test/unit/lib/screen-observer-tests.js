import {ScreenObserver} from "../../../lib/screen-observer.js";

describe("screen-observer-tests", () => {
    const sandbox = sinon.createSandbox();
    let screenObserver;


    beforeEach(() => {
        window.addEventListener = ()=> {};
        screenObserver = new ScreenObserver();
        window.eventEmitter = {
            emit: ()=> {}
        }
    });

    afterEach(()=> {
        screenObserver.dispose();
        sandbox.restore();
    });

    it('constructor', () => {
        // Arrange
        const addEventListenerStub = sandbox.stub(window, "addEventListener");
        const _setInitialValuesStub = sandbox.stub(ScreenObserver.prototype, "_setInitialValues");
        
        // Act
        screenObserver = new ScreenObserver();
        
        // Assert
        chai.assert(addEventListenerStub.calledOnce);
        chai.assert(_setInitialValuesStub.calledOnce);
        chai.assert(addEventListenerStub.calledWith("resize"));
    });

    it('dispose', () => {
        // Arrange
        const removeEventListenerStub = sandbox.stub(window, "removeEventListener");
        // Act
        screenObserver.dispose();

        // Assert
        chai.assert(removeEventListenerStub.calledOnce);
        chai.assert(removeEventListenerStub.calledWith("resize"));
    });

    it('_setScreenValues', () => {
        // Arrange
        const eventEmitterStub = sandbox.stub(window.eventEmitter, "emit");
        // Act
        screenObserver._setScreenValues({matches: true}, {}, true);

        // Assert
        chai.assert(eventEmitterStub.calledOnce);
        chai.assert(eventEmitterStub.calledWith("screen-changed"));
        
    });

    it('resize', () => {
        // Arrange
        const eventEmitterStub = sandbox.stub(window, "clearTimeout");
        // Act
        screenObserver.resize();

        // Assert
        chai.assert(eventEmitterStub.calledOnce);
        chai.assert.isNotNull(screenObserver.timeout);

    });
});
