import {RemoteDatasource} from "../../../lib/remote-datasource.js";
import {ComponentUiStates} from "../../../lib/component-ui-states.js";

describe("remote-datasource-tests", () => {
    const sandbox = sinon.createSandbox();
    let datasource;
    

    beforeEach(() => {
        window.groupWorker = {
            createCache: () => {},
            disposeCache: () => {}
        };
        
        datasource = new RemoteDatasource({
            remoteCallback: () => {
                setTimeout(null, 100);
                return [{
                    id: 1
                }]
            },
            definition: {
                id: 0,
            }
        });
    });
    
    afterEach(()=> {
        datasource.dispose();
        sandbox.restore();
    });

    it('load - load triggered twice from two components to only execute once', () => {
        // Arrange

        const spyLoadNormalItems = sandbox.stub(datasource, "_loadNormalItems");
        const spyValidateBeforeLoad = sandbox.stub(datasource, "_validateBeforeLoad");
        
        // Act
      
      const load1= datasource.load();
      const load2 = datasource.load();
        
      // Assert
       return Promise.all([load1, load2]).then(()=> {
            
            chai.assert(spyLoadNormalItems.calledOnce, "Expect _loadNormalItems() method on remote data source instance to be called once only.");
            chai.assert(spyValidateBeforeLoad.calledOnce, "Expect _validateBeforeLoad() method on remote data source instance to be called once only.");
        });
    });

    it('_validateBeforeLoad - return false when state not active', () => {
        // Act
        const result = datasource._validateBeforeLoad(ComponentUiStates.suspended);
        // Assert
        chai.assert.equal(result, false);
    });

    it('_validateBeforeLoad - return false when not all parameters are set ', () => {
        // Arrange
        datasource.schema = {
            variables: {
                data: {
                    code: null
                }
            }
        };
        datasource.definition.parameters = {
            "code": "@data.code"
        };
        
        // Act
        const result = datasource._validateBeforeLoad(ComponentUiStates.active);
        // Assert
        chai.assert.equal(result, false);
    });

    it('loadByIds - verify that the inflated parameters are sent to the remoteCallback ', async () => {
        // Arrange
        datasource.schema = {
            variables: {
                data: {
                    code: 12
                }
            }
        };
        datasource.definition.parameters = {
            "code": "@data.code"
        };

        const spyRemoteCallback = sandbox.stub(datasource, "remoteCallback");
        // Act
        datasource.inflatedParameters = datasource.schemaHelper.inflateParameters(null, datasource.definition.parameters);
        await datasource.loadByIds([1]);
        // Assert
        chai.assert(spyRemoteCallback.calledOnce);
        chai.assert.isTrue(spyRemoteCallback.args[0][3] === datasource.inflatedParameters);
    });


    it('_loadNormalItems - remote callback is called ', async () => {
        // Arrange
        datasource.schema = {
            variables: {
                data: {
                    code: null
                }
            }
        };
        datasource.definition.parameters = {
            "code": "@data.code"
        };
        const spyRemoteCallback = sandbox.stub(datasource, "remoteCallback").returns( [{id:1}]);

        // Act
        await datasource._loadNormalItems();
        // Assert
        chai.assert(spyRemoteCallback.calledOnce);
    });
});
