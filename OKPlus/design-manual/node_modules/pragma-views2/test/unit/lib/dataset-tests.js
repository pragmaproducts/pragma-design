import {DataSet} from "./../../../lib/dataset.js";
import {DataSetConstants} from "./../../../lib/dataset-constants.js";
import {ActionTypeConstants} from "./../../../lib/datasource-constants.js";
import {DataSourceManager} from "./../../../lib/datasource-manager.js";

describe("dataset-tests", () => {
    const sandbox = sinon.createSandbox();
    let dataset;
    let _previousWindowEventEmitter;
    let _eventMessages;

    beforeEach(() => {
        const definition = {
            id: 0,
            name: "model",
            fields: [
                {
                    name: "notes"
                },
                {
                    name: "isBaseUnit",
                    initialValue: false
                },
                {
                    name: "convertFactor",
                    initialValue: 0.01
                },
                {
                    name: "permissionTreeCode",
                    initialValue: "SomeCode",
                    lookup: 1
                }
            ]
        };
        const schema = {            
            lookups : [
                {
                    "id": 1,
                    "name": "permissionTreeCode",
                    "mapping": {
                        "permissionTreeId": "id",
                        "permissionTreeCode": "code",
                        "permissionTreeDescription": "description"
                    },
                    "perspective": 0,
                    "template": 0,
                    "datasource": 0
                }
            ],
            perspectives: [
                {
                    "id": 0,
                    "name": "permissionTreeCode",
                    "id-field": "id",
                    "data": {
                        "cache": "permissionTreeCode-lookup",
                        "aggregate": [
                            "count"
                        ],
                        "sorting": {}
                    }
                }
            ]    

        };
        const remote = "SomeRemote";
        dataset = new DataSet(definition, schema, remote);

        _eventMessages = [];
        _previousWindowEventEmitter = window.eventEmitter;
        window.eventEmitter = {
            emit: function (eventName, eventArgs) {
                _eventMessages.push({eventName: eventName, eventArgs: eventArgs})
            }
        };
    });
    
    afterEach(() => {       
        if (_previousWindowEventEmitter != null) {
            window.eventEmitter = _previousWindowEventEmitter;
        }
        else {
            delete window.eventEmitter;
        }
    });

    it('resetToDefault', () => {
        // Arrange
        dataset["notes"] = "Test";
        dataset["isBaseUnit"] = true;
        dataset["convertFactor"] = 3.63;
        dataset["permissionTreeCode"] = "OtherCode";

        // Act
        dataset.resetToDefault();

        // Assert
        chai.assert.isUndefined(dataset["notes"]);
        chai.assert.equal(dataset["isBaseUnit"], dataset.__definition.fields.find(x => x.name === "isBaseUnit").initialValue);
        chai.assert.equal(dataset["convertFactor"], dataset.__definition.fields.find(x => x.name === "convertFactor").initialValue);
        chai.assert.equal(dataset["permissionTreeCode"], dataset.__definition.fields.find(x => x.name === "permissionTreeCode").initialValue);
    });

    it('setInitialValues activityState set to none when complete', () => {
        // Arrange
        const model = {
            createdByUserFullName: "OnKeyPlusConversion",
            createdByUserId: 2,
            createdOn: "2008-12-31T22:00:00.0000000Z"
        };
        dataset.__defaults = new Map();
        
        // Act
        dataset.setInitialValues(model);

        // Assert
        chai.assert.equal(dataset.activityState, DataSetConstants.none);
    });

    it ('doLookup use sourceSchema and set variables on runtime build lookup view schema', () => {
        // Arrange
        const lookupFieldName = "permissionTreeCode";        
        
        // Act
        dataset.doLookup(lookupFieldName);
        
        // Assert
        const eventMessage = _eventMessages.find(x => x.eventName === "do-lookup");
        chai.assert.isOk(eventMessage != null, "Expected 'do-lookup' event to be fired");
        chai.assert.equal(eventMessage.eventArgs.definition.name, lookupFieldName);
    });

    it('doLookup filter value sent to event', () => {
        // Arrange
        const lookupFieldName = "permissionTreeCode";
        const filterValue = "A21";
        
        // Act
        dataset.doLookup(lookupFieldName, filterValue);

        // Assert
        const eventMessage = _eventMessages.find(x => x.eventName === "do-lookup");
        chai.assert.isOk(eventMessage != null, "Expected 'do-lookup' event to be fired");
        chai.assert.equal(eventMessage.eventArgs.filter, filterValue);
        chai.assert.equal(eventMessage.eventArgs.filterField, dataset["__schema"].lookups[0].mapping[lookupFieldName]);
        chai.assert.equal(eventMessage.eventArgs.filterField, dataset["__schema"].lookups[0].mapping[lookupFieldName]);
    });
   
    it("update - with changes - calls data source manager", async () => {
        // Arrange
        dataset.remote = "SomeRemote";
        dataset.version = 123;
        const options = {
            responseType: dataset.remote
        };
        const changes = {
            code: "Some Change"
        };
        const spyGetFlatDirtyModel = sandbox.stub(dataset, "getFlatDirtyModel").returns(changes);
        const spyProcessSave = sandbox.stub(dataset, "_processSave").returns({
            isValid: () => { return true; }
        });
        window.dataSourceManager = new DataSourceManager();
        const spyPerformAction = sandbox.stub(window.dataSourceManager, "performAction");

        // Act
        await dataset.update();
        
        // Assert
        chai.assert(spyGetFlatDirtyModel.calledOnce, "Expect getFlatDirtyModel() to be called once.");
        chai.assert(spyProcessSave.calledOnce, "Expect _processSave() to be called once.");
        chai.assert(spyProcessSave.calledWith(ActionTypeConstants.update, changes));
        chai.assert(spyPerformAction.calledOnce, "Expect performAction on the data source manager to be called once.");
    });

    it("update - with no changes - does not call data source manager", async () => {
        // Arrange
        dataset.remote = "SomeRemote";
        dataset.version = 123;
        const changes = {};
        const spyGetFlatDirtyModel = sandbox.stub(dataset, "getFlatDirtyModel").returns(changes);
        const spyProcessSave = sandbox.stub(dataset, "_processSave");
        window.dataSourceManager = new DataSourceManager();
        const spyPerformAction = sandbox.stub(window.dataSourceManager, "performAction");

        // Act
        await dataset.update();

        // Assert
        chai.assert(spyGetFlatDirtyModel.calledOnce, "Expect getFlatDirtyModel() to be called once.");
        chai.assert(spyProcessSave.notCalled, "Expect _processSave() to NOT be called once.");
        chai.assert(spyPerformAction.notCalled, "Expect performAction on the data source manager to NOT be called once.");
    });

    it("update - when update is not saved - does not call data source manager", async () => {
        // Arrange
        dataset.remote = "SomeRemote";
        dataset.version = 123;
        const changes = {
            code: "Some Change"
        };
        const spyGetFlatDirtyModel = sandbox.stub(dataset, "getFlatDirtyModel").returns(changes);
        const spyProcessSave = sandbox.stub(dataset, "_processSave").returns({
            isValid: () => { return false; }
        });
        window.dataSourceManager = new DataSourceManager();
        const spyPerformAction = sandbox.stub(window.dataSourceManager, "performAction");

        // Act
        await dataset.update();

        // Assert
        chai.assert(spyGetFlatDirtyModel.calledOnce, "Expect getFlatDirtyModel() to be called once.");
        chai.assert(spyProcessSave.calledOnce, "Expect _processSave() to be called once.");
        chai.assert(spyProcessSave.calledWith(ActionTypeConstants.update, changes));
        chai.assert(spyPerformAction.notCalled, "Expect performAction on the data source manager to NOT be called.");
    });

    it("create - when raw model is saved- calls data source manager", async () => {
        // Arrange
        dataset.remote = "SomeRemote";
        const rawData = {
            "id": 123456789,
            "code": "SomeCode",
            "description": "SomeDescription",
            "isActive": true
        };
        const spyRaw = sandbox.stub(dataset, "raw").returns(rawData);
        const saveResult = {
            isValid: () => { return true; },
            data: {
                id: 123456798
            }
        };
        const spyProcessSave = sandbox.stub(dataset, "_processSave").returns(saveResult);
        window.dataSourceManager = new DataSourceManager();
        const spyPerformAction = sandbox.stub(window.dataSourceManager, "performAction");
        
        // Act
        await dataset.create();

        // Assert
        chai.assert(spyRaw.calledOnce, "Expect raw() to be called once.");
        chai.assert(spyProcessSave.calledOnce, "Expect _processSave() to be called once.");
        chai.assert(spyPerformAction.calledOnce, "Expect performAction on the data source manager to be called once.");
    });

    it("create - when raw model is not saved - does not call data source manager", async () => {
        // Arrange
        dataset.remote = "SomeRemote";
        const rawData = {
            "id": 123456789,
            "code": "SomeCode",
            "description": "SomeDescription",
            "isActive": true
        };
        const spyRaw = sandbox.stub(dataset, "raw").returns(rawData);
        const saveResult = {
            isValid: () => { return false; }
        };
        const spyProcessSave = sandbox.stub(dataset, "_processSave").returns(saveResult);
        window.dataSourceManager = new DataSourceManager();
        const spyPerformAction = sandbox.stub(window.dataSourceManager, "performAction");

        // Act
        await dataset.create();

        // Assert
        chai.assert(spyRaw.calledOnce, "Expect raw() to be called once.");
        chai.assert(spyProcessSave.calledOnce, "Expect _processSave() to be called once.");
        chai.assert(spyPerformAction.notCalled, "Expect performAction on the data source manager to NOT be called.");
    });
});
