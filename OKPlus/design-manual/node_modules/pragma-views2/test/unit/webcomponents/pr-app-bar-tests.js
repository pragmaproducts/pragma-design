import {Appbar} from "../../../webcomponents/pr-appbar/pr-appbar.js";
import {EventEmitter} from "../../../baremetal/lib/events.js";
import {addPropertyFeatures} from "../../../baremetal/lib/mixin-properties.js";
import {PragmaForm} from "./../../mockups/pragma-form.js";

function getSchemaFromNetwork() {
    const result = `
        {
            "body": {
                "elements": [
                ]
            }
        }    
    `;
    
    return new window.Response(result, {
        status: 200,
        headers: {'Content-type': 'application/json'}
    });
}

describe("pr-appbar-tests", () => {
    let sandbox;
    let instance;
    let querySelectorStub;
    let form;
    
    before(() => {
        sandbox = sinon.createSandbox();
        form = new PragmaForm();
        sandbox.stub(form, "setValue");
    }) 
 
    beforeEach(() => {
        window.templates = new Map([
            ["pragma-appbar", 1]
        ]);
        
        instance = new Appbar();
        addPropertyFeatures(instance);

        querySelectorStub = sandbox.stub(instance, "querySelector");
        querySelectorStub.withArgs("pragma-form").returns(form);
    });
    
    afterEach(() => {
        sandbox.restore();
    })
    
    it('connectedCallback', () => {
        const importNodeStub = sandbox.stub(document, "importNode");
        importNodeStub.returns(document.createElement("div"));

        const fetchStub = sandbox.stub(window, "fetch");
        fetchStub.returns(Promise.resolve(getSchemaFromNetwork()));

        const appendChildStub = sandbox.stub(instance, "appendChild");
        
        instance.connectedCallback();
        
        chai.expect(instance.form).to.not.be.null;
        chai.assert(importNodeStub.calledOnce, "import node should have been called once");
        chai.assert(appendChildStub.calledOnce, "append child should have been called once");
        chai.assert(fetchStub.calledOnce, "fetch should have been called once");
    });
    
    it('disconnectedCallback', () => {
        instance.disconnectedCallback();

        chai.assert(instance._schema == null, "schema should be null");
        chai.expect(instance._form == null, "form should be null");
    });
    
    it('onMessage', () => {
        const setValueStub = sinon.stub(instance.form, "setValue");
        instance.onMessage({intent: "active", target: "menu", value: false});
        
        chai.expect(setValueStub.calledOnce, "setValue on form should be called once");
    });
    
    it ('setActiveState - isActive = true', () => {
        const obj = {
            "icon-name": "menu",
            "isActive": true
        }

        const sourceElement = document.createElement("div");
        querySelectorStub.returns(sourceElement);
        
        instance.setActiveState(obj);
        chai.expect(sourceElement.classList.contains("active") == true);
    });

    it ('setActiveState - isActive = false', () => {
        const obj = {
            "icon-name": "menu",
            "isActive": false
        }

        const sourceElement = document.createElement("div");
        sourceElement.classList.add("active");

        querySelectorStub.returns(sourceElement);

        instance.setActiveState(obj);
        chai.expect(sourceElement.classList.contains("active") == false);
    });
});