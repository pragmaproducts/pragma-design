import {TemplateFactory} from "../../../webcomponents/lib/template-factory.js";
import {CustomTemplateRenderer} from "../../../webcomponents/lib/render-custom-template.js";

describe("tree-renderer-tests", () => {
    let sandbox;
    const dataStore = {
        data: [
            {
                id: 1
            },
            {
                id: 2
            }
        ]
    };

    const templateAdapter = {

        getTemplateForItem: () => {
            return {
                value: {
                    dimensions: {
                        height: 100
                    }
                }
            }
        }
    };
    const container = {};
    let treeRenderer;

    beforeEach(() => {
        sandbox = sinon.createSandbox();
        sandbox.stub(TemplateFactory.prototype, '_setData');
        treeRenderer = new CustomTemplateRenderer(container);

        treeRenderer.templateFactory = templateAdapter;
        treeRenderer.dataStore = dataStore;
    });

    afterEach(() => {
        sandbox.restore();
    });


    it('template-factory - setItemSizes', () => {
        // Arrange
        // Act
        treeRenderer.setItemSizes();
        let height = 0;
        for(const item of treeRenderer.dataStore.data) {
            height += item.__height;
        }

        //const result = factory.get(key);
        // Assert
        chai.assert.equal(height, 200);
    });


    it('template-factory - total height calculation', () => {
        // Arrange
        // Act
        const height = treeRenderer.totalHeight();

        //const result = factory.get(key);
        // Assert
        chai.assert.isNotNull(height);
        chai.assert.equal(height, 200);
    });

});
