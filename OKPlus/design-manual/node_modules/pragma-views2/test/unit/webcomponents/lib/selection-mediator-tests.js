import {SelectionMediator} from "../../../../webcomponents/lib/selection-mediator.js";
import {DataSourceBase} from "../../../../lib/datasource-base.js";

describe("selection-mediator-tests", () => {

    let datasource;
    let hierarchyDatasource;

    beforeEach(() => {
        datasource = new DataSourceBase({
            definition: {
                id: 0
            }
        });
        datasource._data = [
            {
                id: 1,
                code: "Code 1",
                selectable: true
            },
            {
                id: 2,
                code: "Code 2",
                selectable: true
            },
            {
                id: 3,
                code: "Code 3",
                selectable: false
            }
        ];

        hierarchyDatasource = new DataSourceBase({
            definition: {
                id: 0,
                hierarchical: true
            }
        });
        const hierarchialData = [
            {
                title: "site 0",
                items: [
                    {
                        id: 1,
                        code: "Code 1",
                        selectable: true
                    },
                    {
                        id: 2,
                        code: "Code 2",
                        selectable: true
                    },
                    {
                        id: 3,
                        code: "Code 3",
                        selectable: false
                    }
                ]
            },
            {
                title: "site 1",
                items: [
                    {
                        id: 4,
                        code: "Code 4",
                        selectable: true
                    },
                    {
                        id: 5,
                        code: "Code 5",
                        selectable: true
                    },
                    {
                        id: 6,
                        code: "Code 6",
                        selectable: false
                    }
                ]
            },

        ];

        hierarchyDatasource.load(hierarchialData);

    });


    it('single select record', () => {
        // Arrange
        const mediator = new SelectionMediator(datasource, null, false);
        // Act
        mediator.applySelection(datasource._data[0]);

        // Assert
        chai.assert.deepEqual(datasource.selectedItemsMap.get(datasource._data[0].id), datasource._data[0]);
        chai.assert.equal(datasource.selectedItemsMap.size, 1);
    });

    it('single select record - clear others', () => {
        // Arrange
        const mediator = new SelectionMediator(datasource, null, false);

        // Act
        mediator.applySelection(datasource._data[0]);
        mediator.applySelection(datasource._data[1]);

        // Assert
        chai.assert.deepEqual(datasource.selectedItemsMap.get(datasource._data[1].id), datasource._data[1]);
        chai.assert.equal(datasource.selectedItemsMap.size, 1);
    });

    it('multiple select - deselect', () => {
        // Arrange
        const mediator = new SelectionMediator(datasource, null, true);

        // Act
        mediator.applySelection(datasource._data[0], true);
        mediator.applySelection(datasource._data[1], true);
        mediator.applySelection(datasource._data[0], false);

        // Assert
        chai.assert.deepEqual(datasource.selectedItemsMap.get(datasource._data[1].id), datasource._data[1]);
        chai.assert.equal(datasource.selectedItemsMap.size, 1);
    });

    it('multiple select - select two or more', () => {
        // Arrange
        const mediator = new SelectionMediator(datasource, null, true);

        // Act
        mediator.applySelection(datasource._data[0], true);
        mediator.applySelection(datasource._data[1], true);

        // Assert
        chai.assert.deepEqual(datasource.selectedItemsMap.get(datasource._data[0].id), datasource._data[0]);
        chai.assert.deepEqual(datasource.selectedItemsMap.get(datasource._data[1].id), datasource._data[1]);
        chai.assert.equal(datasource.selectedItemsMap.size, 2);
    });


    it('visibleSelectionChanged ', () => {
        // Arrange
        const mediator = new SelectionMediator(datasource, null, true);
        const visibleItems = [datasource._data[1], datasource._data[2]];
        mediator.applySelection(datasource._data[0], true);
        mediator.applySelection(datasource._data[1], true);
        // Act
        const result = mediator.visibleSelectionChanged(visibleItems);
        // Assert
        chai.assert.deepEqual(result[0], datasource._data[1]);
        chai.assert.equal(Object.keys(result).length, 1);
    });

    it('hierarchical select group', () => {
        // Arrange
        const mediator = new SelectionMediator(hierarchyDatasource, null, true);

        // Act
        mediator.applySelection(hierarchyDatasource._data[0], true);
        // Assert
        chai.assert.equal(hierarchyDatasource.selectedItemsMap.size, 4);
    });

    it('hierarchical deselect group', () => {
        // Arrange
        const mediator = new SelectionMediator(hierarchyDatasource, null, true);

        // Act
        mediator.applySelection(hierarchyDatasource._data[0], true);
        mediator.applySelection(hierarchyDatasource._data[0], false);
        // Assert
        chai.assert.equal(hierarchyDatasource.selectedItemsMap.size, 1);
    });

    it('hierarchical select leaf in group', () => {
        // Arrange
        const mediator = new SelectionMediator(hierarchyDatasource, null, true);

        // Act
        mediator.applySelection(hierarchyDatasource._data[0].items[0], true);

        // Assert
        chai.assert.equal(hierarchyDatasource.selectedItemsMap.size, 2);
    });

    it('hierarchical select leaf then deselect group', () => {
        // Arrange
        const mediator = new SelectionMediator(hierarchyDatasource, null, true);

        // Act
        mediator.applySelection(hierarchyDatasource._data[0].items[0], true);
        mediator.applySelection(hierarchyDatasource._data[0], false);
        // Assert
        chai.assert.equal(hierarchyDatasource.selectedItemsMap.size, 1);
    });

    it('hierarchical select leaf then select group', () => {
        // Arrange
        const mediator = new SelectionMediator(hierarchyDatasource, null, true);

        // Act
        mediator.applySelection(hierarchyDatasource._data[0].items[0], true);
        mediator.applySelection(hierarchyDatasource._data[0], true);
        // Assert
        chai.assert.equal(hierarchyDatasource.selectedItemsMap.size, 4);
    });

    it('hierarchical select two groups', () => {
        // Arrange
        const mediator = new SelectionMediator(hierarchyDatasource, null, true);

        // Act
        mediator.applySelection(hierarchyDatasource._data[0], true);
        mediator.applySelection(hierarchyDatasource._data[1], true);
        // Assert
        chai.assert.equal(hierarchyDatasource.selectedItemsMap.size, 7);
    });

    it('selection ref - select selectable record', () => {
        // Arrange
        const mediator = new SelectionMediator(hierarchyDatasource, "model.selectable", true);

        // Act
        mediator.applySelection(hierarchyDatasource._data[0].items[0], true);
        // Assert
        chai.assert.equal(hierarchyDatasource.selectedItemsMap.size, 2);
    });

    it('selection ref - select non selectable record', () => {
        // Arrange
        const mediator = new SelectionMediator(hierarchyDatasource, "model.selectable", true);

        // Act
        mediator.applySelection(hierarchyDatasource._data[0].items[2], true);
        // Assert
        chai.assert.equal(hierarchyDatasource.selectedItemsMap.size, 1);
    });

});
