import { FocusBase } from "../../../../webcomponents/lib/focus-base.js";

describe("focus-base-tests", () => {
    let focusBase;

    before(() => {
        chai.should();
    });

    beforeEach(() => {
        const visualizationStub = sinon.stub();
        focusBase = new FocusBase(visualizationStub);
    });

    afterEach(() => {
        focusBase = null;
        sinon.restore();
    });

    it("constructor", async () => {
        //Arrange
        //Act
        //Assert
        chai.assert(focusBase.index === 0, "Must be initialized to 0");
    });

    it("dispose", async () => {
        //Arrange
        //Act
        focusBase.dispose();
        //Assert
        chai.assert(focusBase.index == null, "Must be disposed");
        chai.assert(focusBase.rowIndex == null, "Must be disposed");
        chai.assert(focusBase._instance == null, "Must be disposed");
    });

    it("_focus", async () => {
        //Arrange
        const elementStub = sinon.stub();
        elementStub.focus = sinon.stub();
        //Act
        focusBase._focus(elementStub);
        //Assert
        chai.assert(elementStub.focus.called === true, "Must be called");
        chai.assert(elementStub.focus.args[0][0].preventScroll === true, "Must be called with argument prevent Scroll true");
    });

    it("_focusRow", async() => {
        //Arrange
        const elementStub = sinon.stub();
        elementStub.__dataIndex = 1;
        focusBase._focus = sinon.stub();
        //Act
        focusBase._focusRow(elementStub);
        //Assert
        chai.assert(focusBase._focus.called === true, "_focus should be called");
        chai.assert(focusBase.index === 1, "Index should be set");
    });

    it("_focusRow null", async() => {
        //Arrange
        focusBase._focus = sinon.stub();
        //Act
        focusBase._focusRow(null);
        //Assert
        chai.assert(focusBase._focus.called === false, "_focus should not be called");
        chai.assert(focusBase.index == 0, "Index should still have initial 0");
    });

    it("_focusRow __dataIndex null", async() => {
        //Arrange
        focusBase._focus = sinon.stub();
        const elementStub = sinon.stub();
        //Act
        focusBase._focusRow(elementStub);
        //Assert
        chai.assert(focusBase._focus.called === true, "_focus should be called");
        chai.assert(focusBase.index == 0, "Index should be 0");
    });

    it("_focusRowItem", async() => {
        //Arrange
        focusBase._focus = sinon.stub();
        const elementStub = sinon.stub();
        //Act
        focusBase._focusRowItem(elementStub, 1);
        //Assert
        chai.assert(focusBase._focus.called === true, "Should be called.");
        chai.assert(focusBase.rowIndex === 1, "Should be 1");
    });

    it("focus", async() => { 
        //Arrange
        focusBase._focus = sinon.stub();
        const elementStub = sinon.stub();
        focusBase._instance.navigation = sinon.stub();
        focusBase._instance.navigation.getRowByIndex = sinon.stub().returns(sinon.stub());
        focusBase._focusRow = sinon.stub();
        //Act
        focusBase.focus(elementStub);
        //Assert
        chai.assert(focusBase._focusRow.called === true, "Should be called");
        chai.assert(focusBase.navigation.getRowByIndex.called === false, "Should not be called");
    });

    it("focus null", async() => { 
        //Arrange
        focusBase._focus = sinon.stub();
        focusBase._instance.navigation = sinon.stub();
        focusBase._instance.navigation.getRowByIndex = sinon.stub().returns(sinon.stub());
        focusBase._focusRow = sinon.stub();
        //Act
        focusBase.focus(null);
        //Assert
        chai.assert(focusBase._focusRow.called === true, "Should be called");
        chai.assert(focusBase.navigation.getRowByIndex.called === true, "Should be called");
    });

    it("focusDown", async() => { 
        //Arrange
        focusBase._instance.navigation = sinon.stub();
        focusBase._instance.navigation.itemCount = 10;
        focusBase.index = 1;
        //Act
        focusBase.focusDown();
        //Assert
        chai.assert(focusBase.index === 2, "Should have incremented to two.");
    });

    it("focusDown out of range", async() => { 
        //Arrange
        focusBase._instance.navigation = sinon.stub();
        focusBase._instance.navigation.itemCount = 10;
        focusBase.index = 10;
        //Act
        focusBase.focusDown();
        //Assert
        chai.assert(focusBase.index === 10, "Should not have incremented.");
    });

    it("focusLeft", async() => { 
        //Arrange
        focusBase.rowIndex = 2;
        //Act
        focusBase.focusLeft();
        //Assert
        chai.assert(focusBase.rowIndex === 1, "Should have decremented to 1.");
    });

    it("focusLeft out of range", async() => { 
        //Arrange
        focusBase.rowIndex = 0;
        //Act
        focusBase.focusLeft();
        //Assert
        chai.assert(focusBase.rowIndex === 0, "Should have stayed 0.");
    });
    
    it("focusRight", async() => { 
        //Arrange
        focusBase._instance.navigation = sinon.stub();
        const rowStub = sinon.stub();
        rowStub.children = new Array(3);
        focusBase._instance.navigation.getRowByIndex = sinon.stub().returns(rowStub);
        focusBase.rowIndex = 1;
        //Act
        focusBase.focusRight();
        //Assert
        chai.assert(focusBase.rowIndex === 2, "Should have incremented to 2.");
    });

    it("focusRight out of range", async() => { 
        //Arrange
        focusBase._instance.navigation = sinon.stub();
        const rowStub = sinon.stub();
        rowStub.children = new Array(3);
        focusBase._instance.navigation.getRowByIndex = sinon.stub().returns(rowStub);
        focusBase.rowIndex = 3;
        //Act
        focusBase.focusRight();
        //Assert
        chai.assert(focusBase.rowIndex === 3, "Should have stayed 3.");
    });

    it("focusUp", async() => { 
        //Arrange
        focusBase.index = 1;
        //Act
        focusBase.focusUp();
        //Assert
        chai.assert(focusBase.index === 0, "Should have decremented to 0.");
    });

    it("focusUp out of range", async() => { 
        //Arrange
        focusBase.index = 0;
        //Act
        focusBase.focusUp();
        //Assert
        chai.assert(focusBase.index === 0, "Should have stayed 0.");
    });
});