import {NavigationBase} from "../../../../webcomponents/lib/navigation-base.js";

describe("navigation-base-tests", () => {
    let navigationBase;

    before(() => {
        chai.should();
    });

    beforeEach(() => {
        const visualizationStub = sinon.stub();
        navigationBase = new NavigationBase(visualizationStub);
    });

    afterEach(() => {
        navigationBase = null;
        sinon.restore();
    });

    it("constructor", async () => {
        //Arrange
        //Act
        //Assert
        chai.assert(navigationBase._instance != null, "Must be initialized.");
    });

    it("dispose", async () => {
        //Arrange
        //Act
        navigationBase.dispose();
        //Assert
        chai.assert(navigationBase._instance == null, "Must be disposed");
    });

    it("collapse", async () => {
        //Arrange
        navigationBase.getRowByIndex = sinon.stub().returns(sinon.stub());
        navigationBase.isExpanded = sinon.stub().returns(true);
        navigationBase._instance.toggleExpand = sinon.stub();
        //Act
        const result = await navigationBase.collapse(1);
        //Assert
        chai.assert(result === true, "Should succeed");
        chai.assert(navigationBase.isExpanded.called === true);
        chai.assert(navigationBase._instance.toggleExpand.called === true);
    });

    it("collapse isExpanded false", async () => {
        //Arrange
        navigationBase.getRowByIndex = sinon.stub().returns(sinon.stub());
        navigationBase.isExpanded = sinon.stub().returns(false);
        navigationBase._instance.toggleExpand = sinon.stub();
        //Act
        const result = await navigationBase.collapse(1);
        //Assert
        chai.assert(result === false, "Should return false");
        chai.assert(navigationBase.isExpanded.called === true);
        chai.assert(navigationBase._instance.toggleExpand.called === false);
    });

    it("dataStoreItemsHaveSameParent", async () => {
        //Arrange
        navigationBase._instance.dataStore = sinon.stub();
        navigationBase._instance.dataStore.data = sinon.stub();
        navigationBase._instance.dataStore.data.indexOf = sinon.stub().returns(1);
        navigationBase.getParentIndex = sinon.stub().returns(1);
        //Act
        const result = navigationBase.dataStoreItemsHaveSameParent(1,2);
        //Assert
        chai.assert(result === true, "Should return true");
    });
});