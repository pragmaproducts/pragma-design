import {TypeSelectionMediator} from "../../../../webcomponents/lib/type-selection-mediator.js";
import {DataSourceBase} from "../../../../lib/datasource-base.js";

describe("selection-mediator-tests", () => {

    let hierarchyDatasource;

    beforeEach(() => {

        hierarchyDatasource = new DataSourceBase({
            definition: {
                id: 0,
                hierarchical: true
            }
        });
        const hierarchialData = [
            {
                title: "site 0",
                type: "site",
                items: [
                    {
                        id: 1,
                        type: "siteType",
                        code: "Code 1",
                        selectable: true
                    },
                    {
                        id: 2,
                        type: "siteType",
                        code: "Code 2",
                        selectable: true
                    },
                    {
                        id: 3,
                        type: "siteType",
                        code: "Code 3",
                        selectable: false
                    }
                ]
            },
            {
                title: "site 1",
                type: "site",
                items: [
                    {
                        id: 4,
                        code: "Code 4",
                        type: "siteType",
                        selectable: true
                    },
                    {
                        id: 5,
                        code: "Code 5",
                        type: "siteType",
                        selectable: true
                    },
                    {
                        id: 6,
                        code: "Code 6",
                        type: "siteType",
                        selectable: false
                    }
                ]
            },

        ];

        hierarchyDatasource.load(hierarchialData);

    });

    it('select group', () => {
        // Arrange
        const mediator = new TypeSelectionMediator(hierarchyDatasource, null, true, "type");

        // Act
        mediator.applySelection(hierarchyDatasource._data[0], true);
        // Assert
        chai.assert.equal(hierarchyDatasource.selectedItemsMap.size, 1);
    });

    it('select leaf', () => {
        // Arrange
        const mediator = new TypeSelectionMediator(hierarchyDatasource, null, true, "type");

        // Act
        mediator.applySelection(hierarchyDatasource._data[0].items[0], true);
        // Assert
        chai.assert.equal(hierarchyDatasource.selectedItemsMap.size, 1);
    });

    it('select group then leaf', () => {
        // Arrange
        const mediator = new TypeSelectionMediator(hierarchyDatasource, null, true, "type");

        // Act
        mediator.applySelection(hierarchyDatasource._data[0], true);
        mediator.applySelection(hierarchyDatasource._data[1].items[0], true);
        // Assert
        chai.assert.equal(hierarchyDatasource.selectedItemsMap.size, 1);
    });

    it('select group then two leaf', () => {
        // Arrange
        const mediator = new TypeSelectionMediator(hierarchyDatasource, null, true, "type");

        // Act
        mediator.applySelection(hierarchyDatasource._data[0], true);
        mediator.applySelection(hierarchyDatasource._data[1].items[0], true);
        mediator.applySelection(hierarchyDatasource._data[0].items[1], true);
        // Assert
        chai.assert.equal(hierarchyDatasource.selectedItemsMap.size,2);
    });


    it('visible selection changed on type change', () => {
        // Arrange
        const mediator = new TypeSelectionMediator(hierarchyDatasource, null, true, "type");
        const visibleItems = [hierarchyDatasource._data[0], hierarchyDatasource._data[1].items[0]];
        // Act
        mediator.applySelection(hierarchyDatasource._data[0], true);
        mediator.applySelection(hierarchyDatasource._data[1].items[0], true);
        mediator.applySelection(hierarchyDatasource._data[0].items[0], true);

        const result = mediator.visibleSelectionChanged(visibleItems);

        // Assert
        chai.assert.deepEqual(result[1], hierarchyDatasource._data[1].items[0]);
        chai.assert.equal(Object.keys(result).length, 1);
    });


    it('visible selection changed on type change - select two', () => {
        // Arrange
        const mediator = new TypeSelectionMediator(hierarchyDatasource, null, true, "type");

        const visibleItems = [hierarchyDatasource._data[0], hierarchyDatasource._data[1].items[0], hierarchyDatasource._data[0].items[0]];
        // Act
        mediator.applySelection(hierarchyDatasource._data[0], true);
        mediator.applySelection(hierarchyDatasource._data[1].items[0], true);
        mediator.applySelection(hierarchyDatasource._data[0].items[0], true);

        const result = mediator.visibleSelectionChanged(visibleItems);

        // Assert
        chai.assert.deepEqual(result[1], hierarchyDatasource._data[1].items[0]);
        chai.assert.deepEqual(result[2], hierarchyDatasource._data[0].items[0]);

        chai.assert.equal(Object.keys(result).length, 2);
        chai.assert.equal(Object.keys(mediator.visibleSelection).length, 2);
    });


    it('Parent is deselected and new child added to visibleSelection', () => {
        // Arrange
        const mediator = new TypeSelectionMediator(hierarchyDatasource, null, true, "type");

        const visibleItems = [hierarchyDatasource._data[0], hierarchyDatasource._data[1].items[0]];
        mediator.applySelection(hierarchyDatasource._data[0], true);
        mediator.applySelection(hierarchyDatasource._data[1].items[0], true);
        mediator.applySelection(hierarchyDatasource._data[0].items[0], true);
        mediator.visibleSelectionChanged(visibleItems);
        // Act

        mediator.addToVisibleSelection(2,[hierarchyDatasource._data[0].items[0]]);

        // Assert
        chai.assert.equal(2, Object.keys(mediator.visibleSelection).length);
    });

});
