import {Calendar} from "../../../../webcomponents/pr-calendar/pr-calendar.js"
import {GridRenderer} from "../../../../webcomponents/pr-calendar/grid-renderer.js"
import {ListRenderer} from "../../../../webcomponents/pr-calendar/list-renderer.js"
import {dateHelpers} from "../../../../lib/date-helpers.js"
import {domHelper} from "../../../../lib/dom-helper.js";
import {inflationUtils} from "../../../../baremetal/lib/virtualization/inflation-utils.js";

describe("pr-calendar-tests", () => {

    let calendar;
    let dataStore;

    before(() => {
        chai.should();
    });

    beforeEach(() => {
        calendar = new Calendar();
        dataStore = {};
        calendar.dataStore = dataStore;
        calendar.focus = {};
    });

    afterEach(() => {
        sinon.restore();
        calendar = null;
        dataStore = null;
    });

    after(() => {

    });

    it("set initial viewDate", async () => {
        //Arrange
        const testDate = new Date(2019, 3, 2);
        sinon.stub(dateHelpers, "sameMonth").returns(false);
        const selectStub = sinon.stub(calendar, "_updateSelectElements");
        const spy = sinon.spy(calendar, "dispatchEvent");
        calendar.current = sinon.stub();
        calendar.current.render = sinon.stub();
        calendar.focus = sinon.stub();
        calendar.focus.render = sinon.stub();

        //Act
        calendar.viewDate = testDate;

        //Assert
        calendar.viewDate.should.be.a("Date");
        calendar.viewDate.should.equal(testDate);
        chai.assert(selectStub.called === true);
        chai.assert(spy.called === false);
    });

    it("set second viewDate", async () => {
        //Arrange
        const testDate = new Date(2019, 3, 2);
        const testDate2 = new Date(2019, 4, 5);
        const spy = sinon.spy(calendar, "dispatchEvent");
        const selectStub = sinon.stub(calendar, "_updateSelectElements");
        calendar.current = sinon.stub();
        calendar.current.render = sinon.stub();
        calendar.focus = sinon.stub();
        calendar.focus.render = sinon.stub();

        //Act
        calendar.viewDate = testDate;
        calendar.viewDate = testDate2;

        //Assert
        calendar.viewDate.should.be.a("Date");
        calendar.viewDate.should.equal(testDate2);
        chai.assert(spy.called === true);
        chai.assert(selectStub.called === true);
        spy.args.should.have.lengthOf(1);
        spy.args[0].should.have.lengthOf(1);
        spy.args[0][0].should.be.a("CustomEvent");
    });

    it("set viewDate null", async () => {
        //Arrange
        const testDate = null;
        const spy = sinon.spy(calendar, "dispatchEvent");
        const selectStub = sinon.stub(calendar, "_updateSelectElements");

        //Act
        calendar.viewDate = testDate;

        //Assert
        chai.assert(calendar.viewDate == null);
        chai.assert(spy.called === false);
        chai.assert(selectStub.called === false);
    });

    it("connected callback grid renderer type", async () => {
        //Arrange
        calendar.setAttribute("renderer", "grid");
        sinon.stub(calendar, "_initTemplate").returns({
            appendChild: () => {
            },
            querySelector: () => {
                return {};
            }
        });
        sinon.stub(calendar, "_buildSelectors");
        sinon.stub(calendar, "_addDetailsContainer").returns("detailsContainerStub");
        sinon.stub(calendar, "_ariaTags");
        sinon.stub(calendar, "viewDate").set(() => {
        });
        sinon.stub(calendar, "querySelector").returns({
            addEventListener: () => {
            }
        });
        calendar.current = sinon.stub();
        calendar.current.currentDate = new Date();

        //Act
        calendar.connectedCallback();

        //Assert
        chai.assert(calendar.renderer instanceof GridRenderer);
    });

    it("connected callback list renderer type", async () => {
        //Arrange
        calendar.setAttribute("renderer", "list");
        sinon.stub(calendar, "_initTemplate").returns({
            appendChild: () => {
            },
            querySelector: () => {
                return {};
            }
        });
        sinon.stub(calendar, "_buildSelectors");
        sinon.stub(calendar, "_addDetailsContainer").returns("detailsContainerStub");
        sinon.stub(calendar, "_ariaTags");
        sinon.stub(calendar, "viewDate").set(() => {
        });
        sinon.stub(calendar, "querySelector").returns({
            addEventListener: () => {
            }
        });
        calendar.current = sinon.stub();
        calendar.current.currentDate = new Date();

        //Act
        calendar.connectedCallback();

        //Assert
        chai.assert(calendar.renderer instanceof ListRenderer);
    });

    it("click event previous month called", async () => {
        //Arrange
        const spyEvent = sinon.spy();
        spyEvent.target = {};
        const previousMonthStub = sinon.stub(calendar, "_moveToPreviousMonth");
        const nextMonthStub = sinon.stub(calendar, "_moveToNextMonth");
        const stubFindParent = sinon.stub(domHelper, "findParentWithClass");
        stubFindParent.withArgs({}, "button-previous-month").returns(true);
        stubFindParent.withArgs({}, "button-next-month").returns(false);

        //Act
        calendar._click(spyEvent);
        //Assert
        chai.assert(previousMonthStub.calledOnce === true);
        chai.assert(nextMonthStub.called === false);
    });

    it("click event next month called", async () => {
        //Arrange
        const spyEvent = sinon.spy();
        spyEvent.target = {};
        const previousMonthStub = sinon.stub(calendar, "_moveToPreviousMonth");
        const nextMonthStub = sinon.stub(calendar, "_moveToNextMonth");
        const stubFindParent = sinon.stub(domHelper, "findParentWithClass");
        stubFindParent.withArgs({}, "button-previous-month").returns(false);
        stubFindParent.withArgs({}, "button-next-month").returns(true);

        //Act
        calendar._click(spyEvent);
        //Assert
        chai.assert(previousMonthStub.called === false);
        chai.assert(nextMonthStub.called === true);
    });

    it("init template grid", async () => {
        //Arrange
        calendar._renderer = new GridRenderer(calendar);
        const importTemplateStub = sinon.stub(calendar, "_importTemplate");
        let calledWithGridTemplate;
        importTemplateStub.withArgs("grid-template").callsFake(() => {
            calledWithGridTemplate = true;
            return document.createElement("div")
        });
        importTemplateStub.callsFake(() => {
            return document.createElement("div")
        });
        const appendStub = sinon.stub(calendar, "appendChild");
        const documentFragmentStub = sinon.stub(domHelper, "createDocumentFragment");
        const elementStub = sinon.stub(domHelper, "createElement");
        documentFragmentStub.callsFake(() => {
            return document.createElement("div")
        });
        elementStub.callsFake(() => {
            return document.createElement("div")
        });
        sinon.stub(inflationUtils, "createInflatorFunction");

        //Act
        calendar._initTemplate();

        //Assert
        chai.assert(appendStub.called === true);
        chai.assert(calledWithGridTemplate === true);
    });

    it("init template list", async () => {
        //Arrange
        calendar._renderer = new ListRenderer(calendar);
        const importTemplateStub = sinon.stub(calendar, "_importTemplate");
        let calledWithListTemplate;
        importTemplateStub.withArgs("list-template").callsFake(() => {
            calledWithListTemplate = true;
            return document.createElement("div")
        });
        importTemplateStub.callsFake(() => {
            return document.createElement("div")
        });
        const appendStub = sinon.stub(calendar, "appendChild");
        const documentFragmentStub = sinon.stub(domHelper, "createDocumentFragment");
        const elementStub = sinon.stub(domHelper, "createElement");
        documentFragmentStub.callsFake(() => {
            return document.createElement("div")
        });
        elementStub.callsFake(() => {
            return document.createElement("div")
        });
        sinon.stub(inflationUtils, "createInflatorFunction");

        //Act
        calendar._initTemplate();

        //Assert
        chai.assert(appendStub.called === true);
        chai.assert(calledWithListTemplate === true);
    });

    it("getDayContainersForDates valid dates", async () => {
        //Arrange
        const dates = [
            new Date(2019, 2, 15),
            new Date(2019, 3, 5)
        ];
        const dataModelsForDatesStub = sinon.stub().returns([
            {index: 1}
        ]);
        dataStore.getDataModelsForDates = dataModelsForDatesStub;
        const detailsContainerStub = sinon.stub();
        detailsContainerStub.children = [{
            dataset: {
                index: 1
            }
        }];
        calendar._detailsContainer = detailsContainerStub;
        //Act
        const containers = calendar.getDayContainersForDates(dates);
        //Assert
        chai.assert(containers.length === 1);
        chai.assert(containers[0].model.index === containers[0].element.dataset.index);
    });
});