import {PragmaFilter} from "../../../webcomponents/pragma-filter/pragma-filter.js";
import {RemoteDatasource} from "./../../../lib/remote-datasource.js";
import {DataSourceManager} from "./../../../lib/datasource-manager.js";

describe("pragma-filter-tests", () => {
    const sandbox = sinon.createSandbox();
    let instance;
    window.dataSourceManager = new DataSourceManager();

    beforeEach(() => {
        instance = new PragmaFilter();
        instance._input = document.createElement("input");
        
        const options = {
            schema: {},
            definition: {}
        };
        instance.datasource = new RemoteDatasource(options);
    });

    it('filter', async () => {
        // Arrange
        instance.filterString = "Test";
        const spyToggleButtons = sandbox.stub(instance, "_toggleButtons");
        const spyFilter = sandbox.stub(instance.datasource, "filter");
        
        // Act
        await instance.filter();
        
        // Assert
        chai.assert(spyToggleButtons.calledOnce, "Expect _toggleButtons() on search component to be called once.");
        chai.assert(spyFilter.calledOnce, "Expect filter() on target visualisation data source to be called once.");
        chai.assert(spyFilter.calledWith("Test"));
    });

    it('clearFilter', async () => {
        // Arrange
        const spyToggleButtons = sandbox.stub(instance, "_toggleButtons");
        instance.filterString = "Test";
        const spyFilter = sandbox.stub(instance.datasource, "filter");
        instance._input.readOnly = true;

        // Act
        await instance.clearFilter();

        // Assert
        chai.assert.equal(instance.filterString, "", "Expect filter string to be cleared.");
        chai.assert(spyToggleButtons.calledOnce, "Expect _toggleButtons() on search component to be called once.");
        chai.assert(spyFilter.calledOnce, "Expect filter() on target visualisation data source to be called once.");
        chai.assert(spyFilter.calledWith(""));
        chai.assert.isFalse(instance._input.readOnly, "Expect search field read only attribute to be set to false.");
    });
});