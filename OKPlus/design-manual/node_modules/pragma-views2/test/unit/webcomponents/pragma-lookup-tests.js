import {PragmaLookup} from "../../../webcomponents/pragma-lookup/pragma-lookup.js";


describe("pragma-lookup-tests", () => {
    window.eventEmitter =  {
        on: () => {}
    };
    const sandbox = sinon.createSandbox();
    const _pragmaLookup = new PragmaLookup();
    let _emitMessages;
    let _postMessages;
    let _previousWindowEventEmitter;
    let _eventHandlerMap;

    beforeEach(() => {
        _emitMessages = [];
        _postMessages = [];
        _eventHandlerMap = new Map();        
        
        _previousWindowEventEmitter = window.eventEmitter;
        window.eventEmitter = {
            emit: function (eventName, eventArgs) {
                _emitMessages.push({eventName: eventName, eventArgs: eventArgs})
            },
            postMessage: function (eventName, eventArgs) {
                _postMessages.push({eventName: eventName, eventArgs: eventArgs})
            },
            on: function (name, fn) {
                _eventHandlerMap.set(name, fn);
            }
        };

        _pragmaLookup.togglePreviewButton = ()=> {
            return;
        };
    });

    afterEach(() => {
        if (_previousWindowEventEmitter != null) {
            window.eventEmitter = _previousWindowEventEmitter;
        }
        else {
            delete window.eventEmitter;
        }
    });

    it('doLookup make sure that the variables are set', () => {
        // Arrange
        // noinspection SpellCheckingInspection
        const lookup = {
            "id": 1,
            "name": "permissionTreeCode",
            "mapping": {
                "permissionTreeId": "id",
                "permissionTreeCode": "code",
                "permissionTreeDescription": "description"
            },
            "perspective": 0,
            "template": 0,
            "datasource": 0            
        };
        const lookupDefinition = {
            definition: lookup,
            perspective: null,
            preview: null,
            model: {
                __schema: {
                    templates: [{id: 0, elements: []}],
                    type: "Some strange value1",
                    resource: "JobCard"
                }
            },
            sourceSchema: {
                variables: {
                    SomeProperty1: "Special kind of value"
                }
            },
            callback: null
        };
        
        _pragmaLookup.collectionForm = {schema: null};
        _pragmaLookup.model = {someName: "Albert"};
        
        // Act
        _pragmaLookup.doLookup(lookupDefinition);

        // Assert
        chai.assert.equal(_pragmaLookup.collectionForm.schema.variables.SomeProperty1, lookupDefinition.sourceSchema.variables.SomeProperty1);        
        // noinspection SpellCheckingInspection
        const eventMessage = _emitMessages.find(x => x.eventName === "datasource-records:get");
        chai.assert.equal(eventMessage.eventArgs.identifier, "Some strange value1JobCard");        
        chai.assert.equal(eventMessage.eventArgs.datasource, lookup.datasource);        
        chai.assert.equal(eventMessage.eventArgs.model.someName, _pragmaLookup.model.someName);        
    });


    it('doLookup make sure that the preview button is hidden when no preview', () => {
        // Arrange
        // noinspection SpellCheckingInspection
        const lookup = {
            "id": 1,
            "name": "permissionTreeCode",
            "mapping": {
                "permissionTreeId": "id",
                "permissionTreeCode": "code",
                "permissionTreeDescription": "description"
            },
            "perspective": 0,
            "template": 0,
            "datasource": 0
        };

        const lookupDefinition = {
            definition: lookup,
            perspective: null,
            preview: null,
            model: {
                __schema: {
                    templates: [{id: 0, elements: []}],
                    type: "Some strange value1",
                    resource: "JobCard"
                }
            },
            sourceSchema: {
                variables: {
                    SomeProperty1: "Special kind of value"
                }
            },
            callback: null
        };

        _pragmaLookup.collectionForm = {schema: null};
        _pragmaLookup.model = {someName: "Albert"};

        
        const applySelectionSpy = sandbox.stub(_pragmaLookup, 'togglePreviewButton');

        // Act
        _pragmaLookup.doLookup(lookupDefinition);

        // Assert
        chai.expect(applySelectionSpy.calledWith(true), 'Expect the togglePreviewButton to be called with true');
    });

    it('doLookup make sure that the preview button is shown when preview set', () => {
        // Arrange
        // noinspection SpellCheckingInspection
        const lookup = {
            "id": 1,
            "name": "permissionTreeCode",
            "mapping": {
                "permissionTreeId": "id",
                "permissionTreeCode": "code",
                "permissionTreeDescription": "description"
            },
            "perspective": 0,
            "template": 0,
            "datasource": 0
        };

        const lookupDefinition = {
            definition: lookup,
            perspective: null,
            model: {
                __schema: {
                    templates: [{id: 0, elements: []}],
                    type: "Some strange value1",
                    resource: "JobCard"
                }
            },
            sourceSchema: {
                variables: {
                    SomeProperty1: "Special kind of value"
                }
            },
            callback: null
        };

        _pragmaLookup.collectionForm = {schema: null};
        _pragmaLookup.model = {someName: "Albert"};


        const applySelectionSpy = sandbox.stub(_pragmaLookup, 'togglePreviewButton');

        // Act
        _pragmaLookup.doLookup(lookupDefinition);

        // Assert
        chai.expect(applySelectionSpy.calledWith(false), 'Expect the togglePreviewButton to be called with true');
    });

});
