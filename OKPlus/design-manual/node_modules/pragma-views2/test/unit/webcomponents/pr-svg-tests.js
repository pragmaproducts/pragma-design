import {Svg} from "./../../../webcomponents/pr-svg/pr-svg.js";

describe("pr-svg-tests", () => {
    const sandbox = sinon.createSandbox();
    let instance;

    beforeEach(() => {
        instance = new Svg();
    });

    afterEach(() => {
       sandbox.restore();
    });

    it('_buildSVG when name is set calls buildSVGFromName', async () => {
        //Arrange
        instance.name = "Some name";
        const stubBuildSVGFromName = sandbox.stub(instance, "_buildSVGFromName");
        const stubBuildSVGFromUrl = sandbox.stub(instance, "_buildSVGFromUrl");

        //Act
        await instance._buildSVG();

        //Assert
        chai.assert(stubBuildSVGFromName.calledOnce, "Expected buildSvgFromName to be called once");
        chai.assert(stubBuildSVGFromUrl.notCalled, "Expected buildSvgFromUrl to NOT be called");
    });

    it('_buildSVG when url is set calls buildSVGFromUrl', async () => {
        //Arrange
        instance.url = "www.test.com";
        const stubBuildSVGFromName = sandbox.stub(instance, "_buildSVGFromName");
        const stubBuildSVGFromUrl = sandbox.stub(instance, "_buildSVGFromUrl");

        //Act
        await instance._buildSVG();

        //Assert
        chai.assert(stubBuildSVGFromName.notCalled, "Expected buildSvgFromName to NOT be called");
        chai.assert(stubBuildSVGFromUrl.calledOnce, "Expected buildSvgFromUrl to be called once");
    });

    it('setDimensions sets styles to fullsize', () => {
       //Arrange
        instance.style.width = null;
        instance.style.height = null;

        //Act
        instance.setDimensions();

        //Assert
        chai.assert.equal(instance.style.width, "100%");
        chai.assert.equal(instance.style.height, "100%");
    });

    it('setDimensions set style from attribute', () => {
       //Arrange
       instance.setAttribute("dimensions", "50%, 50%");

       //Act
       instance.setDimensions();

       //Assert
       chai.assert.equal(instance._dimensions, "50%, 50%", "Expected setDimensions to be set from attribute");

    });

    it('dimensions setter call set dimensions', () => {
       //Arrange
       const stubSetDimensions = sandbox.stub(instance, "setDimensions");

       //Act
        const dimensions = ["100%", "100%"];
        instance.dimensions = dimensions;

       //Assert
        chai.assert.equal(instance._dimensions, dimensions, "Expect dimensions to be set");
        chai.assert(stubSetDimensions.calledOnce, "Expected setDimensions to be called once");
    });

    it('position setter call set position', () => {
        //Await
        const position = "0,0";
        instance.position = position;

        //Assert
        chai.assert.equal(instance._position, position, "Expected position style to be set");
    });

    it('connectedCallback', async () => {
        //Arrange
        const stubBuildSVG = sandbox.stub(instance, "_buildSVG");
        const stubSetDimensions = sandbox.stub(instance, "setDimensions");

        //Act
        await instance.connectedCallback();

        //Assert
        chai.assert(stubBuildSVG.calledOnce, "Expected stubBuildSVG to be called once");
        chai.assert.equal(instance.getAttribute("style"), "transform:translate(0,0)", "Expected element style attribute to be set correctly");
        chai.assert(stubSetDimensions.calledOnce, "Expected setDimensions to be called once");
    });

    it('disconnectedCallback', () => {
        //Arrange
        instance.svg = document.createElement("svg");

        //Act
        instance.disconnectedCallback();

        //Assert
        chai.assert.isNull(instance.svg, "Expected disconnectedCallback to be null");

    });

    it('svg setter to readyCallback', () => {
        //Arrange
        const svg = document.createElement("svg");
        let called = false;
        const callback = () => {called = true};
        instance.registerReadyCallback(callback);

        //Act
        instance.svg = svg;

        //Assert
        chai.assert.isNotNull(instance._svg, "Expected svg to not be null");
        chai.assert.equal(instance._svg, svg, "Expected set svg to be svg");
        chai.assert.isTrue(called, "Expected callback to be true");
    });

    it('_buildSVGFromName sets up and builds the svg', () => {
        //Act
        instance._buildSVGFromName();

        //Assert
        chai.assert.isNotNull(instance.svg, "Expected svg property to be set properly");
        chai.assert.equal(instance.svg.tagName, "svg", "Expected element tagname to be svg");
        chai.assert.equal(instance.childElementCount, 1, "Expected element to have 1 child element");
        chai.assert.equal(instance.firstChild.tagName, "svg", "Expected element tag name to be svg");
        chai.assert.equal(instance.svg.childElementCount, 1, "Expected svg to have 1 child element");
        chai.assert.equal(instance.svg.firstChild.tagName, "use", "Expected element tag name to be use");
        chai.assert.equal(instance.svg.firstChild.getAttribute("xlink:href"), `#${instance.name}`, "Expected use element href attribute to be set correctly");
    });

    function jsonOk (body) {
        let mockResponse = new window.Response((body), {
            status: 200,
            headers: {
                'Content-type': 'application/json'
            }
        });

        return Promise.resolve(mockResponse);
    }

    it('_buildSVGFromUrl sets up and builds the svg', async () => {
        //Arrange
        const stub = sandbox.stub(window, 'fetch');
        stub.onCall(0).returns(jsonOk('<svg height="512pt" viewBox="0 0 512.00049 512" width="512pt" xmlns="http://www.w3.org/2000/svg"><path d="m512 210c0 36.46875-9.5 72.398438-27.472656 103.910156-5.472656 9.59375-17.683594 12.933594-27.28125 7.460938-9.59375-5.472656-12.9375-17.6875-7.460938-27.28125 14.53125-25.480469 22.214844-54.558594 22.214844-84.089844 0-93.738281-76.261719-170-170-170s-170 76.261719-170 170 76.261719 170 170 170c29.171875 0 57.941406-7.507812 83.195312-21.710938 9.628907-5.414062 21.824219-1.996093 27.238282 7.628907 5.414062 9.628906 2 21.824219-7.628906 27.234375-31.226563 17.566406-66.777344 26.847656-102.804688 26.847656-50.476562 0-96.847656-17.90625-133.105469-47.695312l-134.800781 133.886718c-3.898438 3.871094-8.996094 5.808594-14.09375 5.808594-5.140625 0-10.28125-1.96875-14.191406-5.90625-7.78125-7.835938-7.738282-20.5.097656-28.285156l134.621094-133.703125c-30.285156-36.402344-48.527344-83.160157-48.527344-134.105469 0-115.792969 94.207031-210 210-210s210 94.207031 210 210zm-75.636719-8.5c4.847657 6.898438 4.847657 16.097656.003907 22.996094-.703126 1-3.117188 4.417968-4.617188 6.304687-6.695312 8.417969-22.375 28.144531-44.191406 45.554688-27.972656 22.324219-56.757813 33.644531-85.558594 33.644531-28.796875 0-57.582031-11.320312-85.554688-33.644531-21.820312-17.410157-37.5-37.132813-44.195312-45.554688-1.5-1.886719-3.910156-5.300781-4.617188-6.304687-4.84375-6.898438-4.84375-16.097656.003907-22.996094.703125-1 3.113281-4.414062 4.613281-6.296875 6.695312-8.425781 22.378906-28.148437 44.195312-45.558594 27.96875-22.324219 56.757813-33.644531 85.554688-33.644531 28.800781 0 57.585938 11.320312 85.558594 33.644531 21.816406 17.410157 37.496094 37.132813 44.191406 45.558594 1.5 1.886719 3.910156 5.296875 4.613281 6.296875zm-41.71875 11.5c-31.800781-37.832031-62.9375-57-92.644531-57-29.703125 0-60.839844 19.167969-92.640625 57 31.800781 37.832031 62.9375 57 92.640625 57 29.707031 0 60.839844-19.164062 92.644531-57zm-91.644531-38c-20.988281 0-38 17.011719-38 38s17.011719 38 38 38 38-17.011719 38-38-17.011719-38-38-38zm0 0"/></svg>'));

        //Act
        await instance._buildSVGFromUrl();

        //Assert
        chai.assert.isNotNull(instance.svg, "Expected svg property to be set properly");
        chai.assert.equal(instance.svg.tagName, "svg", "Expected element tagname to be svg");
        chai.assert.equal(instance.childElementCount, 1, "Expected element to have 1 child element");
        chai.assert.equal(instance.firstChild.tagName, "svg", "Expected element tag name to be svg");
    });

});