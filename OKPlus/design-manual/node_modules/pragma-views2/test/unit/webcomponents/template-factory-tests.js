import {TemplateFactory} from "../../../webcomponents/lib/template-factory.js";
import {ElementHelper} from "../test-helpers/element-helper.js";


describe("template-factory-tests", () => {

    const template = new ElementHelper();
    const condition = "model.code == '1'";
    const key = "condition";
    const createInflateFn = () => {
        return null;
    };
    let sandbox;
    const elementStore = {
        store: [0]
    }


    template.setAttribute("condition", "model.code == '1'");


    beforeEach(() => {

        sandbox = sinon.createSandbox();
        sandbox.stub(TemplateFactory.prototype, '_createElementStore').returns(elementStore);
        sandbox.stub(TemplateFactory.prototype, '_createInflateFunction').returns(createInflateFn);

    });

    afterEach(() => {
        sandbox.restore();
    });


    it('template-factory - template setData called with correct parameters', () => {
        // Arrange
        const spySetData = sandbox.stub(TemplateFactory.prototype, '_setData');

        // Act
        new TemplateFactory([template], "condition");
        //const result = factory.get(key);
        // Assert
        chai.assert(spySetData.calledWith([template], key));
    });


    it('template-factory - template created', () => {
        // Arrange

        // Act
        const factory = new TemplateFactory([template], "condition");
        const result = factory.get(condition);
        //const result = factory.get(key);
        // Assert
        chai.assert.isNotNull(result);
        chai.assert.isNotNull(result.inflate);
        chai.assert.isNotNull(result.conditionFn);
        chai.assert.equal(elementStore, result.store);
    });

});
