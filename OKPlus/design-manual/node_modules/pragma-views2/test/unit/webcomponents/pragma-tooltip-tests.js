import {PragmaTooltip} from "../../../webcomponents/pragma-tooltip/pragma-tooltip.js";
import {ElementHelper} from "../test-helpers/element-helper.js";

describe("pragma-tooltip-tests", () => {

    const sandbox = sinon.createSandbox();
    let attributes;
    let tooltip;
    const tooltipText =  "The fox jumps very high";

    
    let target;

    beforeEach(() => {
        tooltip = new PragmaTooltip();
        tooltip.setAttribute = (property, value)=>{};
        tooltip.textElement = {
            innerHTML: null
        };
        attributes = {};
        target = new ElementHelper();
        target.setAttribute("tooltip", tooltipText);
    });


    it('pragma-tooltip - make sure the text is set when valid target', () => {
        // Arrange
        const spy = sandbox.stub(tooltip, 'setAttribute');
        const spyMoveTo = sandbox.stub(tooltip, 'moveTo');
        // Act
        tooltip.target = target;
        // Assert
        chai.assert.equal(tooltip.textElement.innerHTML, tooltipText);
        chai.expect(spy.calledWith("aria-hidden", "false"));
        chai.expect(spyMoveTo.calledOnce);
    });

    it('pragma-tooltip - make sure the tooltip is hidden when target null', () => {
        // Arrange
        const spy = sandbox.stub(tooltip, 'setAttribute');

        // Act
        tooltip.target = null;

        // Assert
        chai.expect(spy.calledWith("aria-hidden", "true"));
    });


});
